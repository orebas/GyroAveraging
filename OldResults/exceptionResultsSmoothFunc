linear interp; trapezoid rule; CPU ,8,0,1.49198e+07,67.0252,8, 0.505793,,0,0.411358,0.505793,
linear interp; trapezoid rule; CPU ,12,0,2.84785e+07,35.1142,8, 0.318907,,0,0.255532,0.318907,
linear interp; trapezoid rule; CPU ,16,0,4.86322e+07,20.5625,8, 0.152737,,0,0.152737,0.145998,
linear interp; trapezoid rule; CPU ,20,0,7.97555e+07,12.5383,8, 0.176426,,0,0.11159,0.176426,
linear interp; trapezoid rule; CPU ,24,0,1.126e+08,8.88103,8, 0.152116,,0,0.132397,0.152116,
linear interp; trapezoid rule; CPU ,28,0,1.42705e+08,7.00748,8, 0.0689832,,0,0.0689832,0.0640174,
linear interp; trapezoid rule; CPU ,32,0,2.03308e+08,4.91864,8, 0.0747684,,0,0.0420243,0.0747684,
linear interp; trapezoid rule; CPU ,36,0,2.5649e+08,3.89879,8, 0.0559142,,0,0.0341881,0.0559142,
linear interp; trapezoid rule; CPU ,40,0,2.86804e+08,3.4867,8, 0.0576169,,0,0.0362971,0.0576169,
linear interp; trapezoid rule; CPU ,44,0,3.44377e+08,2.9038,8, 0.0360798,,0,0.0360798,0.0230144,
linear interp; trapezoid rule; CPU ,48,0,4.19663e+08,2.38286,8, 0.0468409,,0,0.0264159,0.0468409,
linear interp; trapezoid rule; CPU ,52,0,4.85775e+08,2.05857,8, 0.0637931,,0,0.0497955,0.0637931,
linear interp; trapezoid rule; CPU ,56,0,5.70193e+08,1.75379,8, 0.030032,,0,0.030032,0.0211392,
linear interp; trapezoid rule; CPU ,60,0,6.59928e+08,1.51532,8, 0.0227206,,0,0.0146266,0.0227206,
linear interp; trapezoid rule; CPU ,64,0,7.58835e+08,1.31781,8, 0.0274748,,0,0.00921909,0.0274748,
linear interp; trapezoid rule; CPU ,68,0,8.6302e+08,1.15872,8, 0.0322975,,0,0.0149692,0.0322975,
linear interp; trapezoid rule; CPU ,72,0,9.6101e+08,1.04057,8, 0.016968,,0,0.016968,0.00838333,
linear interp; trapezoid rule; CPU ,76,0,1.10914e+09,0.901599,8, 0.0209541,,0,0.0138686,0.0209541,
linear interp; trapezoid rule; CPU ,80,0,1.22285e+09,0.817759,8, 0.00870552,,0,0.00870552,0.00821,
linear interp; trapezoid rule; CPU ,84,0,1.33787e+09,0.747455,8, 0.0170231,,0,0.0170231,0.0159189,
linear interp; trapezoid rule; CPU ,88,0,1.46166e+09,0.684151,8, 0.00861648,,0,0.00856212,0.00861648,
linear interp; trapezoid rule; CPU ,92,0,1.643e+09,0.608641,8, 0.016487,,0,0.00541384,0.016487,
linear interp; trapezoid rule; CPU ,96,0,1.76852e+09,0.565445,8, 0.0246028,,0,0.00757253,0.0246028,
linear interp; trapezoid rule; CPU ,100,0,1.94374e+09,0.514473,8, 0.00937315,,0,0.00937315,0.00702791,
linear interp; trapezoid rule; CPU ,104,0,2.07707e+09,0.481448,8, 0.0101356,,0,0.00862688,0.0101356,
linear interp; trapezoid rule; CPU ,108,0,2.29326e+09,0.43606,8, 0.00930104,,0,0.00438091,0.00930104,
linear interp; trapezoid rule; CPU ,112,0,2.43357e+09,0.41092,8, 0.0138765,,0,0.0126988,0.0138765,
linear interp; trapezoid rule; CPU ,116,0,2.57889e+09,0.387764,8, 0.00681992,,0,0.00681992,0.0040298,
linear interp; trapezoid rule; CPU ,120,0,2.82614e+09,0.353839,8, 0.0104071,,0,0.00293135,0.0104071,
linear interp; trapezoid rule; CPU ,124,0,3.03009e+09,0.330023,8, 0.00412014,,0,0.00412014,0.00407189,
linear interp; trapezoid rule; CPU ,128,0,3.24878e+09,0.307808,8, 0.007243,,0,0.00640761,0.007243,
linear interp; trapezoid rule; CPU ,132,0,3.60539e+09,0.277362,8, 0.00670131,,0,0.00645008,0.00670131,
linear interp; trapezoid rule; CPU ,136,0,4.14611e+09,0.24119,8, 0.00844817,,0,0.00372326,0.00844817,
linear interp; trapezoid rule; CPU ,140,0,3.90266e+09,0.256236,8, 0.0132043,,0,0.0101123,0.0132043,
linear interp; trapezoid rule; CPU ,144,0,4.24997e+09,0.235296,8, 0.00600109,,0,0.00600109,0.00279837,
linear interp; trapezoid rule; CPU ,148,0,4.40122e+09,0.22721,8, 0.00654606,,0,0.0024825,0.00654606,
linear interp; trapezoid rule; CPU ,152,0,4.60714e+09,0.217055,8, 0.00422611,,0,0.00280397,0.00422611,
linear interp; trapezoid rule; CPU ,156,0,4.95039e+09,0.202004,8, 0.00798952,,0,0.00395651,0.00798952,
linear interp; trapezoid rule; CPU ,160,0,5.26868e+09,0.189801,8, 0.00473954,,0,0.00473954,0.00354906,
linear interp; trapezoid rule; CPU ,164,0,5.47407e+09,0.182679,8, 0.00635088,,0,0.00314163,0.00635088,
linear interp; trapezoid rule; CPU ,168,0,5.76545e+09,0.173447,8, 0.00506202,,0,0.00488014,0.00506202,
linear interp; trapezoid rule; CPU ,172,0,5.98132e+09,0.167187,8, 0.00897586,,0,0.00484856,0.00897586,
linear interp; trapezoid rule; CPU ,176,0,6.366e+09,0.157085,8, 0.00449695,,0,0.00229644,0.00449695,
linear interp; trapezoid rule; CPU ,180,0,6.70136e+09,0.149223,8, 0.00558214,,0,0.00172845,0.00558214,
linear interp; trapezoid rule; CPU ,184,0,6.96436e+09,0.143588,8, 0.0079255,,0,0.00284613,0.0079255,
linear interp; trapezoid rule; CPU ,188,0,7.24593e+09,0.138009,8, 0.00390354,,0,0.00390354,0.00239921,
linear interp; trapezoid rule; CPU ,192,0,7.83478e+09,0.127636,8, 0.00492845,,0,0.00295537,0.00492845,
linear interp; trapezoid rule; CPU ,196,0,8.0165e+09,0.124743,8, 0.00202538,,0,0.00148388,0.00202538,
linear interp; trapezoid rule; CPU ,200,0,8.40951e+09,0.118913,8, 0.00458369,,0,0.00458369,0.00418813,
linear interp; trapezoid rule; CPU ,204,0,8.70852e+09,0.11483,8, 0.00217048,,0,0.00211335,0.00217048,
linear interp; trapezoid rule; CPU ,208,0,9.00753e+09,0.111018,8, 0.00506478,,0,0.00206266,0.00506478,
linear interp; trapezoid rule; CPU ,212,0,9.44856e+09,0.105836,8, 0.00832373,,0,0.00276607,0.00832373,
linear interp; trapezoid rule; CPU ,216,0,9.90975e+09,0.100911,8, 0.00282016,,0,0.00282016,0.00213969,
linear interp; trapezoid rule; CPU ,220,0,1.05485e+10,0.0947998,8, 0.00307109,,0,0.00281201,0.00307109,
linear interp; trapezoid rule; CPU ,224,0,1.06315e+10,0.09406,8, 0.00325883,,0,0.00126141,0.00325883,
linear interp; trapezoid rule; CPU ,228,0,1.10577e+10,0.0904346,8, 0.00485405,,0,0.00441005,0.00485405,
linear interp; trapezoid rule; CPU ,232,0,1.15428e+10,0.0866341,8, 0.00247845,,0,0.00247845,0.00145742,
linear interp; trapezoid rule; CPU ,236,0,1.19201e+10,0.0838922,8, 0.00393367,,0,0.000927579,0.00393367,
linear interp; trapezoid rule; CPU ,240,0,1.22737e+10,0.0814752,8, 0.00130404,,0,0.00130404,0.00110012,
linear interp; trapezoid rule; CPU ,244,0,1.28331e+10,0.0779234,8, 0.00296593,,0,0.00240736,0.00296593,
linear interp; trapezoid rule; CPU ,248,0,1.33229e+10,0.075059,8, 0.00264436,,0,0.00264436,0.00229819,
linear interp; trapezoid rule; CPU ,252,0,1.38035e+10,0.0724452,8, 0.00351916,,0,0.001358,0.00351916,
linear interp; trapezoid rule; CPU ,256,0,1.4066e+10,0.0710934,8, 0.00617183,,0,0.00452196,0.00617183,
linear interp; CPU Sparse Matrix   ,8,0.001,12356,80932.3,8, 0.506719,,7.84917e-06,0.41055,0.506719,
linear interp; CPU Sparse Matrix   ,12,0.003,31237,32013.3,8, 0.317403,,1.28435e-07,0.257043,0.317403,
linear interp; CPU Sparse Matrix   ,16,0.006,17245,57987.8,8, 0.152099,,1.64805e-08,0.152099,0.143808,
linear interp; CPU Sparse Matrix   ,20,0.011,18390,54377.4,8, 0.176345,,4.81405e-09,0.110127,0.176345,
linear interp; CPU Sparse Matrix   ,24,0.015,22075,45300.1,8, 0.151464,,2.11309e-09,0.133014,0.151464,
linear interp; CPU Sparse Matrix   ,28,0.028,27051,36967.2,8, 0.068386,,1.1673e-09,0.068386,0.0631937,
linear interp; CPU Sparse Matrix   ,32,0.042,42871,23325.8,8, 0.0737305,,7.43312e-10,0.0423078,0.0737305,
linear interp; CPU Sparse Matrix   ,36,0.062,57254,17466,8, 0.0567431,,5.19946e-10,0.0341307,0.0567431,
linear interp; CPU Sparse Matrix   ,40,0.122,84557,11826.3,8, 0.0565384,,3.88288e-10,0.0352951,0.0565384,
linear interp; CPU Sparse Matrix   ,44,0.104,106353,9402.65,8, 0.0354157,,3.04067e-10,0.0354157,0.0232835,
linear interp; CPU Sparse Matrix   ,48,0.16,142812,7002.21,8, 0.043866,,2.46752e-10,0.0255283,0.043866,
linear interp; CPU Sparse Matrix   ,52,0.2,168669,5928.77,8, 0.0635495,,2.05826e-10,0.0494188,0.0635495,
linear interp; CPU Sparse Matrix   ,56,0.229,191863,5212.05,8, 0.0295696,,1.7546e-10,0.0295696,0.0210114,
linear interp; CPU Sparse Matrix   ,60,0.269,225989,4424.99,8, 0.0221658,,1.52218e-10,0.0145252,0.0221658,
linear interp; CPU Sparse Matrix   ,64,0.366,314694,3177.69,8, 0.0264961,,1.33965e-10,0.0092475,0.0264961,
linear interp; CPU Sparse Matrix   ,68,0.386,403661,2477.33,8, 0.0318402,,1.19318e-10,0.0144131,0.0318402,
linear interp; CPU Sparse Matrix   ,72,0.47,398033,2512.35,8, 0.016859,,1.07348e-10,0.016859,0.00887309,
linear interp; CPU Sparse Matrix   ,76,0.579,450480,2219.85,8, 0.0197906,,9.74106e-11,0.0133945,0.0197906,
linear interp; CPU Sparse Matrix   ,80,0.637,560726,1783.4,8, 0.00856504,,8.90489e-11,0.00842362,0.00856504,
linear interp; CPU Sparse Matrix   ,84,0.784,603087,1658.14,8, 0.0168015,,8.1929e-11,0.0168015,0.0151992,
linear interp; CPU Sparse Matrix   ,88,0.834,726333,1376.78,8, 0.00903636,,7.5803e-11,0.00872706,0.00903636,
linear interp; CPU Sparse Matrix   ,92,0.942,925227,1080.82,8, 0.01534,,7.04832e-11,0.00528737,0.01534,
linear interp; CPU Sparse Matrix   ,96,0.999,1.17663e+06,849.885,8, 0.0244551,,6.58255e-11,0.00724285,0.0244551,
linear interp; CPU Sparse Matrix   ,100,1.225,1.47569e+06,677.647,8, 0.00925473,,6.17173e-11,0.00925473,0.00600913,
linear interp; CPU Sparse Matrix   ,104,1.382,1.79482e+06,557.158,8, 0.0105734,,5.80697e-11,0.00852137,0.0105734,
linear interp; CPU Sparse Matrix   ,108,1.445,2.24181e+06,446.068,8, 0.00931333,,5.48114e-11,0.00429922,0.00931333,
linear interp; CPU Sparse Matrix   ,112,1.688,2.59424e+06,385.469,8, 0.0134123,,5.18851e-11,0.0125465,0.0134123,
linear interp; CPU Sparse Matrix   ,116,1.959,2.97005e+06,336.695,8, 0.00648231,,4.92438e-11,0.00648231,0.00336207,
linear interp; CPU Sparse Matrix   ,120,2.153,3.40321e+06,293.84,8, 0.00985282,,4.68488e-11,0.00300264,0.00985282,
linear interp; CPU Sparse Matrix   ,124,2.165,3.99751e+06,250.156,8, 0.00427837,,4.46681e-11,0.00427837,0.00398877,
linear interp; CPU Sparse Matrix   ,128,2.601,4.27236e+06,234.063,8, 0.00645508,,4.26747e-11,0.00603251,0.00645508,
linear interp; CPU Sparse Matrix   ,132,2.811,5.05034e+06,198.007,8, 0.00611959,,4.08462e-11,0.00611959,0.00558091,
linear interp; CPU Sparse Matrix   ,136,3.22,3.98809e+06,250.746,8, 0.00801312,,3.91632e-11,0.00342448,0.00801312,
linear interp; CPU Sparse Matrix   ,140,3.295,5.75721e+06,173.695,8, 0.0128143,,3.76095e-11,0.00995256,0.0128143,
linear interp; CPU Sparse Matrix   ,144,3.754,6.54051e+06,152.893,8, 0.00548616,,3.61797e-11,0.00548616,0.00229812,
linear interp; CPU Sparse Matrix   ,148,4.047,7.11956e+06,140.458,8, 0.00647535,,3.4856e-11,0.00244294,0.00647535,
linear interp; CPU Sparse Matrix   ,152,4.419,7.65508e+06,130.632,8, 0.00446689,,3.36228e-11,0.00249625,0.00446689,
linear interp; CPU Sparse Matrix   ,156,4.598,8.76151e+06,114.136,8, 0.00721904,,3.24715e-11,0.00405571,0.00721904,
linear interp; CPU Sparse Matrix   ,160,5.023,9.37814e+06,106.631,8, 0.00452152,,3.13942e-11,0.00452152,0.00260875,
linear interp; CPU Sparse Matrix   ,164,4.858,9.93334e+06,100.671,8, 0.0060847,,3.03842e-11,0.00327205,0.0060847,
linear interp; CPU Sparse Matrix   ,168,5.74,9.08172e+06,110.111,8, 0.00494187,,2.94356e-11,0.00494187,0.00487418,
linear interp; CPU Sparse Matrix   ,172,5.62,1.16306e+07,85.9802,8, 0.0049177,,2.85429e-11,0.0049177,0.00327857,
linear interp; CPU Sparse Matrix   ,176,6.145,1.26637e+07,78.9659,8, 0.00398931,,2.77014e-11,0.0022024,0.00398931,
linear interp; CPU Sparse Matrix   ,180,7.555,1.35246e+07,73.9394,8, 0.00476298,,2.6907e-11,0.00145351,0.00476298,
linear interp; CPU Sparse Matrix   ,184,7.027,1.46955e+07,68.0478,8, 0.00768401,,2.61559e-11,0.00290213,0.00768401,
linear interp; CPU Sparse Matrix   ,188,8.496,1.26965e+07,78.7616,8, 0.0035341,,2.54446e-11,0.0035341,0.00122845,
linear interp; CPU Sparse Matrix   ,192,7.974,1.63937e+07,60.9989,8, 0.00449007,,2.47702e-11,0.00297048,0.00449007,
linear interp; CPU Sparse Matrix   ,196,9.428,1.75554e+07,56.9627,8, 0.00206169,,2.41299e-11,0.00143359,0.00206169,
linear interp; CPU Sparse Matrix   ,200,8.824,1.89208e+07,52.8518,8, 0.0046037,,2.35212e-11,0.0046037,0.00425237,
linear interp; CPU Sparse Matrix   ,204,10.406,1.96592e+07,50.8668,8, 0.00220195,,2.29419e-11,0.00220195,0.00220056,
linear interp; CPU Sparse Matrix   ,208,10.108,2.06087e+07,48.5231,8, 0.00426984,,2.23899e-11,0.000898527,0.00426984,
linear interp; CPU Sparse Matrix   ,212,11.72,2.18285e+07,45.8116,8, 0.00809907,,2.18633e-11,0.00199639,0.00809907,
linear interp; CPU Sparse Matrix   ,216,12.526,2.41462e+07,41.4144,8, 0.00273421,,2.13605e-11,0.00273421,0.00179701,
linear interp; CPU Sparse Matrix   ,220,13.096,2.52976e+07,39.5294,8, 0.00306261,,2.08799e-11,0.00258187,0.00306261,
linear interp; CPU Sparse Matrix   ,224,14.63,2.61493e+07,38.2419,8, 0.0030826,,2.04201e-11,0.000967002,0.0030826,
linear interp; CPU Sparse Matrix   ,228,15.068,2.78804e+07,35.8675,8, 0.00501433,,1.99798e-11,0.00435516,0.00501433,
linear interp; CPU Sparse Matrix   ,232,16.038,2.46895e+07,40.5031,8, 0.00224058,,1.95578e-11,0.00224058,0.000887936,
linear interp; CPU Sparse Matrix   ,236,16.884,2.76522e+07,36.1635,8, 0.00334922,,1.9153e-11,0.000868966,0.00334922,
linear interp; CPU Sparse Matrix   ,240,17.694,3.54777e+07,28.1867,8, 0.00138997,,1.87643e-11,0.00138997,0.000881204,
linear interp; CPU Sparse Matrix   ,244,18.201,3.40246e+07,29.3905,8, 0.00264374,,1.83923e-11,0.00215763,0.00264374,
linear interp; CPU Sparse Matrix   ,248,19.132,3.28507e+07,30.4408,8, 0.00225868,,1.80355e-11,0.00225868,0.0019007,
linear interp; CPU Sparse Matrix   ,252,20,3.61284e+07,27.679,8, 0.00304877,,1.7692e-11,0.0013627,0.00304877,
linear interp; CPU Sparse Matrix   ,256,20.831,3.97004e+07,25.1887,8, 0.00562921,,1.73611e-11,0.0041581,0.00562921,
linear interp; GPU Sparse Matrix   ,8,0.341,91388,10942.4,8, 0.506719,,7.84917e-06,0.41055,0.506719,
linear interp; GPU Sparse Matrix   ,12,0.005,92270,10837.8,8, 0.317403,,1.28435e-07,0.257043,0.317403,
linear interp; GPU Sparse Matrix   ,16,0.013,110778,9027.06,8, 0.152099,,1.64805e-08,0.152099,0.143808,
linear interp; GPU Sparse Matrix   ,20,0.023,119926,8338.48,8, 0.176345,,4.81405e-09,0.110127,0.176345,
linear interp; GPU Sparse Matrix   ,24,0.039,124526,8030.45,8, 0.151464,,2.11309e-09,0.133014,0.151464,
linear interp; GPU Sparse Matrix   ,28,0.058,136889,7305.19,8, 0.068386,,1.1673e-09,0.068386,0.0631937,
linear interp; GPU Sparse Matrix   ,32,0.079,139299,7178.8,8, 0.0737305,,7.43312e-10,0.0423078,0.0737305,
linear interp; GPU Sparse Matrix   ,36,0.153,185486,5391.24,8, 0.0567431,,5.19946e-10,0.0341307,0.0567431,
linear interp; GPU Sparse Matrix   ,40,0.154,184004,5434.66,8, 0.0565384,,3.88288e-10,0.0352951,0.0565384,
linear interp; GPU Sparse Matrix   ,44,0.244,193888,5157.62,8, 0.0354157,,3.04067e-10,0.0354157,0.0232835,
linear interp; GPU Sparse Matrix   ,48,0.318,221946,4505.6,8, 0.043866,,2.46752e-10,0.0255283,0.043866,
linear interp; GPU Sparse Matrix   ,52,0.414,226305,4418.82,8, 0.0635495,,2.05826e-10,0.0494188,0.0635495,
linear interp; GPU Sparse Matrix   ,56,0.509,273526,3655.96,8, 0.0295696,,1.7546e-10,0.0295696,0.0210114,
linear interp; GPU Sparse Matrix   ,60,0.598,301450,3317.3,8, 0.0221658,,1.52218e-10,0.0145252,0.0221658,
linear interp; GPU Sparse Matrix   ,64,0.694,325421,3072.94,8, 0.0264961,,1.33965e-10,0.0092475,0.0264961,
linear interp; GPU Sparse Matrix   ,68,0.806,351208,2847.32,8, 0.0318402,,1.19318e-10,0.0144131,0.0318402,
linear interp; GPU Sparse Matrix   ,72,0.99,383057,2610.58,8, 0.016859,,1.07348e-10,0.016859,0.00887309,
linear interp; GPU Sparse Matrix   ,76,1.126,417125,2397.36,8, 0.0197906,,9.74106e-11,0.0133945,0.0197906,
linear interp; GPU Sparse Matrix   ,80,1.327,454434,2200.54,8, 0.00856504,,8.90489e-11,0.00842362,0.00856504,
linear interp; GPU Sparse Matrix   ,84,1.451,485860,2058.21,8, 0.0168015,,8.1929e-11,0.0168015,0.0151992,
linear interp; GPU Sparse Matrix   ,88,1.698,530614,1884.61,8, 0.00903636,,7.5803e-11,0.00872706,0.00903636,
linear interp; GPU Sparse Matrix   ,92,1.915,584638,1710.46,8, 0.01534,,7.04832e-11,0.00528737,0.01534,
linear interp; GPU Sparse Matrix   ,96,2.126,633837,1577.69,8, 0.0244551,,6.58255e-11,0.00724285,0.0244551,
linear interp; GPU Sparse Matrix   ,100,2.373,689916,1449.45,8, 0.00925473,,6.17173e-11,0.00925473,0.00600913,
linear interp; GPU Sparse Matrix   ,104,2.721,755119,1324.29,8, 0.0105734,,5.80697e-11,0.00852137,0.0105734,
linear interp; GPU Sparse Matrix   ,108,3.068,835336,1197.12,8, 0.00931333,,5.48114e-11,0.00429922,0.00931333,
linear interp; GPU Sparse Matrix   ,112,3.437,885398,1129.44,8, 0.0134123,,5.18851e-11,0.0125465,0.0134123,
linear interp; GPU Sparse Matrix   ,116,3.877,980554,1019.83,8, 0.00648231,,4.92438e-11,0.00648231,0.00336207,
linear interp; GPU Sparse Matrix   ,120,4.163,1.05849e+06,944.74,8, 0.00985282,,4.68488e-11,0.00300264,0.00985282,
linear interp; GPU Sparse Matrix   ,124,4.626,1.13563e+06,880.566,8, 0.00427837,,4.46681e-11,0.00427837,0.00398877,
linear interp; GPU Sparse Matrix   ,128,4.955,1.23762e+06,808.002,8, 0.00645508,,4.26747e-11,0.00603251,0.00645508,
linear interp; GPU Sparse Matrix   ,132,5.322,1.39038e+06,719.229,8, 0.00611959,,4.08462e-11,0.00611959,0.00558091,
linear interp; GPU Sparse Matrix   ,136,6.246,1.75677e+06,569.226,8, 0.00801312,,3.91632e-11,0.00342448,0.00801312,
linear interp; GPU Sparse Matrix   ,140,6.314,1.92613e+06,519.175,8, 0.0128143,,3.76095e-11,0.00995256,0.0128143,
linear interp; GPU Sparse Matrix   ,144,7.359,1.98491e+06,503.8,8, 0.00548616,,3.61797e-11,0.00548616,0.00229812,
linear interp; GPU Sparse Matrix   ,148,7.976,2.07168e+06,482.7,8, 0.00647535,,3.4856e-11,0.00244294,0.00647535,
linear interp; GPU Sparse Matrix   ,152,8.194,2.26854e+06,440.811,8, 0.00446689,,3.36228e-11,0.00249625,0.00446689,
linear interp; GPU Sparse Matrix   ,156,8.77,2.38442e+06,419.388,8, 0.00721904,,3.24715e-11,0.00405571,0.00721904,
linear interp; GPU Sparse Matrix   ,160,10.068,2.37155e+06,421.665,8, 0.00452152,,3.13942e-11,0.00452152,0.00260875,
linear interp; GPU Sparse Matrix   ,164,10.753,2.563e+06,390.168,8, 0.0060847,,3.03842e-11,0.00327205,0.0060847,
linear interp; GPU Sparse Matrix   ,168,11.872,2.68757e+06,372.084,8, 0.00494187,,2.94356e-11,0.00494187,0.00487418,
linear interp; GPU Sparse Matrix   ,172,12.311,3.05767e+06,327.047,8, 0.0049177,,2.85429e-11,0.0049177,0.00327857,
linear interp; GPU Sparse Matrix   ,176,13.436,3.25253e+06,307.453,8, 0.00398931,,2.77014e-11,0.0022024,0.00398931,
linear interp; GPU Sparse Matrix   ,180,14.701,3.87364e+06,258.155,8, 0.00476298,,2.6907e-11,0.00145351,0.00476298,
linear interp; GPU Sparse Matrix   ,184,14.614,3.86539e+06,258.706,8, 0.00768401,,2.61559e-11,0.00290213,0.00768401,
linear interp; GPU Sparse Matrix   ,188,15.887,4.31372e+06,231.818,8, 0.0035341,,2.54446e-11,0.0035341,0.00122845,
linear interp; GPU Sparse Matrix   ,192,16.774,4.16138e+06,240.305,8, 0.00449007,,2.47702e-11,0.00297048,0.00449007,
linear interp; GPU Sparse Matrix   ,196,17.616,4.62043e+06,216.43,8, 0.00206169,,2.41299e-11,0.00143359,0.00206169,
linear interp; GPU Sparse Matrix   ,200,18.679,4.69142e+06,213.155,8, 0.0046037,,2.35212e-11,0.0046037,0.00425237,
linear interp; GPU Sparse Matrix   ,204,20.815,4.82684e+06,207.175,8, 0.00220195,,2.29419e-11,0.00220195,0.00220056,
linear interp; GPU Sparse Matrix   ,208,22.419,5.6749e+06,176.214,8, 0.00426984,,2.23899e-11,0.000898527,0.00426984,
linear interp; GPU Sparse Matrix   ,212,22.506,5.57203e+06,179.468,8, 0.00809907,,2.18633e-11,0.00199639,0.00809907,
linear interp; GPU Sparse Matrix   ,216,25.681,5.9877e+06,167.009,8, 0.00273421,,2.13605e-11,0.00273421,0.00179701,
linear interp; GPU Sparse Matrix   ,220,27.314,6.18748e+06,161.617,8, 0.00306261,,2.08799e-11,0.00258187,0.00306261,
linear interp; GPU Sparse Matrix   ,224,28.913,7.08687e+06,141.106,8, 0.0030826,,2.04201e-11,0.000967002,0.0030826,
linear interp; GPU Sparse Matrix   ,228,30.73,7.47779e+06,133.729,8, 0.00501433,,1.99798e-11,0.00435516,0.00501433,
linear interp; GPU Sparse Matrix   ,232,31.522,7.69693e+06,129.922,8, 0.00224058,,1.95578e-11,0.00224058,0.000887936,
linear interp; GPU Sparse Matrix   ,236,34.649,8.98703e+06,111.271,8, 0.00334922,,1.9153e-11,0.000868966,0.00334922,
linear interp; GPU Sparse Matrix   ,240,33.169,7.91282e+06,126.377,8, 0.00138997,,1.87643e-11,0.00138997,0.000881204,
linear interp; GPU Sparse Matrix   ,244,34.64,8.48361e+06,117.874,8, 0.00264374,,1.83923e-11,0.00215763,0.00264374,
linear interp; GPU Sparse Matrix   ,248,41.086,9.17269e+06,109.019,8, 0.00225868,,1.80355e-11,0.00225868,0.0019007,
linear interp; GPU Sparse Matrix   ,252,40.238,9.42104e+06,106.145,8, 0.00304877,,1.7692e-11,0.0013627,0.00304877,
linear interp; GPU Sparse Matrix   ,256,41.645,9.08531e+06,110.068,8, 0.00562921,,1.73611e-11,0.0041581,0.00562921,
bicubic interp; trapezoid rule; CPU,8,0,1.33167e+07,75.0934,8, 0.230536,,0,0.230536,0.229083,
bicubic interp; trapezoid rule; CPU,12,0,2.87034e+07,34.839,8, 0.0611472,,0,0.0363897,0.0611472,
bicubic interp; trapezoid rule; CPU,16,0,4.99878e+07,20.0049,8, 0.0180164,,0,0.00745225,0.0180164,
bicubic interp; trapezoid rule; CPU,20,0,7.21545e+07,13.8592,8, 0.00273237,,0,0.00256307,0.00273237,
bicubic interp; trapezoid rule; CPU,24,0,1.05031e+08,9.52103,8, 0.00161214,,0,0.00118285,0.00161214,
bicubic interp; trapezoid rule; CPU,28,0,1.33134e+08,7.51126,8, 0.00115462,,0,0.000783608,0.00115462,
bicubic interp; trapezoid rule; CPU,32,0,1.75726e+08,5.69066,8, 0.000446668,,0,0.000446668,0.000412214,
bicubic interp; trapezoid rule; CPU,36,0,2.18422e+08,4.57829,8, 0.000230352,,0,0.000230352,0.00014424,
bicubic interp; trapezoid rule; CPU,40,0,2.68175e+08,3.72891,8, 0.000149119,,0,0.000106187,0.000149119,
bicubic interp; trapezoid rule; CPU,44,0,3.13492e+08,3.18988,8, 0.000108675,,0,4.54084e-05,0.000108675,
bicubic interp; trapezoid rule; CPU,48,0,3.72621e+08,2.68369,8, 3.73262e-05,,0,3.37497e-05,3.73262e-05,
bicubic interp; trapezoid rule; CPU,52,0,4.48164e+08,2.23132,8, 2.89503e-05,,0,2.45371e-05,2.89503e-05,
bicubic interp; trapezoid rule; CPU,56,0,4.93083e+08,2.02806,8, 3.26762e-05,,0,2.29677e-05,3.26762e-05,
bicubic interp; trapezoid rule; CPU,60,0,4.51579e+08,2.21445,8, 2.07342e-05,,0,1.84566e-05,2.07342e-05,
bicubic interp; trapezoid rule; CPU,64,0,5.98912e+08,1.6697,8, 1.36998e-05,,0,1.36998e-05,9.49424e-06,
bicubic interp; trapezoid rule; CPU,68,0,6.81743e+08,1.46683,8, 1.03179e-05,,0,8.84883e-06,1.03179e-05,
bicubic interp; trapezoid rule; CPU,72,0.003,7.46785e+08,1.33907,8, 1.033e-05,,0,5.02989e-06,1.033e-05,
bicubic interp; trapezoid rule; CPU,76,0,7.74897e+08,1.29049,8, 5.56301e-06,,0,4.09416e-06,5.56301e-06,
bicubic interp; trapezoid rule; CPU,80,0,8.16172e+08,1.22523,8, 3.69666e-06,,0,3.4334e-06,3.69666e-06,
bicubic interp; trapezoid rule; CPU,84,0,6.93352e+08,1.44227,8, 4.61288e-06,,0,3.28237e-06,4.61288e-06,
bicubic interp; trapezoid rule; CPU,88,0,7.82397e+08,1.27812,8, 3.8556e-06,,0,3.22977e-06,3.8556e-06,
bicubic interp; trapezoid rule; CPU,92,0,9.84883e+08,1.01535,8, 2.62826e-06,,0,2.62826e-06,2.37546e-06,
bicubic interp; trapezoid rule; CPU,96,0,1.11771e+09,0.894688,8, 1.96815e-06,,0,1.96815e-06,1.85754e-06,
bicubic interp; trapezoid rule; CPU,100,0,1.40595e+09,0.711261,8, 2.66922e-06,,0,1.67061e-06,2.66922e-06,
bicubic interp; trapezoid rule; CPU,104,0.004,1.54589e+09,0.646875,8, 2.22282e-06,,0,1.58356e-06,2.22282e-06,
bicubic interp; trapezoid rule; CPU,108,0,1.65555e+09,0.604027,8, 1.26621e-06,,0,1.26621e-06,1.2378e-06,
bicubic interp; trapezoid rule; CPU,112,0,1.63277e+09,0.612455,8, 1.18204e-06,,0,8.55603e-07,1.18204e-06,
bicubic interp; trapezoid rule; CPU,116,0,1.63886e+09,0.610179,8, 1.22302e-06,,0,9.19147e-07,1.22302e-06,
bicubic interp; trapezoid rule; CPU,120,0.004,1.5676e+09,0.637917,8, 8.69962e-07,,0,8.69962e-07,7.21832e-07,
bicubic interp; trapezoid rule; CPU,124,0,1.58958e+09,0.629099,8, 7.43036e-07,,0,7.43036e-07,6.37154e-07,
bicubic interp; trapezoid rule; CPU,128,0,1.59809e+09,0.625746,8, 7.6229e-07,,0,5.58649e-07,7.6229e-07,
bicubic interp; trapezoid rule; CPU,132,0,1.63429e+09,0.611888,8, 6.44996e-07,,0,3.90422e-07,6.44996e-07,
bicubic interp; trapezoid rule; CPU,136,0,1.89974e+09,0.526388,8, 6.0632e-07,,0,5.11638e-07,6.0632e-07,
bicubic interp; trapezoid rule; CPU,140,0.001,1.66537e+09,0.600467,8, 4.86133e-07,,0,4.30767e-07,4.86133e-07,
bicubic interp; trapezoid rule; CPU,144,0.001,1.81833e+09,0.549955,8, 4.73509e-07,,0,3.86986e-07,4.73509e-07,
bicubic interp; trapezoid rule; CPU,148,0.001,2.01945e+09,0.495185,8, 3.99644e-07,,0,3.4567e-07,3.99644e-07,
bicubic interp; trapezoid rule; CPU,152,0.001,1.88439e+09,0.530675,8, 3.39987e-07,,0,2.95928e-07,3.39987e-07,
bicubic interp; trapezoid rule; CPU,156,0.016,1.98454e+09,0.503895,8, 2.90939e-07,,0,2.36319e-07,2.90939e-07,
bicubic interp; trapezoid rule; CPU,160,0.001,1.94846e+09,0.513227,8, 3.45944e-07,,0,3.23909e-07,3.45944e-07,
bicubic interp; trapezoid rule; CPU,164,0.001,2.254e+09,0.443656,8, 2.40538e-07,,0,2.40538e-07,1.94857e-07,
bicubic interp; trapezoid rule; CPU,168,0.001,2.08465e+09,0.479696,8, 1.68564e-07,,0,1.5195e-07,1.68564e-07,
bicubic interp; trapezoid rule; CPU,172,0.001,2.12826e+09,0.469868,8, 2.30844e-07,,0,1.69773e-07,2.30844e-07,
bicubic interp; trapezoid rule; CPU,176,0.001,1.98887e+09,0.502797,8, 1.84096e-07,,0,1.57256e-07,1.84096e-07,
bicubic interp; trapezoid rule; CPU,180,0.001,2.06511e+09,0.484236,8, 1.44586e-07,,0,1.44586e-07,1.23038e-07,
bicubic interp; trapezoid rule; CPU,184,0.001,2.32963e+09,0.429252,8, 1.62291e-07,,0,1.43229e-07,1.62291e-07,
bicubic interp; trapezoid rule; CPU,188,0.001,2.69497e+09,0.371061,8, 1.50471e-07,,0,1.38062e-07,1.50471e-07,
bicubic interp; trapezoid rule; CPU,192,0.001,2.53364e+09,0.394689,8, 1.34336e-07,,0,1.08202e-07,1.34336e-07,
bicubic interp; trapezoid rule; CPU,196,0.002,3.05358e+09,0.327485,8, 1.55872e-07,,0,1.10276e-07,1.55872e-07,
bicubic interp; trapezoid rule; CPU,200,0.002,2.41489e+09,0.414097,8, 1.18791e-07,,0,9.77354e-08,1.18791e-07,
bicubic interp; trapezoid rule; CPU,204,0.002,3.01281e+09,0.331917,8, 1.11159e-07,,0,9.0405e-08,1.11159e-07,
bicubic interp; trapezoid rule; CPU,208,0.002,2.81374e+09,0.355399,8, 1.13109e-07,,0,1.13109e-07,1.00928e-07,
bicubic interp; trapezoid rule; CPU,212,0.002,2.86717e+09,0.348776,8, 7.59335e-08,,0,7.53855e-08,7.59335e-08,
bicubic interp; trapezoid rule; CPU,216,0.016,2.40884e+09,0.415138,8, 8.81683e-08,,0,6.96306e-08,8.81683e-08,
bicubic interp; trapezoid rule; CPU,220,0.002,2.74646e+09,0.364105,8, 8.34864e-08,,0,7.05446e-08,8.34864e-08,
bicubic interp; trapezoid rule; CPU,224,0.002,3.00929e+09,0.332305,8, 5.53758e-08,,0,5.53758e-08,5.40986e-08,
bicubic interp; trapezoid rule; CPU,228,0.002,2.63736e+09,0.379167,8, 6.08841e-08,,0,5.62737e-08,6.08841e-08,
bicubic interp; trapezoid rule; CPU,232,0.002,2.96653e+09,0.337094,8, 7.20795e-08,,0,6.29731e-08,7.20795e-08,
bicubic interp; trapezoid rule; CPU,236,0.003,2.82099e+09,0.354485,8, 6.28948e-08,,0,5.83866e-08,6.28948e-08,
bicubic interp; trapezoid rule; CPU,240,0.002,3.09139e+09,0.323479,8, 5.98362e-08,,0,5.98362e-08,4.51383e-08,
bicubic interp; trapezoid rule; CPU,244,0.003,3.05167e+09,0.32769,8, 7.30737e-08,,0,6.07382e-08,7.30737e-08,
bicubic interp; trapezoid rule; CPU,248,0.003,3.07661e+09,0.325033,8, 5.70669e-08,,0,3.86927e-08,5.70669e-08,
bicubic interp; trapezoid rule; CPU,252,0.036,3.59925e+09,0.277836,8, 3.92106e-08,,0,2.95916e-08,3.92106e-08,
bicubic interp; trapezoid rule; CPU,256,0.003,3.08626e+09,0.324017,8, 4.44637e-08,,0,3.72615e-08,4.44637e-08,
bicubic interp; CPU Sparse Matrix  ,8,0.003,83010,12046.7,8, 0.230536,,2.03617e-13,0.230536,0.229083,
bicubic interp; CPU Sparse Matrix  ,12,0.004,126004,7936.26,8, 0.0611472,,4.11729e-14,0.0363897,0.0611472,
bicubic interp; CPU Sparse Matrix  ,16,0.008,186073,5374.23,8, 0.0180164,,3.0354e-14,0.00745225,0.0180164,
bicubic interp; CPU Sparse Matrix  ,20,0.014,299843,3335.08,8, 0.00273237,,3.47258e-14,0.00256308,0.00273237,
bicubic interp; CPU Sparse Matrix  ,24,0.024,434709,2300.39,8, 0.00161214,,1.04605e-13,0.00118285,0.00161214,
bicubic interp; CPU Sparse Matrix  ,28,0.041,609707,1640.13,8, 0.00115462,,2.31674e-13,0.000783602,0.00115462,
bicubic interp; CPU Sparse Matrix  ,32,0.076,970131,1030.79,8, 0.000446667,,2.89624e-13,0.000446667,0.000412214,
bicubic interp; CPU Sparse Matrix  ,36,0.121,1.23111e+06,812.274,8, 0.000230351,,4.72329e-13,0.000230351,0.000144241,
bicubic interp; CPU Sparse Matrix  ,40,0.167,1.50239e+06,665.607,8, 0.00014912,,7.09954e-13,0.000106533,0.00014912,
bicubic interp; CPU Sparse Matrix  ,44,0.246,1.9552e+06,511.456,8, 0.000108676,,1.05219e-12,4.54084e-05,0.000108676,
bicubic interp; CPU Sparse Matrix  ,48,0.346,2.64531e+06,378.027,8, 3.73242e-05,,1.02051e-12,3.37512e-05,3.73242e-05,
bicubic interp; CPU Sparse Matrix  ,52,0.385,3.42109e+06,292.305,8, 2.89481e-05,,2.1209e-12,2.45368e-05,2.89481e-05,
bicubic interp; CPU Sparse Matrix  ,56,0.48,4.31568e+06,231.713,8, 3.26984e-05,,2.76066e-12,2.29897e-05,3.26984e-05,
bicubic interp; CPU Sparse Matrix  ,60,0.658,5.84682e+06,171.033,8, 2.07342e-05,,3.68846e-12,1.84582e-05,2.07342e-05,
bicubic interp; CPU Sparse Matrix  ,64,0.778,6.93432e+06,144.21,8, 1.36993e-05,,3.91111e-12,1.36993e-05,9.49497e-06,
bicubic interp; CPU Sparse Matrix  ,68,0.91,8.36723e+06,119.514,8, 1.02246e-05,,4.6709e-12,8.84907e-06,1.02246e-05,
bicubic interp; CPU Sparse Matrix  ,72,1.182,1.03922e+07,96.2264,8, 1.03278e-05,,7.23945e-12,5.05432e-06,1.03278e-05,
bicubic interp; CPU Sparse Matrix  ,76,1.412,1.18848e+07,84.1412,8, 5.55064e-06,,8.78627e-12,4.09414e-06,5.55064e-06,
bicubic interp; CPU Sparse Matrix  ,80,1.697,1.41085e+07,70.8793,8, 3.70583e-06,,8.66819e-12,3.43319e-06,3.70583e-06,
bicubic interp; CPU Sparse Matrix  ,84,1.802,1.53973e+07,64.9463,8, 4.61128e-06,,1.11549e-11,3.28383e-06,4.61128e-06,
bicubic interp; CPU Sparse Matrix  ,88,2.106,1.79199e+07,55.804,8, 3.90079e-06,,1.15926e-11,3.14968e-06,3.90079e-06,
bicubic interp; CPU Sparse Matrix  ,92,2.517,2.00304e+07,49.924,8, 2.62713e-06,,2.0072e-11,2.62713e-06,1.93006e-06,
bicubic interp; CPU Sparse Matrix  ,96,2.891,2.20782e+07,45.2935,8, 1.96825e-06,,1.66776e-11,1.96825e-06,1.85911e-06,
bicubic interp; CPU Sparse Matrix  ,100,3.255,2.53429e+07,39.4588,8, 2.28359e-06,,2.9908e-11,1.31318e-06,2.28359e-06,
bicubic interp; CPU Sparse Matrix  ,104,3.675,2.86548e+07,34.8981,8, 1.62058e-06,,2.81587e-11,1.06371e-06,1.62058e-06,
bicubic interp; CPU Sparse Matrix  ,108,4.189,3.25294e+07,30.7414,8, 9.89918e-07,,4.20412e-11,9.34591e-07,9.89918e-07,
bicubic interp; CPU Sparse Matrix  ,112,4.814,2.3282e+07,42.9517,8, 1.14999e-06,,3.44537e-11,8.5532e-07,1.14999e-06,
bicubic interp; CPU Sparse Matrix  ,116,5.556,3.80996e+07,26.247,8, 1.20299e-06,,4.34849e-11,8.98726e-07,1.20299e-06,
bicubic interp; CPU Sparse Matrix  ,120,6.153,4.33442e+07,23.0711,8, 8.30238e-07,,6.21246e-11,8.30238e-07,7.19849e-07,
bicubic interp; CPU Sparse Matrix  ,124,6.648,4.83114e+07,20.6991,8, 6.76576e-07,,6.26659e-11,6.76576e-07,5.7968e-07,
bicubic interp; CPU Sparse Matrix  ,128,7.766,4.74559e+07,21.0722,8, 7.43184e-07,,8.18032e-11,4.97718e-07,7.43184e-07,
bicubic interp; CPU Sparse Matrix  ,132,8.221,5.74143e+07,17.4173,8, 6.41217e-07,,5.92422e-11,3.91992e-07,6.41217e-07,
bicubic interp; CPU Sparse Matrix  ,136,8.976,6.18058e+07,16.1797,8, 3.79055e-07,,1.05481e-10,3.54087e-07,3.79055e-07,
bicubic interp; CPU Sparse Matrix  ,140,9.465,6.73958e+07,14.8377,8, 3.83738e-07,,1.0361e-10,3.18163e-07,3.83738e-07,
bicubic interp; CPU Sparse Matrix  ,144,10.998,7.07929e+07,14.1257,8, 4.75209e-07,,1.48251e-10,3.38963e-07,4.75209e-07,
bicubic interp; CPU Sparse Matrix  ,148,12.046,7.84787e+07,12.7423,8, 3.43802e-07,,1.47054e-10,3.35203e-07,3.43802e-07,
bicubic interp; CPU Sparse Matrix  ,152,13.091,8.55614e+07,11.6875,8, 2.93253e-07,,1.01365e-10,2.93253e-07,2.40874e-07,
bicubic interp; CPU Sparse Matrix  ,156,14.615,8.65238e+07,11.5575,8, 2.90873e-07,,1.57191e-10,2.30531e-07,2.90873e-07,
bicubic interp; CPU Sparse Matrix  ,160,14.881,1.0472e+08,9.54924,8, 2.98636e-07,,1.61833e-10,1.76938e-07,2.98636e-07,
bicubic interp; CPU Sparse Matrix  ,164,16.235,1.05754e+08,9.45592,8, 1.8832e-07,,2.38253e-10,1.62726e-07,1.8832e-07,
bicubic interp; CPU Sparse Matrix  ,168,17.795,1.14535e+08,8.73096,8, 1.6691e-07,,1.6469e-10,1.49535e-07,1.6691e-07,
bicubic interp; CPU Sparse Matrix  ,172,18.696,1.36102e+08,7.34744,8, 2.15844e-07,,2.01245e-10,1.53235e-07,2.15844e-07,
bicubic interp; CPU Sparse Matrix  ,176,20.104,1.30407e+08,7.66828,8, 1.84285e-07,,2.38841e-10,1.58031e-07,1.84285e-07,
bicubic interp; CPU Sparse Matrix  ,180,22.837,1.55468e+08,6.43221,8, 1.46162e-07,,2.52937e-10,1.46162e-07,1.20624e-07,
bicubic interp; CPU Sparse Matrix  ,184,23.842,1.41459e+08,7.0692,8, 1.28826e-07,,2.07538e-10,1.21299e-07,1.28826e-07,
bicubic interp; CPU Sparse Matrix  ,188,25.726,1.55441e+08,6.43332,8, 1.54296e-07,,3.52411e-10,9.34485e-08,1.54296e-07,
bicubic interp; CPU Sparse Matrix  ,192,27.63,1.62833e+08,6.14128,8, 1.12329e-07,,3.60186e-10,8.497e-08,1.12329e-07,
bicubic interp; CPU Sparse Matrix  ,196,29.021,1.80307e+08,5.54611,8, 8.61661e-08,,4.65859e-10,7.92237e-08,8.61661e-08,
bicubic interp; CPU Sparse Matrix  ,200,30.346,1.63266e+08,6.12497,8, 1.06379e-07,,3.7643e-10,7.80973e-08,1.06379e-07,
bicubic interp; CPU Sparse Matrix  ,204,32.462,2.12827e+08,4.69866,8, 1.06283e-07,,5.1759e-10,8.32527e-08,1.06283e-07,
bicubic interp; CPU Sparse Matrix  ,208,34.673,2.04043e+08,4.90092,8, 8.02454e-08,,5.70503e-10,8.02454e-08,6.98286e-08,
bicubic interp; CPU Sparse Matrix  ,212,35.949,2.16034e+08,4.6289,8, 6.97133e-08,,5.31018e-10,6.97133e-08,6.58496e-08,
bicubic interp; CPU Sparse Matrix  ,216,37.723,2.3885e+08,4.18672,8, 8.44464e-08,,5.77649e-10,5.59508e-08,8.44464e-08,
bicubic interp; CPU Sparse Matrix  ,220,39.801,2.618e+08,3.81972,8, 7.10771e-08,,5.33798e-10,4.87132e-08,7.10771e-08,
bicubic interp; CPU Sparse Matrix  ,224,45.374,2.85931e+08,3.49735,8, 4.98939e-08,,7.07159e-10,4.58163e-08,4.98939e-08,
bicubic interp; CPU Sparse Matrix  ,228,47.103,3.01312e+08,3.31882,8, 5.58436e-08,,8.02918e-10,4.34291e-08,5.58436e-08,
bicubic interp; CPU Sparse Matrix  ,232,49.458,3.16432e+08,3.16023,8, 6.39852e-08,,7.64723e-10,4.74366e-08,6.39852e-08,
bicubic interp; CPU Sparse Matrix  ,236,52.262,3.2469e+08,3.07986,8, 4.74619e-08,,7.23717e-10,4.74619e-08,4.68365e-08,
bicubic interp; CPU Sparse Matrix  ,240,54.844,3.4339e+08,2.91214,8, 4.28938e-08,,8.20084e-10,4.28938e-08,3.82595e-08,
bicubic interp; CPU Sparse Matrix  ,244,56.766,3.52706e+08,2.83522,8, 4.79944e-08,,1.08264e-09,3.56736e-08,4.79944e-08,
bicubic interp; CPU Sparse Matrix  ,248,60.051,3.57883e+08,2.79421,8, 4.65089e-08,,9.611e-10,2.99344e-08,4.65089e-08,
bicubic interp; CPU Sparse Matrix  ,252,62.631,3.71836e+08,2.68936,8, 3.18006e-08,,8.46165e-10,2.8315e-08,3.18006e-08,
bicubic interp; CPU Sparse Matrix  ,256,64.561,4.42615e+08,2.2593,8, 3.13165e-08,,1.02027e-09,2.6715e-08,3.13165e-08,
bicubic interp; GPU Sparse Matrix  ,8,0.016,132001,7575.7,8, 0.230536,,2.49089e-13,0.230536,0.229083,
bicubic interp; GPU Sparse Matrix  ,12,0.026,237345,4213.28,8, 0.0611472,,5.71766e-14,0.0363897,0.0611472,
bicubic interp; GPU Sparse Matrix  ,16,0.04,369602,2705.61,8, 0.0180164,,3.15084e-14,0.00745225,0.0180164,
bicubic interp; GPU Sparse Matrix  ,20,0.083,685872,1458,8, 0.00273237,,2.96486e-14,0.00256308,0.00273237,
bicubic interp; GPU Sparse Matrix  ,24,0.146,763257,1310.17,8, 0.00161214,,1.04313e-13,0.00118285,0.00161214,
bicubic interp; GPU Sparse Matrix  ,28,0.258,837042,1194.68,8, 0.00115462,,2.31392e-13,0.000783602,0.00115462,
bicubic interp; GPU Sparse Matrix  ,32,0.435,1.03867e+06,962.773,8, 0.000446667,,2.90184e-13,0.000446667,0.000412214,
bicubic interp; GPU Sparse Matrix  ,36,0.607,1.31856e+06,758.403,8, 0.000230351,,4.71497e-13,0.000230351,0.000144241,
bicubic interp; GPU Sparse Matrix  ,40,0.831,1.54937e+06,645.425,8, 0.00014912,,7.09518e-13,0.000106533,0.00014912,
bicubic interp; GPU Sparse Matrix  ,44,1.134,1.80166e+06,555.043,8, 0.000108676,,1.05227e-12,4.54084e-05,0.000108676,
bicubic interp; GPU Sparse Matrix  ,48,1.425,2.19746e+06,455.071,8, 3.73242e-05,,1.02032e-12,3.37512e-05,3.73242e-05,
bicubic interp; GPU Sparse Matrix  ,52,1.842,3.3914e+06,294.864,8, 2.89481e-05,,2.12113e-12,2.45368e-05,2.89481e-05,
bicubic interp; GPU Sparse Matrix  ,56,2.399,3.33199e+06,300.121,8, 3.26984e-05,,2.76042e-12,2.29897e-05,3.26984e-05,
bicubic interp; GPU Sparse Matrix  ,60,2.849,3.35658e+06,297.922,8, 2.07342e-05,,3.68811e-12,1.84582e-05,2.07342e-05,
bicubic interp; GPU Sparse Matrix  ,64,3.573,3.82475e+06,261.455,8, 1.36993e-05,,3.91051e-12,1.36993e-05,9.49497e-06,
bicubic interp; GPU Sparse Matrix  ,68,4.076,4.17477e+06,239.534,8, 1.02246e-05,,4.67048e-12,8.84907e-06,1.02246e-05,
bicubic interp; GPU Sparse Matrix  ,72,5.059,4.78822e+06,208.846,8, 1.03278e-05,,7.2387e-12,5.05432e-06,1.03278e-05,
bicubic interp; GPU Sparse Matrix  ,76,6.094,5.32028e+06,187.96,8, 5.55064e-06,,8.78608e-12,4.09414e-06,5.55064e-06,
bicubic interp; GPU Sparse Matrix  ,80,7.45,6.67933e+06,149.716,8, 3.70583e-06,,8.66856e-12,3.43319e-06,3.70583e-06,
bicubic interp; GPU Sparse Matrix  ,84,9.023,6.93985e+06,144.095,8, 4.61128e-06,,1.11545e-11,3.28383e-06,4.61128e-06,
bicubic interp; GPU Sparse Matrix  ,88,9.838,7.09235e+06,140.997,8, 3.90079e-06,,1.15931e-11,3.14968e-06,3.90079e-06,
bicubic interp; GPU Sparse Matrix  ,92,10.735,7.8283e+06,127.742,8, 2.62713e-06,,2.00714e-11,2.62713e-06,1.93006e-06,
bicubic interp; GPU Sparse Matrix  ,96,12.506,8.73755e+06,114.449,8, 1.96825e-06,,1.66777e-11,1.96825e-06,1.85911e-06,
bicubic interp; GPU Sparse Matrix  ,100,13.561,9.44696e+06,105.854,8, 2.28359e-06,,2.9908e-11,1.31318e-06,2.28359e-06,
bicubic interp; GPU Sparse Matrix  ,104,15.318,1.22855e+07,81.3971,8, 1.62058e-06,,2.81585e-11,1.06371e-06,1.62058e-06,
bicubic interp; GPU Sparse Matrix  ,108,18.513,1.22108e+07,81.8945,8, 9.89918e-07,,4.20417e-11,9.34591e-07,9.89918e-07,
bicubic interp; GPU Sparse Matrix  ,112,19.433,1.25743e+07,79.5275,8, 1.14999e-06,,3.4454e-11,8.5532e-07,1.14999e-06,
bicubic interp; GPU Sparse Matrix  ,116,23.32,1.35842e+07,73.6149,8, 1.20299e-06,,4.34849e-11,8.98726e-07,1.20299e-06,
bicubic interp; GPU Sparse Matrix  ,120,25.427,1.84172e+07,54.297,8, 8.30238e-07,,6.21254e-11,8.30238e-07,7.19849e-07,
bicubic interp; GPU Sparse Matrix  ,124,33.933,1.65533e+07,60.4109,8, 6.76576e-07,,6.26658e-11,6.76576e-07,5.7968e-07,
bicubic interp; GPU Sparse Matrix  ,128,31.599,2.04199e+07,48.9719,8, 7.43184e-07,,8.18034e-11,4.97718e-07,7.43184e-07,
bicubic interp; GPU Sparse Matrix  ,132,35.603,1.99132e+07,50.218,8, 6.41217e-07,,5.92426e-11,3.91992e-07,6.41217e-07,
bicubic interp; GPU Sparse Matrix  ,136,45.862,2.11309e+07,47.324,8, 3.79055e-07,,1.05481e-10,3.54087e-07,3.79055e-07,
bicubic interp; GPU Sparse Matrix  ,140,47.903,2.99275e+07,33.4141,8, 3.83738e-07,,1.0361e-10,3.18163e-07,3.83738e-07,
bicubic interp; GPU Sparse Matrix  ,144,60.261,2.28545e+07,43.7551,8, 4.75209e-07,,1.48251e-10,3.38963e-07,4.75209e-07,
bicubic interp; GPU Sparse Matrix  ,148,61.942,2.47259e+07,40.4434,8, 3.43802e-07,,1.47053e-10,3.35203e-07,3.43802e-07,
bicubic interp; GPU Sparse Matrix  ,152,58.332,2.65633e+07,37.646,8, 2.93253e-07,,1.01366e-10,2.93253e-07,2.40874e-07,
bicubic interp; GPU Sparse Matrix  ,156,56.962,2.80704e+07,35.6247,8, 2.90873e-07,,1.57191e-10,2.30531e-07,2.90873e-07,
bicubic interp; GPU Sparse Matrix  ,160,73.897,2.99797e+07,33.3559,8, 2.98636e-07,,1.61833e-10,1.76938e-07,2.98636e-07,
bicubic interp; GPU Sparse Matrix  ,164,67.341,3.19166e+07,31.3317,8, 1.8832e-07,,2.38253e-10,1.62726e-07,1.8832e-07,
bicubic interp; GPU Sparse Matrix  ,168,71.635,3.37861e+07,29.5979,8, 1.6691e-07,,1.6469e-10,1.49535e-07,1.6691e-07,
bicubic interp; GPU Sparse Matrix  ,172,76.247,3.63564e+07,27.5054,8, 2.15844e-07,,2.01245e-10,1.53235e-07,2.15844e-07,
bicubic interp; GPU Sparse Matrix  ,176,83.291,3.80851e+07,26.257,8, 1.84285e-07,,2.38842e-10,1.58031e-07,1.84285e-07,
bicubic interp; GPU Sparse Matrix  ,180,91.721,4.05203e+07,24.679,8, 1.46162e-07,,2.52937e-10,1.46162e-07,1.20624e-07,
bicubic interp; GPU Sparse Matrix  ,184,99.928,4.29698e+07,23.2722,8, 1.28826e-07,,2.07538e-10,1.21299e-07,1.28826e-07,
bicubic interp; GPU Sparse Matrix  ,188,105.082,4.54228e+07,22.0154,8, 1.54296e-07,,3.52411e-10,9.34485e-08,1.54296e-07,
bicubic interp; GPU Sparse Matrix  ,192,118.431,4.82023e+07,20.7459,8, 1.12329e-07,,3.60186e-10,8.497e-08,1.12329e-07,
bicubic interp; GPU Sparse Matrix  ,196,122.823,5.06789e+07,19.7321,8, 8.61661e-08,,4.65859e-10,7.92237e-08,8.61661e-08,
bicubic interp; GPU Sparse Matrix  ,200,130.158,5.29767e+07,18.8762,8, 1.06379e-07,,3.7643e-10,7.80973e-08,1.06379e-07,
bicubic interp; GPU Sparse Matrix  ,204,138.337,5.69879e+07,17.5476,8, 1.06283e-07,,5.17591e-10,8.32527e-08,1.06283e-07,
bicubic interp; GPU Sparse Matrix  ,208,148.472,6.3231e+07,15.815,8, 8.02454e-08,,5.70502e-10,8.02454e-08,6.98287e-08,
bicubic interp; GPU Sparse Matrix  ,212,171.981,6.25863e+07,15.9779,8, 6.97133e-08,,5.31019e-10,6.97133e-08,6.58496e-08,
bicubic interp; GPU Sparse Matrix  ,216,173.039,6.56966e+07,15.2215,8, 8.44464e-08,,5.77649e-10,5.59508e-08,8.44464e-08,
bicubic interp; GPU Sparse Matrix  ,220,183.952,6.83444e+07,14.6318,8, 7.10771e-08,,5.33798e-10,4.87132e-08,7.10771e-08,
Finished a list.
DCT+Bessel+IDCT                    ,8,0.006,2766,361533,8, 0.175428,,1.89244e-16,0.175428,0.16419,
DCT+Bessel+IDCT                    ,12,0.001,11046,90530.5,8, 0.0753525,,9.66261e-17,0.00947331,0.0753525,
DCT+Bessel+IDCT                    ,16,0.001,16222,61644.7,8, 0.145615,,1.75902e-16,0.000226491,0.145615,
DCT+Bessel+IDCT                    ,20,0.004,22141,45165.1,8, 0.212171,,1.62318e-16,1.04427e-05,0.212171,
DCT+Bessel+IDCT                    ,24,0.005,51893,19270.4,8, 0.262231,,1.77818e-16,1.97533e-05,0.262231,
DCT+Bessel+IDCT                    ,28,0.006,79219,12623.2,8, 0.302713,,3.03561e-16,2.98829e-05,0.302713,
DCT+Bessel+IDCT                    ,32,0.006,97216,10286.4,8, 0.334932,,2.2408e-16,4.04392e-05,0.334932,
DCT+Bessel+IDCT                    ,36,0.011,109262,9152.31,8, 0.360955,,2.95575e-16,5.08405e-05,0.360955,
DCT+Bessel+IDCT                    ,40,0.017,130425,7667.24,8, 0.382311,,2.93329e-16,6.0889e-05,0.382311,
DCT+Bessel+IDCT                    ,44,0.01,165917,6027.11,8, 0.400212,,4.37538e-16,7.0427e-05,0.400212,
DCT+Bessel+IDCT                    ,48,0.026,189142,5287.03,8, 0.415177,,2.90461e-16,7.9376e-05,0.415177,
DCT+Bessel+IDCT                    ,52,0.012,206536,4841.77,8, 0.428038,,2.89511e-16,8.78611e-05,0.428038,
DCT+Bessel+IDCT                    ,56,0.017,279524,3577.51,8, 0.439148,,2.88763e-16,9.5562e-05,0.439148,
DCT+Bessel+IDCT                    ,60,0.032,282454,3540.4,8, 0.448848,,2.88163e-16,0.000102836,0.448848,
DCT+Bessel+IDCT                    ,64,0.024,257613,3881.79,8, 0.457358,,4.31513e-16,0.000109582,0.457358,
DCT+Bessel+IDCT                    ,68,0.029,557674,1793.16,8, 0.464904,,4.30909e-16,0.000115883,0.464904,
DCT+Bessel+IDCT                    ,72,0.041,520813,1920.07,8, 0.471639,,4.30404e-16,0.000121762,0.471639,
DCT+Bessel+IDCT                    ,76,0.048,778989,1283.72,8, 0.477676,,5.73306e-16,0.000127233,0.477676,
DCT+Bessel+IDCT                    ,80,0.037,483192,2069.57,8, 0.483114,,2.86411e-16,0.000132356,0.483114,
DCT+Bessel+IDCT                    ,84,0.039,585075,1709.18,8, 0.488052,,4.29306e-16,0.000137148,0.488052,
DCT+Bessel+IDCT                    ,88,0.031,665412,1502.83,8, 0.49255,,4.29038e-16,0.000141642,0.49255,
DCT+Bessel+IDCT                    ,92,0.051,1.25497e+06,796.829,8, 0.496648,,4.28804e-16,0.000145857,0.496648,
DCT+Bessel+IDCT                    ,96,0.05,875257,1142.52,8, 0.50042,,2.85733e-16,0.00014983,0.50042,
DCT+Bessel+IDCT                    ,100,0.026,811624,1232.1,8, 0.503888,,4.28419e-16,0.000153554,0.503888,
DCT+Bessel+IDCT                    ,104,0.049,1.13339e+06,882.307,8, 0.507095,,2.85506e-16,0.000157076,0.507095,
DCT+Bessel+IDCT                    ,108,0.041,914751,1093.19,8, 0.510067,,4.28117e-16,0.000160398,0.510067,
DCT+Bessel+IDCT                    ,112,0.051,1.051e+06,951.473,8, 0.512826,,2.85327e-16,0.00016354,0.512826,
DCT+Bessel+IDCT                    ,116,0.073,2.08238e+06,480.22,8, 0.515398,,5.70501e-16,0.000166521,0.515398,
DCT+Bessel+IDCT                    ,120,0.033,1.22668e+06,815.211,8, 0.517799,,4.27773e-16,0.000169338,0.517799,
DCT+Bessel+IDCT                    ,124,0.083,2.59068e+06,385.998,8, 0.520045,,4.2768e-16,0.000172016,0.520045,
DCT+Bessel+IDCT                    ,128,0.062,1.57508e+06,634.89,8, 0.522153,,4.27596e-16,0.000174561,0.522153,
DCT+Bessel+IDCT                    ,132,0.065,1.75903e+06,568.496,8, 0.524132,,4.2752e-16,0.000176982,0.524132,
DCT+Bessel+IDCT                    ,136,0.099,2.42906e+06,411.681,8, 0.525997,,5.69933e-16,0.000179289,0.525997,
DCT+Bessel+IDCT                    ,140,0.069,1.80336e+06,554.522,8, 0.527755,,4.27386e-16,0.000181489,0.527755,
DCT+Bessel+IDCT                    ,144,0.071,1.79906e+06,555.846,8, 0.529414,,4.27328e-16,0.00018359,0.529414,
DCT+Bessel+IDCT                    ,148,0.097,3.71365e+06,269.277,8, 0.530986,,7.12123e-16,0.000185595,0.530986,
DCT+Bessel+IDCT                    ,152,0.112,2.71775e+06,367.951,8, 0.532474,,4.27224e-16,0.000187513,0.532474,
DCT+Bessel+IDCT                    ,156,0.083,2.0799e+06,480.794,8, 0.533886,,4.27178e-16,0.000189352,0.533886,
DCT+Bessel+IDCT                    ,160,0.086,2.03444e+06,491.536,8, 0.535228,,4.27136e-16,0.00019111,0.535228,
DCT+Bessel+IDCT                    ,164,0.067,4.83269e+06,206.924,8, 0.536504,,4.98279e-16,0.000192798,0.536504,
DCT+Bessel+IDCT                    ,168,0.048,2.25012e+06,444.42,8, 0.53772,,4.2706e-16,0.000194418,0.53772,
DCT+Bessel+IDCT                    ,172,0.076,5.67272e+06,176.282,8, 0.53888,,8.54052e-16,0.000195973,0.53888,
DCT+Bessel+IDCT                    ,176,0.06,2.68084e+06,373.017,8, 0.539987,,4.26994e-16,0.000197469,0.539987,
DCT+Bessel+IDCT                    ,180,0.068,2.59408e+06,385.493,8, 0.541044,,5.69286e-16,0.000198908,0.541044,
DCT+Bessel+IDCT                    ,184,0.074,4.41724e+06,226.386,8, 0.542056,,5.6925e-16,0.000200292,0.542056,
DCT+Bessel+IDCT                    ,188,0.079,6.87308e+06,145.495,8, 0.543025,,8.53822e-16,0.000201626,0.543025,
DCT+Bessel+IDCT                    ,192,0.057,2.88301e+06,346.86,8, 0.543953,,4.26887e-16,0.000202912,0.543953,
DCT+Bessel+IDCT                    ,196,0.057,3.58975e+06,278.571,8, 0.544844,,4.26864e-16,0.000204153,0.544844,
DCT+Bessel+IDCT                    ,200,0.066,3.11368e+06,321.163,8, 0.545698,,4.26843e-16,0.000205351,0.545698,
DCT+Bessel+IDCT                    ,204,0.108,5.03504e+06,198.608,8, 0.54652,,4.26823e-16,0.000206506,0.54652,
DCT+Bessel+IDCT                    ,208,0.061,3.78581e+06,264.144,8, 0.54731,,4.26803e-16,0.000207623,0.54731,
DCT+Bessel+IDCT                    ,212,0.103,9.97035e+06,100.297,8, 0.54807,,7.11309e-16,0.000208703,0.54807,
DCT+Bessel+IDCT                    ,216,0.078,4.1406e+06,241.511,8, 0.548801,,8.53537e-16,0.000209748,0.548801,
DCT+Bessel+IDCT                    ,220,0.08,4.52611e+06,220.94,8, 0.549507,,4.26753e-16,0.000210759,0.549507,
DCT+Bessel+IDCT                    ,224,0.069,4.45295e+06,224.57,8, 0.550187,,5.68983e-16,0.000211738,0.550187,
DCT+Bessel+IDCT                    ,228,0.121,6.57547e+06,152.08,8, 0.550843,,4.26723e-16,0.000212687,0.550843,
DCT+Bessel+IDCT                    ,232,0.153,8.53064e+06,117.225,8, 0.551477,,5.68946e-16,0.000213607,0.551477,
DCT+Bessel+IDCT                    ,236,0.201,1.33488e+07,74.913,8, 0.552089,,8.53393e-16,0.000214499,0.552089,
DCT+Bessel+IDCT                    ,240,0.112,5.09234e+06,196.373,8, 0.55268,,4.26684e-16,0.000215364,0.55268,
DCT+Bessel+IDCT                    ,244,0.212,1.63272e+07,61.2474,8, 0.553252,,1.13779e-15,0.000216205,0.553252,
DCT+Bessel+IDCT                    ,248,0.19,9.59592e+06,104.211,8, 0.553806,,5.68882e-16,0.00021702,0.553806,
DCT+Bessel+IDCT                    ,252,0.164,5.94007e+06,168.348,8, 0.554343,,5.68867e-16,0.000217812,0.554343,
DCT+Bessel+IDCT                    ,256,0.144,5.48311e+06,182.378,8, 0.554862,,5.68854e-16,0.000218582,0.554862,
DCT+Bessel+IDCT; on padded grid    ,8,0,54410,18379,8, 0.17769,,1.89244e-16,0.17769,0.174311,
DCT+Bessel+IDCT; on padded grid    ,12,0,95713,10447.9,8, 0.0198543,,2.11301e-16,0.00998228,0.0198543,
DCT+Bessel+IDCT; on padded grid    ,16,0.001,157170,6362.54,8, 0.00102013,,1.75902e-16,0.000242058,0.00102013,
DCT+Bessel+IDCT; on padded grid    ,20,0.005,275888,3624.66,8, 8.05047e-06,,1.62318e-16,5.80966e-06,8.05047e-06,
DCT+Bessel+IDCT; on padded grid    ,24,0.006,399950,2500.31,8, 1.60542e-07,,3.11212e-16,8.79592e-08,1.60542e-07,
DCT+Bessel+IDCT; on padded grid    ,28,0.009,638762,1565.53,8, 1.17767e-09,,3.03561e-16,5.51065e-10,1.17767e-09,
DCT+Bessel+IDCT; on padded grid    ,32,0.01,721259,1386.46,8, 2.3079e-11,,2.98774e-16,7.4634e-12,2.3079e-11,
DCT+Bessel+IDCT; on padded grid    ,36,0.015,1.07192e+06,932.903,8, 2.11267e-11,,4.43362e-16,7.6811e-12,2.11267e-11,
DCT+Bessel+IDCT; on padded grid    ,40,0.017,1.09387e+06,914.185,8, 1.34682e-11,,2.93329e-16,1.33132e-11,1.34682e-11,
DCT+Bessel+IDCT; on padded grid    ,44,0.036,1.93975e+06,515.531,8, 1.9678e-11,,2.91692e-16,1.27243e-11,1.9678e-11,
DCT+Bessel+IDCT; on padded grid    ,48,0.028,1.66249e+06,601.508,8, 2.34059e-11,,2.90461e-16,1.01089e-11,2.34059e-11,
DCT+Bessel+IDCT; on padded grid    ,52,0.035,2.1687e+06,461.105,8, 1.32197e-11,,2.89511e-16,5.73988e-12,1.32197e-11,
DCT+Bessel+IDCT; on padded grid    ,56,0.037,2.4648e+06,405.713,8, 1.85518e-11,,2.88763e-16,5.30639e-12,1.85518e-11,
DCT+Bessel+IDCT; on padded grid    ,60,0.042,2.66022e+06,375.909,8, 2.27646e-11,,2.88163e-16,9.05506e-12,2.27646e-11,
DCT+Bessel+IDCT; on padded grid    ,64,0.048,3.0889e+06,323.74,8, 2.10729e-11,,2.87675e-16,7.71651e-12,2.10729e-11,
DCT+Bessel+IDCT; on padded grid    ,68,0.05,5.0698e+06,197.246,8, 1.50106e-11,,2.87272e-16,1.12665e-11,1.50106e-11,
DCT+Bessel+IDCT; on padded grid    ,72,0.034,4.16089e+06,240.333,8, 1.97258e-11,,5.73873e-16,1.51657e-11,1.97258e-11,
DCT+Bessel+IDCT; on padded grid    ,76,0.037,6.7018e+06,149.214,8, 2.153e-11,,4.29979e-16,1.0682e-11,2.153e-11,
DCT+Bessel+IDCT; on padded grid    ,80,0.041,5.14847e+06,194.232,8, 1.44658e-11,,2.86411e-16,5.15664e-12,1.44658e-11,
DCT+Bessel+IDCT; on padded grid    ,84,0.044,5.94558e+06,168.192,8, 1.70209e-11,,2.86204e-16,8.53249e-12,1.70209e-11,
DCT+Bessel+IDCT; on padded grid    ,88,0.102,6.78536e+06,147.376,8, 2.07506e-11,,2.86025e-16,6.25533e-12,2.07506e-11,
DCT+Bessel+IDCT; on padded grid    ,92,0.148,1.07308e+07,93.1898,8, 2.04663e-11,,4.28804e-16,9.38705e-12,2.04663e-11,
DCT+Bessel+IDCT; on padded grid    ,96,0.101,8.22455e+06,121.587,8, 1.29087e-11,,4.28599e-16,1.27351e-11,1.29087e-11,
DCT+Bessel+IDCT; on padded grid    ,100,0.121,8.53398e+06,117.179,8, 1.70257e-11,,4.28419e-16,8.51103e-12,1.70257e-11,
DCT+Bessel+IDCT; on padded grid    ,104,0.122,9.40761e+06,106.297,8, 2.02944e-11,,4.28259e-16,1.08044e-11,2.02944e-11,
DCT+Bessel+IDCT; on padded grid    ,108,0.183,1.07582e+07,92.9521,8, 1.60286e-11,,5.70822e-16,7.50718e-12,1.60286e-11,
DCT+Bessel+IDCT; on padded grid    ,112,0.23,1.13661e+07,87.981,8, 1.4212e-11,,4.2799e-16,4.51822e-12,1.4212e-11,
DCT+Bessel+IDCT; on padded grid    ,116,0.283,2.00962e+07,49.7608,8, 1.85993e-11,,4.27876e-16,7.33385e-12,1.85993e-11,
DCT+Bessel+IDCT; on padded grid    ,120,0.231,1.31152e+07,76.2476,8, 1.9551e-11,,4.27773e-16,1.03672e-11,1.9551e-11,
DCT+Bessel+IDCT; on padded grid    ,124,0.304,2.40683e+07,41.5484,8, 1.35069e-11,,5.70241e-16,1.35069e-11,1.18983e-11,
DCT+Bessel+IDCT; on padded grid    ,128,0.229,1.42064e+07,70.3907,8, 1.56838e-11,,2.85064e-16,8.61485e-12,1.56838e-11,
DCT+Bessel+IDCT; on padded grid    ,132,0.277,1.7866e+07,55.9722,8, 1.83882e-11,,4.2752e-16,1.07528e-11,1.83882e-11,
DCT+Bessel+IDCT; on padded grid    ,136,0.362,2.39283e+07,41.7916,8, 1.75399e-11,,2.84967e-16,4.31878e-12,1.75399e-11,
DCT+Bessel+IDCT; on padded grid    ,140,0.302,1.92472e+07,51.9556,8, 1.24605e-11,,4.27386e-16,5.34638e-12,1.24605e-11,
DCT+Bessel+IDCT; on padded grid    ,144,0.278,1.94629e+07,51.3799,8, 1.69551e-11,,7.12213e-16,8.07485e-12,1.69551e-11,
DCT+Bessel+IDCT; on padded grid    ,148,0.39,3.68611e+07,27.1289,8, 1.85309e-11,,4.27274e-16,1.09746e-11,1.85309e-11,
DCT+Bessel+IDCT; on padded grid    ,152,0.374,3.12709e+07,31.9786,8, 1.30679e-11,,5.69632e-16,6.40188e-12,1.30679e-11,
DCT+Bessel+IDCT; on padded grid    ,156,0.321,2.47323e+07,40.433,8, 1.30437e-11,,4.27178e-16,8.58183e-12,1.30437e-11,
DCT+Bessel+IDCT; on padded grid    ,160,0.322,2.42484e+07,41.2399,8, 1.7476e-11,,4.27136e-16,1.06122e-11,1.7476e-11,
DCT+Bessel+IDCT; on padded grid    ,164,0.467,5.05618e+07,19.7778,8, 1.63178e-11,,4.27097e-16,4.12124e-12,1.63178e-11,
DCT+Bessel+IDCT; on padded grid    ,168,0.361,2.86735e+07,34.8754,8, 1.07483e-11,,4.2706e-16,5.98377e-12,1.07483e-11,
DCT+Bessel+IDCT; on padded grid    ,172,0.498,6.29058e+07,15.8968,8, 1.49696e-11,,4.27026e-16,8.59783e-12,1.49696e-11,
DCT+Bessel+IDCT; on padded grid    ,176,0.43,3.27065e+07,30.5749,8, 1.93067e-11,,4.26994e-16,1.13609e-11,1.93067e-11,
DCT+Bessel+IDCT; on padded grid    ,180,0.374,3.25259e+07,30.7447,8, 1.46762e-11,,2.84643e-16,6.35487e-12,1.46762e-11,
DCT+Bessel+IDCT; on padded grid    ,184,0.572,5.09774e+07,19.6165,8, 1.13316e-11,,4.26937e-16,8.47184e-12,1.13316e-11,
DCT+Bessel+IDCT; on padded grid    ,188,0.609,7.04047e+07,14.2036,8, 1.57155e-11,,4.26911e-16,1.04276e-11,1.57155e-11,
DCT+Bessel+IDCT; on padded grid    ,192,0.403,3.6157e+07,27.6572,8, 1.63985e-11,,4.26887e-16,4.23117e-12,1.63985e-11,
DCT+Bessel+IDCT; on padded grid    ,196,0.438,4.11463e+07,24.3035,8, 1.26057e-11,,2.84576e-16,6.48823e-12,1.26057e-11,
DCT+Bessel+IDCT; on padded grid    ,200,0.387,4.10055e+07,24.387,8, 1.28271e-11,,4.26843e-16,8.97348e-12,1.28271e-11,
DCT+Bessel+IDCT; on padded grid    ,204,0.672,5.81e+07,17.2117,8, 1.60356e-11,,4.26823e-16,4.13161e-12,1.60356e-11,
DCT+Bessel+IDCT; on padded grid    ,208,0.529,4.56857e+07,21.8887,8, 1.48552e-11,,4.26803e-16,6.25547e-12,1.48552e-11,
DCT+Bessel+IDCT; on padded grid    ,212,0.773,1.00868e+08,9.91397,8, 1.0752e-11,,5.69047e-16,8.30873e-12,1.0752e-11,
DCT+Bessel+IDCT; on padded grid    ,216,0.51,4.78136e+07,20.9146,8, 1.39823e-11,,5.69025e-16,1.02115e-11,1.39823e-11,
DCT+Bessel+IDCT; on padded grid    ,220,0.641,5.67019e+07,17.6361,8, 1.51097e-11,,4.26753e-16,4.74923e-12,1.51097e-11,
DCT+Bessel+IDCT; on padded grid    ,224,0.601,5.34528e+07,18.7081,8, 1.26725e-11,,4.26737e-16,6.89098e-12,1.26725e-11,
DCT+Bessel+IDCT; on padded grid    ,228,0.785,7.50519e+07,13.3241,8, 1.34236e-11,,4.26723e-16,9.24632e-12,1.34236e-11,
DCT+Bessel+IDCT; on padded grid    ,232,0.832,8.79242e+07,11.3734,8, 1.4761e-11,,4.26709e-16,4.06149e-12,1.4761e-11,
DCT+Bessel+IDCT; on padded grid    ,236,0.961,1.33348e+08,7.49919,8, 1.49821e-11,,5.68928e-16,6.12188e-12,1.49821e-11,
DCT+Bessel+IDCT; on padded grid    ,240,0.629,5.71097e+07,17.5102,8, 1.1439e-11,,4.26684e-16,8.12512e-12,1.1439e-11,
DCT+Bessel+IDCT; on padded grid    ,244,1.035,1.48074e+08,6.75337,8, 1.28391e-11,,4.26672e-16,9.98514e-12,1.28391e-11,
DCT+Bessel+IDCT; on padded grid    ,248,0.927,1.01726e+08,9.83036,8, 1.66015e-11,,4.26661e-16,1.16446e-11,1.66015e-11,
DCT+Bessel+IDCT; on padded grid    ,252,0.765,7.06279e+07,14.1587,8, 1.29709e-11,,7.11084e-16,7.20802e-12,1.29709e-11,
DCT+Bessel+IDCT; on padded grid    ,256,0.747,7.00737e+07,14.2707,8, 9.71168e-12,,4.2664e-16,3.09878e-12,9.71168e-12,
chebyshev interp; CPU Dense Matrix ,8,0.003,6230,160514,8, 0.691698,,0.666249,0.691698,0.690985,
chebyshev interp; CPU Dense Matrix ,12,0.021,39512,25308.8,8, 0.253056,,0.253056,0.188171,0.218968,
chebyshev interp; CPU Dense Matrix ,16,0.01,73995,13514.4,8, 0.0706496,,0.0706496,0.0580945,0.0562395,
chebyshev interp; CPU Dense Matrix ,20,0.03,195426,5117.03,8, 0.015193,,0.015193,0.00991159,0.0112035,
chebyshev interp; CPU Dense Matrix ,24,0.031,361317,2767.65,8, 0.00311113,,0.00311113,0.00292066,0.00184363,
chebyshev interp; CPU Dense Matrix ,28,0.049,773514,1292.8,8, 0.000480872,,0.000480872,0.000234594,0.000304919,
chebyshev interp; CPU Dense Matrix ,32,0.067,1.58597e+06,630.529,8, 5.81128e-05,,5.81128e-05,4.05878e-05,2.92622e-05,
chebyshev interp; CPU Dense Matrix ,36,0.117,2.88298e+06,346.863,8, 5.67348e-06,,5.67348e-06,3.77988e-06,2.85695e-06,
chebyshev interp; CPU Dense Matrix ,40,0.205,4.4261e+06,225.932,8, 4.57736e-07,,4.57736e-07,1.83901e-07,2.14081e-07,
chebyshev interp; CPU Dense Matrix ,44,0.229,6.7896e+06,147.284,8, 3.10465e-08,,3.10465e-08,2.50541e-08,1.40723e-08,
chebyshev interp; CPU Dense Matrix ,48,0.34,1.01036e+07,98.9747,8, 1.79482e-09,,1.79482e-09,6.32596e-10,7.75922e-10,
chebyshev interp; CPU Dense Matrix ,52,0.444,1.3869e+07,72.1032,8, 8.9461e-11,,8.9461e-11,7.24731e-11,3.60483e-11,
chebyshev interp; CPU Dense Matrix ,56,0.597,1.85724e+07,53.8433,8, 1.87013e-11,,3.88242e-12,6.1905e-12,1.87013e-11,
chebyshev interp; CPU Dense Matrix ,60,0.943,2.67531e+07,37.3788,8, 2.27678e-11,,1.49413e-13,9.08569e-12,2.27678e-11,
chebyshev interp; CPU Dense Matrix ,64,1.146,3.62438e+07,27.5909,8, 2.10715e-11,,4.45897e-15,7.71936e-12,2.10715e-11,
chebyshev interp; CPU Dense Matrix ,68,1.656,4.23956e+07,23.5874,8, 1.50123e-11,,2.44182e-15,1.1268e-11,1.50123e-11,
chebyshev interp; CPU Dense Matrix ,72,1.961,5.03994e+07,19.8415,8, 1.97268e-11,,1.57815e-15,1.51671e-11,1.97268e-11,
chebyshev interp; CPU Dense Matrix ,76,2.601,6.17114e+07,16.2045,8, 2.15302e-11,,2.86653e-15,1.06838e-11,2.15302e-11,
chebyshev interp; CPU Dense Matrix ,80,3.069,7.81271e+07,12.7997,8, 1.44653e-11,,2.86411e-15,5.15902e-12,1.44653e-11,
chebyshev interp; CPU Dense Matrix ,84,3.925,1.41312e+08,7.07653,8, 1.70226e-11,,1.86033e-15,8.53423e-12,1.70226e-11,
chebyshev interp; CPU Dense Matrix ,88,4.603,1.73411e+08,5.76666,8, 2.07516e-11,,2.86025e-15,6.25683e-12,2.07516e-11,
chebyshev interp; CPU Dense Matrix ,92,6.075,2.00249e+08,4.99378,8, 2.04663e-11,,2.57282e-15,9.38942e-12,2.04663e-11,
chebyshev interp; CPU Dense Matrix ,96,6.143,1.82623e+08,5.47576,8, 1.29083e-11,,2.00013e-15,1.2736e-11,1.29083e-11,
chebyshev interp; CPU Dense Matrix ,100,7.133,1.83913e+08,5.43735,8, 1.70269e-11,,2.2849e-15,8.51143e-12,1.70269e-11,
chebyshev interp; CPU Dense Matrix ,104,8.948,2.30784e+08,4.33306,8, 2.02948e-11,,2.85506e-15,1.08047e-11,2.02948e-11,
chebyshev interp; CPU Dense Matrix ,108,11.461,2.7109e+08,3.68881,8, 1.60285e-11,,2.85411e-15,7.5086e-12,1.60285e-11,
chebyshev interp; CPU Dense Matrix ,112,12.477,3.27907e+08,3.04965,8, 1.42129e-11,,1.99729e-15,4.52028e-12,1.42129e-11,
chebyshev interp; CPU Dense Matrix ,116,17.516,4.38988e+08,2.27797,8, 1.85999e-11,,2.13938e-15,7.33535e-12,1.85999e-11,
chebyshev interp; CPU Dense Matrix ,120,18.783,5.77279e+08,1.73226,8, 1.95513e-11,,2.85182e-15,1.03698e-11,1.95513e-11,
chebyshev interp; CPU Dense Matrix ,124,23.69,5.81865e+08,1.71861,8, 1.35087e-11,,2.70864e-15,1.35087e-11,1.1899e-11,
chebyshev interp; CPU Dense Matrix ,128,25.087,7.33797e+08,1.36277,8, 1.56851e-11,,2.28051e-15,8.61635e-12,1.56851e-11,
chebyshev interp; CPU Dense Matrix ,132,28.45,4.73034e+09,0.211401,8, 1.83885e-11,,2.42261e-15,1.07526e-11,1.83885e-11,
chebyshev interp; CPU Dense Matrix ,136,32.833,6.67927e+08,1.49717,8, 1.75402e-11,,2.84967e-15,4.31902e-12,1.75402e-11,
chebyshev interp; CPU Dense Matrix ,140,35.823,1.78447e+09,0.560391,8, 1.24615e-11,,2.56432e-15,5.34868e-12,1.24615e-11,
chebyshev interp; CPU Dense Matrix ,144,38.867,1.35445e+09,0.738305,8, 1.6956e-11,,2.56397e-15,8.07635e-12,1.6956e-11,
chebyshev interp; CPU Dense Matrix ,148,52.813,1.06768e+09,0.93661,8, 1.85309e-11,,2.13637e-15,1.09766e-11,1.85309e-11,
chebyshev interp; CPU Dense Matrix ,152,56.478,1.23578e+09,0.809208,8, 1.30679e-11,,2.42094e-15,6.40338e-12,1.30679e-11,
chebyshev interp; CPU Dense Matrix ,156,61.686,1.30106e+09,0.768607,8, 1.30445e-11,,2.42068e-15,8.58254e-12,1.30445e-11,
chebyshev interp; CPU Dense Matrix ,160,70.658,1.71012e+09,0.584755,8, 1.74767e-11,,1.9933e-15,1.0613e-11,1.74767e-11,
chebyshev interp; CPU Dense Matrix ,164,91.454,1.76099e+09,0.567862,8, 1.63179e-11,,2.84731e-15,4.12227e-12,1.63179e-11,
chebyshev interp; CPU Dense Matrix ,168,87.452,1.77669e+09,0.562845,8, 1.07489e-11,,2.27765e-15,5.98567e-12,1.07489e-11,
chebyshev interp; CPU Dense Matrix ,172,111.996,2.16042e+09,0.462874,8, 1.49704e-11,,2.27747e-15,8.59894e-12,1.49704e-11,
chebyshev interp; CPU Dense Matrix ,176,105.412,2.52447e+09,0.396122,8, 1.93066e-11,,2.98896e-15,1.13612e-11,1.93066e-11,
chebyshev interp; CPU Dense Matrix ,180,114.255,3.35189e+09,0.298339,8, 1.46765e-11,,2.27715e-15,6.35598e-12,1.46765e-11,
chebyshev interp; CPU Dense Matrix ,184,140.945,2.72612e+09,0.366821,8, 1.13321e-11,,2.56162e-15,8.47326e-12,1.13321e-11,
chebyshev interp; CPU Dense Matrix ,188,174.475,3.00518e+09,0.332759,8, 1.57161e-11,,2.84607e-15,1.0428e-11,1.57161e-11,
chebyshev interp; CPU Dense Matrix ,192,168.951,3.6419e+09,0.274582,8, 1.63987e-11,,2.70362e-15,4.23196e-12,1.63987e-11,
chebyshev interp; CPU Dense Matrix ,196,189.797,3.63522e+09,0.275087,8, 1.26058e-11,,2.70347e-15,6.48918e-12,1.26058e-11,
chebyshev interp; CPU Dense Matrix ,200,204.187,1.23452e+10,0.0810033,8, 1.28282e-11,,2.70334e-15,8.97467e-12,1.28282e-11,
chebyshev interp; CPU Dense Matrix ,204,235.235,4.34002e+09,0.230414,8, 1.60361e-11,,2.84548e-15,4.13288e-12,1.60361e-11,
chebyshev interp; CPU Dense Matrix ,208,245.248,4.93064e+09,0.202813,8, 1.48551e-11,,2.70309e-15,6.25721e-12,1.48551e-11,
chebyshev interp; CPU Dense Matrix ,212,305.606,5.15287e+09,0.194067,8, 1.07523e-11,,2.56071e-15,8.31031e-12,1.07523e-11,
chebyshev interp; CPU Dense Matrix ,216,278.136,6.58992e+09,0.151747,8, 1.39831e-11,,2.84512e-15,1.02127e-11,1.39831e-11,
chebyshev interp; CPU Dense Matrix ,220,324.219,5.82762e+09,0.171597,8, 1.511e-11,,2.70277e-15,4.74995e-12,1.511e-11,
chebyshev interp; CPU Dense Matrix ,224,364.465,7.70414e+09,0.1298,8, 1.26722e-11,,2.41818e-15,6.89232e-12,1.26722e-11,
chebyshev interp; CPU Dense Matrix ,228,410.097,1.16045e+10,0.0861734,8, 1.34242e-11,,2.70258e-15,9.24735e-12,1.34242e-11,
chebyshev interp; CPU Dense Matrix ,232,466.81,1.31365e+10,0.0761235,8, 1.47614e-11,,2.41802e-15,4.06284e-12,1.47614e-11,
chebyshev interp; CPU Dense Matrix ,236,543.969,1.39969e+10,0.0714441,8, 1.49821e-11,,3.12911e-15,6.12298e-12,1.49821e-11,
chebyshev interp; CPU Dense Matrix ,240,496.993,1.58825e+10,0.0629622,8, 1.14387e-11,,2.5601e-15,8.12686e-12,1.14387e-11,
chebyshev interp; CPU Dense Matrix ,244,619.754,1.03838e+10,0.0963035,8, 1.28397e-11,,2.84448e-15,9.98593e-12,1.28397e-11,
chebyshev interp; CPU Dense Matrix ,248,601.946,1.37237e+10,0.0728664,8, 1.66016e-11,,2.41775e-15,1.16448e-11,1.66016e-11,
chebyshev interp; CPU Dense Matrix ,252,651.114,3.43957e+10,0.0290734,8, 1.29711e-11,,2.41769e-15,7.20913e-12,1.29711e-11,
chebyshev interp; CPU Dense Matrix ,256,719.289,1.28041e+10,0.0780998,8, 9.71214e-12,,2.84427e-15,3.09878e-12,9.71214e-12,
Build Status = -2 ( Err = -9999 )
Log: 

Sources: #pragma OPENCL EXTENSION cl_khr_fp64 : enable

__kernel void am_cpu( 
  __global double * A, 
  unsigned int A_start1, unsigned int A_start2, 
  unsigned int A_inc1,   unsigned int A_inc2, 
  unsigned int A_size1,  unsigned int A_size2, 
  unsigned int A_internal_size1,  unsigned int A_internal_size2, 
  double fac2, 
  unsigned int options2, 
  __global const double * B, 
  unsigned int B_start1, unsigned int B_start2, 
  unsigned int B_inc1,   unsigned int B_inc2, 
  unsigned int B_internal_size1,  unsigned int B_internal_size2) { 
  double alpha = fac2; 
  if (options2 & (1 << 0)) 
    alpha = -alpha; 
 
  if (options2 & (1 << 1)) { 
  unsigned int row_gid = get_global_id(0) / get_local_size(0);
  unsigned int col_gid = get_global_id(0) % get_local_size(0);
  for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
    for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
      A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] = B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)] / alpha ; 
  } else { 
  unsigned int row_gid = get_global_id(0) / get_local_size(0);
  unsigned int col_gid = get_global_id(0) % get_local_size(0);
  for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
    for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
      A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] = B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)] * alpha ; 
  } 
} 
__kernel void am_gpu( 
  __global double * A, 
  unsigned int A_start1, unsigned int A_start2, 
  unsigned int A_inc1,   unsigned int A_inc2, 
  unsigned int A_size1,  unsigned int A_size2, 
  unsigned int A_internal_size1,  unsigned int A_internal_size2, 
  __global double * fac2, 
  unsigned int options2, 
  __global const double * B, 
  unsigned int B_start1, unsigned int B_start2, 
  unsigned int B_inc1,   unsigned int B_inc2, 
  unsigned int B_internal_size1,  unsigned int B_internal_size2) { 
  double alpha = fac2[0]; 
  if (options2 & (1 << 0)) 
    alpha = -alpha; 
 
  if (options2 & (1 << 1)) { 
  unsigned int row_gid = get_global_id(0) / get_local_size(0);
  unsigned int col_gid = get_global_id(0) % get_local_size(0);
  for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
    for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
      A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] = B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)] / alpha ; 
  } else { 
  unsigned int row_gid = get_global_id(0) / get_local_size(0);
  unsigned int col_gid = get_global_id(0) % get_local_size(0);
  for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
    for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
      A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] = B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)] * alpha ; 
  } 
} 
__kernel void ambm_cpu_cpu( 
  __global double * A, 
  unsigned int A_start1, unsigned int A_start2, 
  unsigned int A_inc1,   unsigned int A_inc2, 
  unsigned int A_size1,  unsigned int A_size2, 
  unsigned int A_internal_size1,  unsigned int A_internal_size2, 
  double fac2, 
  unsigned int options2, 
  __global const double * B, 
  unsigned int B_start1, unsigned int B_start2, 
  unsigned int B_inc1,   unsigned int B_inc2, 
  unsigned int B_internal_size1,  unsigned int B_internal_size2, 

  double fac3, 
  unsigned int options3, 
  __global const double * C, 
  unsigned int C_start1, unsigned int C_start2, 
  unsigned int C_inc1,   unsigned int C_inc2, 
  unsigned int C_internal_size1,  unsigned int C_internal_size2 
) { 
  double alpha = fac2; 
  if (options2 & (1 << 0)) 
    alpha = -alpha; 
 
  double beta = fac3; 
  if (options3 & (1 << 0)) 
    beta = -beta; 
 
  if (options2 & (1 << 1)) { 
    if (options3 & (1 << 1)) {
  unsigned int row_gid = get_global_id(0) / get_local_size(0);
  unsigned int col_gid = get_global_id(0) % get_local_size(0);
  for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
    for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
      A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] = B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)] / alpha + C[(row * C_inc1 + C_start1) * C_internal_size2 + (col * C_inc2 + C_start2)] / beta; 
    } else {
  unsigned int row_gid = get_global_id(0) / get_local_size(0);
  unsigned int col_gid = get_global_id(0) % get_local_size(0);
  for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
    for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
      A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] = B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)] / alpha + C[(row * C_inc1 + C_start1) * C_internal_size2 + (col * C_inc2 + C_start2)] * beta; 
    } 
  } else { 
    if (options3 & (1 << 1)) {
  unsigned int row_gid = get_global_id(0) / get_local_size(0);
  unsigned int col_gid = get_global_id(0) % get_local_size(0);
  for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
    for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
      A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] = B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)] * alpha + C[(row * C_inc1 + C_start1) * C_internal_size2 + (col * C_inc2 + C_start2)] / beta; 
    } else {
  unsigned int row_gid = get_global_id(0) / get_local_size(0);
  unsigned int col_gid = get_global_id(0) % get_local_size(0);
  for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
    for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
      A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] = B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)] * alpha + C[(row * C_inc1 + C_start1) * C_internal_size2 + (col * C_inc2 + C_start2)] * beta; 
    } 
  } 
} 
__kernel void ambm_cpu_gpu( 
  __global double * A, 
  unsigned int A_start1, unsigned int A_start2, 
  unsigned int A_inc1,   unsigned int A_inc2, 
  unsigned int A_size1,  unsigned int A_size2, 
  unsigned int A_internal_size1,  unsigned int A_internal_size2, 
  double fac2, 
  unsigned int options2, 
  __global const double * B, 
  unsigned int B_start1, unsigned int B_start2, 
  unsigned int B_inc1,   unsigned int B_inc2, 
  unsigned int B_internal_size1,  unsigned int B_internal_size2, 

  __global double * fac3, 
  unsigned int options3, 
  __global const double * C, 
  unsigned int C_start1, unsigned int C_start2, 
  unsigned int C_inc1,   unsigned int C_inc2, 
  unsigned int C_internal_size1,  unsigned int C_internal_size2 
) { 
  double alpha = fac2; 
  if (options2 & (1 << 0)) 
    alpha = -alpha; 
 
  double beta = fac3[0]; 
  if (options3 & (1 << 0)) 
    beta = -beta; 
 
  if (options2 & (1 << 1)) { 
    if (options3 & (1 << 1)) {
  unsigned int row_gid = get_global_id(0) / get_local_size(0);
  unsigned int col_gid = get_global_id(0) % get_local_size(0);
  for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
    for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
      A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] = B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)] / alpha + C[(row * C_inc1 + C_start1) * C_internal_size2 + (col * C_inc2 + C_start2)] / beta; 
    } else {
  unsigned int row_gid = get_global_id(0) / get_local_size(0);
  unsigned int col_gid = get_global_id(0) % get_local_size(0);
  for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
    for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
      A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] = B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)] / alpha + C[(row * C_inc1 + C_start1) * C_internal_size2 + (col * C_inc2 + C_start2)] * beta; 
    } 
  } else { 
    if (options3 & (1 << 1)) {
  unsigned int row_gid = get_global_id(0) / get_local_size(0);
  unsigned int col_gid = get_global_id(0) % get_local_size(0);
  for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
    for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
      A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] = B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)] * alpha + C[(row * C_inc1 + C_start1) * C_internal_size2 + (col * C_inc2 + C_start2)] / beta; 
    } else {
  unsigned int row_gid = get_global_id(0) / get_local_size(0);
  unsigned int col_gid = get_global_id(0) % get_local_size(0);
  for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
    for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
      A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] = B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)] * alpha + C[(row * C_inc1 + C_start1) * C_internal_size2 + (col * C_inc2 + C_start2)] * beta; 
    } 
  } 
} 
__kernel void ambm_gpu_cpu( 
  __global double * A, 
  unsigned int A_start1, unsigned int A_start2, 
  unsigned int A_inc1,   unsigned int A_inc2, 
  unsigned int A_size1,  unsigned int A_size2, 
  unsigned int A_internal_size1,  unsigned int A_internal_size2, 
  __global double * fac2, 
  unsigned int options2, 
  __global const double * B, 
  unsigned int B_start1, unsigned int B_start2, 
  unsigned int B_inc1,   unsigned int B_inc2, 
  unsigned int B_internal_size1,  unsigned int B_internal_size2, 

  double fac3, 
  unsigned int options3, 
  __global const double * C, 
  unsigned int C_start1, unsigned int C_start2, 
  unsigned int C_inc1,   unsigned int C_inc2, 
  unsigned int C_internal_size1,  unsigned int C_internal_size2 
) { 
  double alpha = fac2[0]; 
  if (options2 & (1 << 0)) 
    alpha = -alpha; 
 
  double beta = fac3; 
  if (options3 & (1 << 0)) 
    beta = -beta; 
 
  if (options2 & (1 << 1)) { 
    if (options3 & (1 << 1)) {
  unsigned int row_gid = get_global_id(0) / get_local_size(0);
  unsigned int col_gid = get_global_id(0) % get_local_size(0);
  for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
    for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
      A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] = B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)] / alpha + C[(row * C_inc1 + C_start1) * C_internal_size2 + (col * C_inc2 + C_start2)] / beta; 
    } else {
  unsigned int row_gid = get_global_id(0) / get_local_size(0);
  unsigned int col_gid = get_global_id(0) % get_local_size(0);
  for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
    for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
      A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] = B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)] / alpha + C[(row * C_inc1 + C_start1) * C_internal_size2 + (col * C_inc2 + C_start2)] * beta; 
    } 
  } else { 
    if (options3 & (1 << 1)) {
  unsigned int row_gid = get_global_id(0) / get_local_size(0);
  unsigned int col_gid = get_global_id(0) % get_local_size(0);
  for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
    for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
      A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] = B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)] * alpha + C[(row * C_inc1 + C_start1) * C_internal_size2 + (col * C_inc2 + C_start2)] / beta; 
    } else {
  unsigned int row_gid = get_global_id(0) / get_local_size(0);
  unsigned int col_gid = get_global_id(0) % get_local_size(0);
  for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
    for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
      A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] = B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)] * alpha + C[(row * C_inc1 + C_start1) * C_internal_size2 + (col * C_inc2 + C_start2)] * beta; 
    } 
  } 
} 
__kernel void ambm_gpu_gpu( 
  __global double * A, 
  unsigned int A_start1, unsigned int A_start2, 
  unsigned int A_inc1,   unsigned int A_inc2, 
  unsigned int A_size1,  unsigned int A_size2, 
  unsigned int A_internal_size1,  unsigned int A_internal_size2, 
  __global double * fac2, 
  unsigned int options2, 
  __global const double * B, 
  unsigned int B_start1, unsigned int B_start2, 
  unsigned int B_inc1,   unsigned int B_inc2, 
  unsigned int B_internal_size1,  unsigned int B_internal_size2, 

  __global double * fac3, 
  unsigned int options3, 
  __global const double * C, 
  unsigned int C_start1, unsigned int C_start2, 
  unsigned int C_inc1,   unsigned int C_inc2, 
  unsigned int C_internal_size1,  unsigned int C_internal_size2 
) { 
  double alpha = fac2[0]; 
  if (options2 & (1 << 0)) 
    alpha = -alpha; 
 
  double beta = fac3[0]; 
  if (options3 & (1 << 0)) 
    beta = -beta; 
 
  if (options2 & (1 << 1)) { 
    if (options3 & (1 << 1)) {
  unsigned int row_gid = get_global_id(0) / get_local_size(0);
  unsigned int col_gid = get_global_id(0) % get_local_size(0);
  for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
    for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
      A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] = B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)] / alpha + C[(row * C_inc1 + C_start1) * C_internal_size2 + (col * C_inc2 + C_start2)] / beta; 
    } else {
  unsigned int row_gid = get_global_id(0) / get_local_size(0);
  unsigned int col_gid = get_global_id(0) % get_local_size(0);
  for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
    for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
      A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] = B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)] / alpha + C[(row * C_inc1 + C_start1) * C_internal_size2 + (col * C_inc2 + C_start2)] * beta; 
    } 
  } else { 
    if (options3 & (1 << 1)) {
  unsigned int row_gid = get_global_id(0) / get_local_size(0);
  unsigned int col_gid = get_global_id(0) % get_local_size(0);
  for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
    for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
      A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] = B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)] * alpha + C[(row * C_inc1 + C_start1) * C_internal_size2 + (col * C_inc2 + C_start2)] / beta; 
    } else {
  unsigned int row_gid = get_global_id(0) / get_local_size(0);
  unsigned int col_gid = get_global_id(0) % get_local_size(0);
  for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
    for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
      A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] = B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)] * alpha + C[(row * C_inc1 + C_start1) * C_internal_size2 + (col * C_inc2 + C_start2)] * beta; 
    } 
  } 
} 
__kernel void ambm_m_cpu_cpu( 
  __global double * A, 
  unsigned int A_start1, unsigned int A_start2, 
  unsigned int A_inc1,   unsigned int A_inc2, 
  unsigned int A_size1,  unsigned int A_size2, 
  unsigned int A_internal_size1,  unsigned int A_internal_size2, 
  double fac2, 
  unsigned int options2, 
  __global const double * B, 
  unsigned int B_start1, unsigned int B_start2, 
  unsigned int B_inc1,   unsigned int B_inc2, 
  unsigned int B_internal_size1,  unsigned int B_internal_size2, 

  double fac3, 
  unsigned int options3, 
  __global const double * C, 
  unsigned int C_start1, unsigned int C_start2, 
  unsigned int C_inc1,   unsigned int C_inc2, 
  unsigned int C_internal_size1,  unsigned int C_internal_size2 
) { 
  double alpha = fac2; 
  if (options2 & (1 << 0)) 
    alpha = -alpha; 
 
  double beta = fac3; 
  if (options3 & (1 << 0)) 
    beta = -beta; 
 
  if (options2 & (1 << 1)) { 
    if (options3 & (1 << 1)) {
  unsigned int row_gid = get_global_id(0) / get_local_size(0);
  unsigned int col_gid = get_global_id(0) % get_local_size(0);
  for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
    for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
      A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] += B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)] / alpha + C[(row * C_inc1 + C_start1) * C_internal_size2 + (col * C_inc2 + C_start2)] / beta; 
    } else {
  unsigned int row_gid = get_global_id(0) / get_local_size(0);
  unsigned int col_gid = get_global_id(0) % get_local_size(0);
  for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
    for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
      A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] += B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)] / alpha + C[(row * C_inc1 + C_start1) * C_internal_size2 + (col * C_inc2 + C_start2)] * beta; 
    } 
  } else { 
    if (options3 & (1 << 1)) {
  unsigned int row_gid = get_global_id(0) / get_local_size(0);
  unsigned int col_gid = get_global_id(0) % get_local_size(0);
  for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
    for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
      A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] += B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)] * alpha + C[(row * C_inc1 + C_start1) * C_internal_size2 + (col * C_inc2 + C_start2)] / beta; 
    } else {
  unsigned int row_gid = get_global_id(0) / get_local_size(0);
  unsigned int col_gid = get_global_id(0) % get_local_size(0);
  for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
    for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
      A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] += B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)] * alpha + C[(row * C_inc1 + C_start1) * C_internal_size2 + (col * C_inc2 + C_start2)] * beta; 
    } 
  } 
} 
__kernel void ambm_m_cpu_gpu( 
  __global double * A, 
  unsigned int A_start1, unsigned int A_start2, 
  unsigned int A_inc1,   unsigned int A_inc2, 
  unsigned int A_size1,  unsigned int A_size2, 
  unsigned int A_internal_size1,  unsigned int A_internal_size2, 
  double fac2, 
  unsigned int options2, 
  __global const double * B, 
  unsigned int B_start1, unsigned int B_start2, 
  unsigned int B_inc1,   unsigned int B_inc2, 
  unsigned int B_internal_size1,  unsigned int B_internal_size2, 

  __global double * fac3, 
  unsigned int options3, 
  __global const double * C, 
  unsigned int C_start1, unsigned int C_start2, 
  unsigned int C_inc1,   unsigned int C_inc2, 
  unsigned int C_internal_size1,  unsigned int C_internal_size2 
) { 
  double alpha = fac2; 
  if (options2 & (1 << 0)) 
    alpha = -alpha; 
 
  double beta = fac3[0]; 
  if (options3 & (1 << 0)) 
    beta = -beta; 
 
  if (options2 & (1 << 1)) { 
    if (options3 & (1 << 1)) {
  unsigned int row_gid = get_global_id(0) / get_local_size(0);
  unsigned int col_gid = get_global_id(0) % get_local_size(0);
  for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
    for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
      A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] += B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)] / alpha + C[(row * C_inc1 + C_start1) * C_internal_size2 + (col * C_inc2 + C_start2)] / beta; 
    } else {
  unsigned int row_gid = get_global_id(0) / get_local_size(0);
  unsigned int col_gid = get_global_id(0) % get_local_size(0);
  for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
    for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
      A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] += B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)] / alpha + C[(row * C_inc1 + C_start1) * C_internal_size2 + (col * C_inc2 + C_start2)] * beta; 
    } 
  } else { 
    if (options3 & (1 << 1)) {
  unsigned int row_gid = get_global_id(0) / get_local_size(0);
  unsigned int col_gid = get_global_id(0) % get_local_size(0);
  for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
    for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
      A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] += B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)] * alpha + C[(row * C_inc1 + C_start1) * C_internal_size2 + (col * C_inc2 + C_start2)] / beta; 
    } else {
  unsigned int row_gid = get_global_id(0) / get_local_size(0);
  unsigned int col_gid = get_global_id(0) % get_local_size(0);
  for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
    for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
      A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] += B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)] * alpha + C[(row * C_inc1 + C_start1) * C_internal_size2 + (col * C_inc2 + C_start2)] * beta; 
    } 
  } 
} 
__kernel void ambm_m_gpu_cpu( 
  __global double * A, 
  unsigned int A_start1, unsigned int A_start2, 
  unsigned int A_inc1,   unsigned int A_inc2, 
  unsigned int A_size1,  unsigned int A_size2, 
  unsigned int A_internal_size1,  unsigned int A_internal_size2, 
  __global double * fac2, 
  unsigned int options2, 
  __global const double * B, 
  unsigned int B_start1, unsigned int B_start2, 
  unsigned int B_inc1,   unsigned int B_inc2, 
  unsigned int B_internal_size1,  unsigned int B_internal_size2, 

  double fac3, 
  unsigned int options3, 
  __global const double * C, 
  unsigned int C_start1, unsigned int C_start2, 
  unsigned int C_inc1,   unsigned int C_inc2, 
  unsigned int C_internal_size1,  unsigned int C_internal_size2 
) { 
  double alpha = fac2[0]; 
  if (options2 & (1 << 0)) 
    alpha = -alpha; 
 
  double beta = fac3; 
  if (options3 & (1 << 0)) 
    beta = -beta; 
 
  if (options2 & (1 << 1)) { 
    if (options3 & (1 << 1)) {
  unsigned int row_gid = get_global_id(0) / get_local_size(0);
  unsigned int col_gid = get_global_id(0) % get_local_size(0);
  for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
    for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
      A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] += B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)] / alpha + C[(row * C_inc1 + C_start1) * C_internal_size2 + (col * C_inc2 + C_start2)] / beta; 
    } else {
  unsigned int row_gid = get_global_id(0) / get_local_size(0);
  unsigned int col_gid = get_global_id(0) % get_local_size(0);
  for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
    for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
      A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] += B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)] / alpha + C[(row * C_inc1 + C_start1) * C_internal_size2 + (col * C_inc2 + C_start2)] * beta; 
    } 
  } else { 
    if (options3 & (1 << 1)) {
  unsigned int row_gid = get_global_id(0) / get_local_size(0);
  unsigned int col_gid = get_global_id(0) % get_local_size(0);
  for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
    for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
      A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] += B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)] * alpha + C[(row * C_inc1 + C_start1) * C_internal_size2 + (col * C_inc2 + C_start2)] / beta; 
    } else {
  unsigned int row_gid = get_global_id(0) / get_local_size(0);
  unsigned int col_gid = get_global_id(0) % get_local_size(0);
  for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
    for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
      A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] += B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)] * alpha + C[(row * C_inc1 + C_start1) * C_internal_size2 + (col * C_inc2 + C_start2)] * beta; 
    } 
  } 
} 
__kernel void ambm_m_gpu_gpu( 
  __global double * A, 
  unsigned int A_start1, unsigned int A_start2, 
  unsigned int A_inc1,   unsigned int A_inc2, 
  unsigned int A_size1,  unsigned int A_size2, 
  unsigned int A_internal_size1,  unsigned int A_internal_size2, 
  __global double * fac2, 
  unsigned int options2, 
  __global const double * B, 
  unsigned int B_start1, unsigned int B_start2, 
  unsigned int B_inc1,   unsigned int B_inc2, 
  unsigned int B_internal_size1,  unsigned int B_internal_size2, 

  __global double * fac3, 
  unsigned int options3, 
  __global const double * C, 
  unsigned int C_start1, unsigned int C_start2, 
  unsigned int C_inc1,   unsigned int C_inc2, 
  unsigned int C_internal_size1,  unsigned int C_internal_size2 
) { 
  double alpha = fac2[0]; 
  if (options2 & (1 << 0)) 
    alpha = -alpha; 
 
  double beta = fac3[0]; 
  if (options3 & (1 << 0)) 
    beta = -beta; 
 
  if (options2 & (1 << 1)) { 
    if (options3 & (1 << 1)) {
  unsigned int row_gid = get_global_id(0) / get_local_size(0);
  unsigned int col_gid = get_global_id(0) % get_local_size(0);
  for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
    for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
      A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] += B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)] / alpha + C[(row * C_inc1 + C_start1) * C_internal_size2 + (col * C_inc2 + C_start2)] / beta; 
    } else {
  unsigned int row_gid = get_global_id(0) / get_local_size(0);
  unsigned int col_gid = get_global_id(0) % get_local_size(0);
  for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
    for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
      A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] += B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)] / alpha + C[(row * C_inc1 + C_start1) * C_internal_size2 + (col * C_inc2 + C_start2)] * beta; 
    } 
  } else { 
    if (options3 & (1 << 1)) {
  unsigned int row_gid = get_global_id(0) / get_local_size(0);
  unsigned int col_gid = get_global_id(0) % get_local_size(0);
  for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
    for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
      A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] += B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)] * alpha + C[(row * C_inc1 + C_start1) * C_internal_size2 + (col * C_inc2 + C_start2)] / beta; 
    } else {
  unsigned int row_gid = get_global_id(0) / get_local_size(0);
  unsigned int col_gid = get_global_id(0) % get_local_size(0);
  for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
    for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
      A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] += B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)] * alpha + C[(row * C_inc1 + C_start1) * C_internal_size2 + (col * C_inc2 + C_start2)] * beta; 
    } 
  } 
} 
__kernel void assign_cpu( 
  __global double * A, 
  unsigned int A_start1, unsigned int A_start2, 
  unsigned int A_inc1,   unsigned int A_inc2, 
  unsigned int A_size1,  unsigned int A_size2, 
  unsigned int A_internal_size1,  unsigned int A_internal_size2, 
  double alpha) 
{ 
  unsigned int row_gid = get_global_id(0) / get_local_size(0);
  unsigned int col_gid = get_global_id(0) % get_local_size(0);
  for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
    for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
      A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] = alpha; 
} 
__kernel void diagonal_assign_cpu( 
  __global double * A, 
  unsigned int A_start1, unsigned int A_start2, 
  unsigned int A_inc1,   unsigned int A_inc2, 
  unsigned int A_size1,  unsigned int A_size2, 
  unsigned int A_internal_size1,  unsigned int A_internal_size2, 
  double alpha) 
{ 
  for (unsigned int idx = get_global_id(0); idx < min(A_size1, A_size2); idx += get_global_size(0))
    A[(idx * A_inc1 + A_start1) * A_internal_size2 + (idx * A_inc2 + A_start2)] = alpha; 
} 
__kernel void element_op( 
  __global double * A, 
  unsigned int A_start1, unsigned int A_start2, 
  unsigned int A_inc1,   unsigned int A_inc2, 
  unsigned int A_size1,  unsigned int A_size2, 
  unsigned int A_internal_size1,  unsigned int A_internal_size2, 
  __global double * B, 
  unsigned int B_start1, unsigned int B_start2, 
  unsigned int B_inc1,   unsigned int B_inc2, 
  unsigned int B_internal_size1,  unsigned int B_internal_size2, 
  __global double * C, 
  unsigned int C_start1, unsigned int C_start2, 
  unsigned int C_inc1,   unsigned int C_inc2, 
  unsigned int C_internal_size1,  unsigned int C_internal_size2, 
  unsigned int op_type) 
{ 
  unsigned int row_gid = get_global_id(0) / get_local_size(0);
  unsigned int col_gid = get_global_id(0) % get_local_size(0);
  if (op_type == 2) {    for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
      for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
        A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] = 
        pow(B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)], 
            C[(row * C_inc1 + C_start1) * C_internal_size2 + (col * C_inc2 + C_start2)]); 
  } else if (op_type == 1) {    for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
      for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
        A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] = 
        B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)] / 
        C[(row * C_inc1 + C_start1) * C_internal_size2 + (col * C_inc2 + C_start2)]; 
  } else if (op_type == 0) {    for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
      for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
        A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] = 
        B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)] * 
        C[(row * C_inc1 + C_start1) * C_internal_size2 + (col * C_inc2 + C_start2)]; 
  }} 
__kernel void trans_vec_mul( 
          __global const double * A, 
          unsigned int A_row_start, unsigned int A_col_start, 
          unsigned int A_row_inc, unsigned int A_col_inc, 
          unsigned int A_row_size, unsigned int A_col_size, 
          unsigned int A_internal_rows, unsigned int A_internal_cols, 
          __global const double * v, 
          unsigned int v_start, unsigned int v_inc, unsigned int v_size, 
          __global double * result, 
          unsigned int result_start, unsigned int result_inc, unsigned int result_size, 
          __local double * work) 
{ 
  for (unsigned int row = get_global_id(0); row < A_col_size; row += get_global_size(0)) 
  { 
    double dot_prod = 0; 
    for (unsigned int col = 0; col < A_row_size; ++col) 
      dot_prod += A[(row * A_col_inc + A_col_start) + (col * A_row_inc + A_row_start) * A_internal_cols] * v[v_start + v_inc * col]; 
    result[row * result_inc + result_start] = dot_prod; 
  } 
} 
__kernel void vec_mul( 
          __global const double * A, 
          unsigned int A_row_start, unsigned int A_col_start, 
          unsigned int A_row_inc, unsigned int A_col_inc, 
          unsigned int A_row_size, unsigned int A_col_size, 
          unsigned int A_internal_rows, unsigned int A_internal_cols, 
          __global const double * v, 
          unsigned int v_start, unsigned int v_inc, unsigned int v_size, 
          __global double * result, 
          unsigned int result_start, unsigned int result_inc, unsigned int result_size, 
          __local double * work) 
{ 
  unsigned int row_gid = get_global_id(0) / get_local_size(0); 
  unsigned int col_gid = get_global_id(0) % get_local_size(0); 
  unsigned int lid = get_local_id(0); 
  for (unsigned int row = row_gid; row < A_row_size; row += get_num_groups(0)) 
  { 
    double dot_prod = 0; 
    for (unsigned int col = col_gid; col < A_col_size; col+=get_local_size(0)) 
      dot_prod += A[(row * A_row_inc + A_row_start) * A_internal_cols + col * A_col_inc + A_col_start] * v[v_start + v_inc * col]; 
    work[lid] = dot_prod; 
    for(unsigned int stride=get_local_size(0)/2 ; stride>0 ; stride>>=1){ 
      barrier(CLK_LOCAL_MEM_FENCE); 
      if(lid < stride) 
        work[lid] += work[lid+stride]; 
    } 
    if(lid == 0) 
      result[row * result_inc + result_start] = work[0]; 
  } 
} 

Finished a list.
chebyshev interp; GPU Dense Matrix ,8,0.353,141018,7091.29,8, 0.691698,,0.666249,0.691698,0.690985,
chebyshev interp; GPU Dense Matrix ,12,0.016,139612,7162.71,8, 0.253056,,0.253056,0.188171,0.218968,
chebyshev interp; GPU Dense Matrix ,16,0.03,160611,6226.22,8, 0.0706496,,0.0706496,0.0580945,0.0562395,
chebyshev interp; GPU Dense Matrix ,20,0.034,219448,4556.89,8, 0.015193,,0.015193,0.00991159,0.0112035,
chebyshev interp; GPU Dense Matrix ,24,0.069,258032,3875.49,8, 0.00311113,,0.00311113,0.00292066,0.00184363,
chebyshev interp; GPU Dense Matrix ,28,0.097,272480,3669.99,8, 0.000480872,,0.000480872,0.000234594,0.000304919,
chebyshev interp; GPU Dense Matrix ,32,0.135,406798,2458.22,8, 5.81128e-05,,5.81128e-05,4.05878e-05,2.92622e-05,
chebyshev interp; GPU Dense Matrix ,36,0.184,431481,2317.6,8, 5.67348e-06,,5.67348e-06,3.77988e-06,2.85695e-06,
chebyshev interp; GPU Dense Matrix ,40,0.262,556411,1797.23,8, 4.57736e-07,,4.57736e-07,1.83901e-07,2.14081e-07,
chebyshev interp; GPU Dense Matrix ,44,0.362,953036,1049.28,8, 3.10465e-08,,3.10465e-08,2.50541e-08,1.40723e-08,
chebyshev interp; GPU Dense Matrix ,48,0.575,1.20106e+06,832.597,8, 1.79481e-09,,1.79481e-09,6.32595e-10,7.75922e-10,
chebyshev interp; GPU Dense Matrix ,52,0.63,1.31524e+06,760.32,8, 8.94606e-11,,8.94606e-11,7.24734e-11,3.60475e-11,
chebyshev interp; GPU Dense Matrix ,56,0.977,1.52337e+06,656.438,8, 1.87013e-11,,3.883e-12,6.19018e-12,1.87013e-11,
chebyshev interp; GPU Dense Matrix ,60,1.089,2.51997e+06,396.83,8, 2.27679e-11,,1.48548e-13,9.08553e-12,2.27679e-11,
chebyshev interp; GPU Dense Matrix ,64,3.622,2.41457e+06,414.153,8, 2.10715e-11,,5.17815e-15,7.71904e-12,2.10715e-11,
chebyshev interp; GPU Dense Matrix ,68,1.962,3.80391e+06,262.888,8, 1.50123e-11,,1.07727e-15,1.12683e-11,1.50123e-11,
chebyshev interp; GPU Dense Matrix ,72,2.424,4.64768e+06,215.161,8, 1.97268e-11,,1.07601e-15,1.51668e-11,1.97268e-11,
chebyshev interp; GPU Dense Matrix ,76,2.998,4.39178e+06,227.698,8, 2.15301e-11,,1.64825e-15,1.0683e-11,2.15301e-11,
chebyshev interp; GPU Dense Matrix ,80,5.481,6.6234e+06,150.98,8, 1.44651e-11,,1.86167e-15,5.1591e-12,1.44651e-11,
chebyshev interp; GPU Dense Matrix ,84,4.327,7.98508e+06,125.234,8, 1.70226e-11,,1.57412e-15,8.53439e-12,1.70226e-11,
chebyshev interp; GPU Dense Matrix ,88,6.043,7.93772e+06,125.981,8, 2.07517e-11,,1.1441e-15,6.25683e-12,2.07517e-11,
chebyshev interp; GPU Dense Matrix ,92,7.533,8.88829e+06,112.508,8, 2.04663e-11,,1.42935e-15,9.38832e-12,2.04663e-11,
chebyshev interp; GPU Dense Matrix ,96,19.738,1.07746e+07,92.8111,8, 1.29083e-11,,1.14293e-15,1.27357e-11,1.29083e-11,
chebyshev interp; GPU Dense Matrix ,100,10.069,1.21721e+07,82.1553,8, 1.7027e-11,,1.21385e-15,8.51159e-12,1.7027e-11,
chebyshev interp; GPU Dense Matrix ,104,12.05,1.70479e+07,58.6581,8, 2.02949e-11,,1.42753e-15,1.08049e-11,2.02949e-11,
chebyshev interp; GPU Dense Matrix ,108,13.63,1.98379e+07,50.4085,8, 1.60284e-11,,1.28435e-15,7.50797e-12,1.60284e-11,
chebyshev interp; GPU Dense Matrix ,112,24.809,1.94671e+07,51.3688,8, 1.4213e-11,,1.42663e-15,4.51941e-12,1.4213e-11,
chebyshev interp; GPU Dense Matrix ,116,21.645,2.18476e+07,45.7716,8, 1.85999e-11,,8.55752e-16,7.33456e-12,1.85999e-11,
chebyshev interp; GPU Dense Matrix ,120,24.147,2.47692e+07,40.3727,8, 1.95514e-11,,1.28332e-15,1.03684e-11,1.95514e-11,
chebyshev interp; GPU Dense Matrix ,124,30.26,2.88476e+07,34.665,8, 1.35085e-11,,1.14048e-15,1.35085e-11,1.1899e-11,
chebyshev interp; GPU Dense Matrix ,128,69.837,3.68695e+07,27.1227,8, 1.56852e-11,,1.14026e-15,8.61588e-12,1.56852e-11,
chebyshev interp; GPU Dense Matrix ,132,37.173,4.2843e+07,23.341,8, 1.83885e-11,,1.42507e-15,1.07529e-11,1.83885e-11,
chebyshev interp; GPU Dense Matrix ,136,44.854,3.91059e+07,25.5716,8, 1.75402e-11,,1.28235e-15,4.31878e-12,1.75402e-11,
ViennaCL: FATAL ERROR: Kernel start failed for 'assign_cpu'.
ViennaCL: Smaller work sizes could not solve the problem. 
Finished a list.
