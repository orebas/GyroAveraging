Calculator,N,Init time (s), Calc.time(s), Calc.Freq(hz), Bytes, MaxError, FirstBlank, Err1, Err2, Err3, Blank
linear interp; trapezoid rule; CPU ,8,0,1.31955e+07,75.7835,8, 0.354437,,0,0.354437,0.262428,
linear interp; trapezoid rule; CPU ,12,0,2.87594e+07,34.7712,8, 0.202259,,0,0.202259,0.1915,
linear interp; trapezoid rule; CPU ,16,0,5.47914e+07,18.251,8, 0.173084,,0,0.121228,0.173084,
linear interp; trapezoid rule; CPU ,20,0,1.00968e+08,9.90416,8, 0.182386,,0,0.145341,0.182386,
linear interp; trapezoid rule; CPU ,24,0,1.23496e+08,8.09742,8, 0.214882,,0,0.134204,0.214882,
linear interp; trapezoid rule; CPU ,28,0,1.40102e+08,7.13767,8, 0.286404,,0,0.233808,0.286404,
linear interp; trapezoid rule; CPU ,32,0,1.8951e+08,5.27678,8, 0.171849,,0,0.171849,0.116706,
linear interp; trapezoid rule; CPU ,36,0,2.40845e+08,4.15205,8, 0.14482,,0,0.119631,0.14482,
linear interp; trapezoid rule; CPU ,40,0,2.93686e+08,3.40499,8, 0.180114,,0,0.111027,0.180114,
linear interp; trapezoid rule; CPU ,44,0,3.60041e+08,2.77746,8, 0.135712,,0,0.0988487,0.135712,
linear interp; trapezoid rule; CPU ,48,0,4.21298e+08,2.37362,8, 0.153307,,0,0.0826041,0.153307,
linear interp; trapezoid rule; CPU ,52,0,5.04975e+08,1.98029,8, 0.25892,,0,0.184244,0.25892,
linear interp; trapezoid rule; CPU ,56,0,5.68013e+08,1.76052,8, 0.275274,,0,0.114079,0.275274,
linear interp; trapezoid rule; CPU ,60,0,6.57233e+08,1.52153,8, 0.24248,,0,0.107561,0.24248,
linear interp; trapezoid rule; CPU ,64,0,7.59026e+08,1.31748,8, 0.273165,,0,0.108473,0.273165,
linear interp; trapezoid rule; CPU ,68,0,8.49688e+08,1.1769,8, 0.159226,,0,0.0991853,0.159226,
linear interp; trapezoid rule; CPU ,72,0,9.58191e+08,1.04363,8, 0.18753,,0,0.126487,0.18753,
linear interp; trapezoid rule; CPU ,76,0,1.11102e+09,0.900078,8, 0.162204,,0,0.125342,0.162204,
linear interp; trapezoid rule; CPU ,80,0,1.20485e+09,0.829978,8, 0.145981,,0,0.110944,0.145981,
linear interp; trapezoid rule; CPU ,84,0,1.34596e+09,0.742965,8, 0.179509,,0,0.0906642,0.179509,
linear interp; trapezoid rule; CPU ,88,0,1.44337e+09,0.692825,8, 0.19381,,0,0.0871975,0.19381,
linear interp; trapezoid rule; CPU ,92,0,1.60345e+09,0.623655,8, 0.216541,,0,0.0670507,0.216541,
linear interp; trapezoid rule; CPU ,96,0,1.76746e+09,0.565783,8, 0.182969,,0,0.0639251,0.182969,
linear interp; trapezoid rule; CPU ,100,0,1.91082e+09,0.523336,8, 0.214852,,0,0.0650245,0.214852,
linear interp; trapezoid rule; CPU ,104,0,2.08168e+09,0.480381,8, 0.240045,,0,0.075922,0.240045,
linear interp; trapezoid rule; CPU ,108,0,2.28651e+09,0.437348,8, 0.192906,,0,0.0785942,0.192906,
linear interp; trapezoid rule; CPU ,112,0,2.44113e+09,0.409647,8, 0.216649,,0,0.0667837,0.216649,
linear interp; trapezoid rule; CPU ,116,0,2.74325e+09,0.364532,8, 0.185867,,0,0.0611731,0.185867,
linear interp; trapezoid rule; CPU ,120,0,2.81467e+09,0.355282,8, 0.209005,,0,0.0581733,0.209005,
linear interp; trapezoid rule; CPU ,124,0,3.00314e+09,0.332985,8, 0.186675,,0,0.0647783,0.186675,
linear interp; trapezoid rule; CPU ,128,0,3.25236e+09,0.307469,8, 0.257899,,0,0.0689511,0.257899,
linear interp; trapezoid rule; CPU ,132,0,3.43237e+09,0.291344,8, 0.208706,,0,0.04378,0.208706,
linear interp; trapezoid rule; CPU ,136,0,3.67701e+09,0.27196,8, 0.198205,,0,0.046825,0.198205,
linear interp; trapezoid rule; CPU ,140,0,3.86555e+09,0.258695,8, 0.175691,,0,0.0500086,0.175691,
linear interp; trapezoid rule; CPU ,144,0,4.23312e+09,0.236232,8, 0.14531,,0,0.0557825,0.14531,
linear interp; trapezoid rule; CPU ,148,0,4.38371e+09,0.228117,8, 0.135763,,0,0.0543157,0.135763,
linear interp; trapezoid rule; CPU ,152,0,4.62163e+09,0.216374,8, 0.104835,,0,0.0394811,0.104835,
linear interp; trapezoid rule; CPU ,156,0,4.91816e+09,0.203328,8, 0.137854,,0,0.0342722,0.137854,
linear interp; trapezoid rule; CPU ,160,0,5.21334e+09,0.191816,8, 0.15385,,0,0.043186,0.15385,
linear interp; trapezoid rule; CPU ,164,0,5.43202e+09,0.184094,8, 0.183063,,0,0.0381836,0.183063,
linear interp; trapezoid rule; CPU ,168,0,5.7886e+09,0.172753,8, 0.197282,,0,0.0580916,0.197282,
linear interp; trapezoid rule; CPU ,172,0,5.99777e+09,0.166729,8, 0.196076,,0,0.0533418,0.196076,
linear interp; trapezoid rule; CPU ,176,0,6.33752e+09,0.15779,8, 0.199618,,0,0.0430387,0.199618,
linear interp; trapezoid rule; CPU ,180,0,6.6304e+09,0.150821,8, 0.201544,,0,0.0394328,0.201544,
linear interp; trapezoid rule; CPU ,184,0,6.95702e+09,0.14374,8, 0.209358,,0,0.0355497,0.209358,
linear interp; trapezoid rule; CPU ,188,0,7.36103e+09,0.135851,8, 0.154482,,0,0.0320771,0.154482,
linear interp; trapezoid rule; CPU ,192,0,7.85505e+09,0.127307,8, 0.147379,,0,0.0333583,0.147379,
linear interp; trapezoid rule; CPU ,196,0,8.00062e+09,0.12499,8, 0.147904,,0,0.0402689,0.147904,
linear interp; trapezoid rule; CPU ,200,0,8.43667e+09,0.11853,8, 0.160197,,0,0.0464126,0.160197,
linear interp; trapezoid rule; CPU ,204,0,8.6929e+09,0.115036,8, 0.169709,,0,0.0397209,0.169709,
linear interp; trapezoid rule; CPU ,208,0,9.08839e+09,0.110031,8, 0.16459,,0,0.0310903,0.16459,
linear interp; trapezoid rule; CPU ,212,0,9.44682e+09,0.105856,8, 0.164579,,0,0.0300672,0.164579,
linear interp; trapezoid rule; CPU ,216,0,9.80114e+09,0.102029,8, 0.154638,,0,0.030544,0.154638,
linear interp; trapezoid rule; CPU ,220,0,1.0309e+10,0.097003,8, 0.147822,,0,0.0328637,0.147822,
linear interp; trapezoid rule; CPU ,224,0,1.08902e+10,0.0918253,8, 0.135715,,0,0.0336416,0.135715,
linear interp; trapezoid rule; CPU ,228,0,1.10373e+10,0.0906015,8, 0.148484,,0,0.0365058,0.148484,
linear interp; trapezoid rule; CPU ,232,0,1.14576e+10,0.0872785,8, 0.164591,,0,0.0305857,0.164591,
linear interp; trapezoid rule; CPU ,236,0,1.19366e+10,0.0837758,8, 0.16985,,0,0.0276234,0.16985,
linear interp; trapezoid rule; CPU ,240,0,1.2441e+10,0.0803793,8, 0.167871,,0,0.0260168,0.167871,
linear interp; trapezoid rule; CPU ,244,0,1.29875e+10,0.0769971,8, 0.155714,,0,0.0255967,0.155714,
linear interp; trapezoid rule; CPU ,248,0,1.32306e+10,0.0755826,8, 0.163316,,0,0.0264248,0.163316,
linear interp; trapezoid rule; CPU ,252,0,1.45441e+10,0.0687566,8, 0.144893,,0,0.0286469,0.144893,
linear interp; trapezoid rule; CPU ,256,0,1.4543e+10,0.0687614,8, 0.146332,,0,0.0350465,0.146332,
linear interp; CPU Sparse Matrix   ,8,0.001,10815,92464.2,8, 0.686836,,0.686836,0.354747,0.263154,
linear interp; CPU Sparse Matrix   ,12,0.004,30279,33026.2,8, 0.202902,,0.175302,0.202902,0.192191,
linear interp; CPU Sparse Matrix   ,16,0.008,22676,44099.5,8, 0.375455,,0.375455,0.121019,0.172639,
linear interp; CPU Sparse Matrix   ,20,0.015,28751,34781.4,8, 0.182005,,0.160196,0.145191,0.182005,
linear interp; CPU Sparse Matrix   ,24,0.033,32737,30546.5,8, 0.214992,,0.148024,0.133736,0.214992,
linear interp; CPU Sparse Matrix   ,28,0.044,39474,25333.1,8, 0.287412,,0.148834,0.233562,0.287412,
linear interp; CPU Sparse Matrix   ,32,0.063,48805,20489.7,8, 0.17239,,0.131723,0.17239,0.117358,
linear interp; CPU Sparse Matrix   ,36,0.091,68399,14620.1,8, 0.142944,,0.125039,0.119957,0.142944,
linear interp; CPU Sparse Matrix   ,40,0.116,90014,11109.4,8, 0.178882,,0.0598415,0.111662,0.178882,
linear interp; CPU Sparse Matrix   ,44,0.166,122678,8151.42,8, 0.136064,,0.0656391,0.0987311,0.136064,
linear interp; CPU Sparse Matrix   ,48,0.226,143587,6964.42,8, 0.153236,,0.0684288,0.0822067,0.153236,
linear interp; CPU Sparse Matrix   ,52,0.25,165929,6026.67,8, 0.259738,,0.0772318,0.18501,0.259738,
linear interp; CPU Sparse Matrix   ,56,0.3,200940,4976.61,8, 0.275148,,0.0617967,0.115096,0.275148,
linear interp; CPU Sparse Matrix   ,60,0.345,236422,4229.72,8, 0.240457,,0.0624527,0.108266,0.240457,
linear interp; CPU Sparse Matrix   ,64,0.405,358452,2789.77,8, 0.275032,,0.0634738,0.10842,0.275032,
linear interp; CPU Sparse Matrix   ,68,0.421,334411,2990.33,8, 0.158821,,0.0500652,0.0991318,0.158821,
linear interp; CPU Sparse Matrix   ,72,0.523,388289,2575.4,8, 0.188627,,0.0413184,0.126353,0.188627,
linear interp; CPU Sparse Matrix   ,76,0.593,461096,2168.75,8, 0.162075,,0.0500347,0.125775,0.162075,
linear interp; CPU Sparse Matrix   ,80,0.617,621667,1608.58,8, 0.145678,,0.0488162,0.110511,0.145678,
linear interp; CPU Sparse Matrix   ,84,0.774,659393,1516.55,8, 0.179276,,0.03788,0.0917851,0.179276,
linear interp; CPU Sparse Matrix   ,88,0.892,766530,1304.58,8, 0.19437,,0.0494005,0.0862421,0.19437,
linear interp; CPU Sparse Matrix   ,92,0.947,961182,1040.39,8, 0.217512,,0.046359,0.0665572,0.217512,
linear interp; CPU Sparse Matrix   ,96,1.09,1.18822e+06,841.597,8, 0.183198,,0.0288512,0.062856,0.183198,
linear interp; CPU Sparse Matrix   ,100,1.266,1.42911e+06,699.738,8, 0.21597,,0.0326674,0.0644579,0.21597,
linear interp; CPU Sparse Matrix   ,104,1.349,1.79328e+06,557.639,8, 0.243178,,0.0429984,0.0752392,0.243178,
linear interp; CPU Sparse Matrix   ,108,1.485,2.16753e+06,461.355,8, 0.193961,,0.0308183,0.0776043,0.193961,
linear interp; CPU Sparse Matrix   ,112,1.713,2.54244e+06,393.324,8, 0.217658,,0.0285761,0.0678754,0.217658,
linear interp; CPU Sparse Matrix   ,116,1.975,3.15817e+06,316.639,8, 0.185079,,0.0372631,0.0609599,0.185079,
linear interp; CPU Sparse Matrix   ,120,2.185,3.37484e+06,296.311,8, 0.20911,,0.0246609,0.0591077,0.20911,
linear interp; CPU Sparse Matrix   ,124,2.205,3.92602e+06,254.711,8, 0.189979,,0.0308001,0.0637645,0.189979,
linear interp; CPU Sparse Matrix   ,128,2.576,4.47669e+06,223.379,8, 0.253927,,0.0332093,0.0703468,0.253927,
linear interp; CPU Sparse Matrix   ,132,2.803,5.06923e+06,197.269,8, 0.211328,,0.0261126,0.0436281,0.211328,
linear interp; CPU Sparse Matrix   ,136,3.185,5.57521e+06,179.365,8, 0.19753,,0.0252807,0.0459235,0.19753,
linear interp; CPU Sparse Matrix   ,140,3.287,3.58845e+06,278.672,8, 0.175144,,0.0238793,0.05101,0.175144,
linear interp; CPU Sparse Matrix   ,144,3.835,6.45015e+06,155.035,8, 0.145888,,0.0258215,0.0560015,0.145888,
linear interp; CPU Sparse Matrix   ,148,4.02,7.67572e+06,130.281,8, 0.135229,,0.0197979,0.0544663,0.135229,
linear interp; CPU Sparse Matrix   ,152,4.338,7.71666e+06,129.59,8, 0.101579,,0.024583,0.0403913,0.101579,
linear interp; CPU Sparse Matrix   ,156,4.594,8.81946e+06,113.386,8, 0.139381,,0.025077,0.0349809,0.139381,
linear interp; CPU Sparse Matrix   ,160,4.945,9.11783e+06,109.675,8, 0.155703,,0.0179688,0.0421428,0.155703,
linear interp; CPU Sparse Matrix   ,164,4.875,1.02914e+07,97.1684,8, 0.181081,,0.0198757,0.038539,0.181081,
linear interp; CPU Sparse Matrix   ,168,5.702,1.14679e+07,87.1999,8, 0.197461,,0.018667,0.0574578,0.197461,
linear interp; CPU Sparse Matrix   ,172,5.676,1.16195e+07,86.0622,8, 0.192702,,0.021405,0.0526126,0.192702,
linear interp; CPU Sparse Matrix   ,176,6.123,9.63093e+06,103.832,8, 0.199382,,0.0189847,0.0439773,0.199382,
linear interp; CPU Sparse Matrix   ,180,7.416,1.38984e+07,71.9506,8, 0.202105,,0.0235203,0.0405758,0.202105,
linear interp; CPU Sparse Matrix   ,184,7.137,1.45482e+07,68.7369,8, 0.204192,,0.0183872,0.0327029,0.204192,
linear interp; CPU Sparse Matrix   ,188,8.432,1.57711e+07,63.4071,8, 0.1504,,0.0192246,0.0327741,0.1504,
linear interp; CPU Sparse Matrix   ,192,8.276,1.66009e+07,60.2377,8, 0.145441,,0.018472,0.0331008,0.145441,
linear interp; CPU Sparse Matrix   ,196,9.421,1.48527e+07,67.3276,8, 0.149721,,0.0193084,0.039363,0.149721,
linear interp; CPU Sparse Matrix   ,200,8.796,1.83984e+07,54.3525,8, 0.163339,,0.0187305,0.046495,0.163339,
linear interp; CPU Sparse Matrix   ,204,10.316,2.06691e+07,48.3814,8, 0.168403,,0.020393,0.03987,0.168403,
linear interp; CPU Sparse Matrix   ,208,10.106,2.16753e+07,46.1354,8, 0.165873,,0.0185928,0.0309741,0.165873,
linear interp; CPU Sparse Matrix   ,212,11.357,2.32036e+07,43.0968,8, 0.164818,,0.0189027,0.029732,0.164818,
linear interp; CPU Sparse Matrix   ,216,12.618,2.31602e+07,43.1775,8, 0.154695,,0.0186379,0.0303526,0.154695,
linear interp; CPU Sparse Matrix   ,220,13.183,2.59742e+07,38.4998,8, 0.149064,,0.0189086,0.0329707,0.149064,
linear interp; CPU Sparse Matrix   ,224,14.557,2.77367e+07,36.0533,8, 0.133899,,0.0183234,0.0330827,0.133899,
linear interp; CPU Sparse Matrix   ,228,15.13,2.77638e+07,36.0181,8, 0.149867,,0.0181812,0.0385923,0.149867,
linear interp; CPU Sparse Matrix   ,232,16.269,2.90296e+07,34.4476,8, 0.161484,,0.0181776,0.0315155,0.161484,
linear interp; CPU Sparse Matrix   ,236,16.736,3.09334e+07,32.3275,8, 0.169351,,0.0176314,0.0270015,0.169351,
linear interp; CPU Sparse Matrix   ,240,17.402,3.28057e+07,30.4825,8, 0.166576,,0.0177684,0.0258474,0.166576,
linear interp; CPU Sparse Matrix   ,244,18.117,3.4055e+07,29.3642,8, 0.157204,,0.0169312,0.0248219,0.157204,
linear interp; CPU Sparse Matrix   ,248,18.968,3.59193e+07,27.8402,8, 0.160673,,0.0170406,0.0261176,0.160673,
linear interp; CPU Sparse Matrix   ,252,19.924,3.74956e+07,26.6698,8, 0.139317,,0.0163913,0.027343,0.139317,
linear interp; CPU Sparse Matrix   ,256,20.747,3.89362e+07,25.683,8, 0.146008,,0.0170309,0.0357122,0.146008,
linear interp; GPU Sparse Matrix   ,8,0.231,117762,8491.7,8, 0.686836,,0.686836,0.354747,0.263154,
linear interp; GPU Sparse Matrix   ,12,0.007,126920,7878.98,8, 0.202902,,0.175302,0.202902,0.192191,
linear interp; GPU Sparse Matrix   ,16,0.008,108463,9219.73,8, 0.375455,,0.375455,0.121019,0.172639,
linear interp; GPU Sparse Matrix   ,20,0.027,132366,7554.81,8, 0.182005,,0.160196,0.145191,0.182005,
linear interp; GPU Sparse Matrix   ,24,0.045,134720,7422.8,8, 0.214992,,0.148024,0.133736,0.214992,
linear interp; GPU Sparse Matrix   ,28,0.066,150542,6642.66,8, 0.287412,,0.148834,0.233562,0.287412,
linear interp; GPU Sparse Matrix   ,32,0.101,142170,7033.83,8, 0.17239,,0.131723,0.17239,0.117358,
linear interp; GPU Sparse Matrix   ,36,0.134,173064,5778.21,8, 0.142944,,0.125039,0.119957,0.142944,
linear interp; GPU Sparse Matrix   ,40,0.179,191277,5228.02,8, 0.178882,,0.0598415,0.111662,0.178882,
linear interp; GPU Sparse Matrix   ,44,0.244,199220,5019.58,8, 0.136064,,0.0656391,0.0987311,0.136064,
linear interp; GPU Sparse Matrix   ,48,0.315,229702,4353.47,8, 0.153236,,0.0684288,0.0822067,0.153236,
linear interp; GPU Sparse Matrix   ,52,0.382,240354,4160.53,8, 0.259738,,0.0772318,0.18501,0.259738,
linear interp; GPU Sparse Matrix   ,56,0.515,266871,3747.13,8, 0.275148,,0.0617967,0.115096,0.275148,
linear interp; GPU Sparse Matrix   ,60,0.599,288344,3468.08,8, 0.240457,,0.0624527,0.108266,0.240457,
linear interp; GPU Sparse Matrix   ,64,0.652,313513,3189.66,8, 0.275032,,0.0634738,0.10842,0.275032,
linear interp; GPU Sparse Matrix   ,68,0.784,336305,2973.49,8, 0.158821,,0.0500652,0.0991318,0.158821,
linear interp; GPU Sparse Matrix   ,72,0.971,371851,2689.25,8, 0.188627,,0.0413184,0.126353,0.188627,
linear interp; GPU Sparse Matrix   ,76,1.058,405541,2465.84,8, 0.162075,,0.0500347,0.125775,0.162075,
linear interp; GPU Sparse Matrix   ,80,1.27,440427,2270.52,8, 0.145678,,0.0488162,0.110511,0.145678,
linear interp; GPU Sparse Matrix   ,84,1.396,472213,2117.69,8, 0.179276,,0.03788,0.0917851,0.179276,
linear interp; GPU Sparse Matrix   ,88,1.621,516212,1937.19,8, 0.19437,,0.0494005,0.0862421,0.19437,
linear interp; GPU Sparse Matrix   ,92,1.987,560707,1783.46,8, 0.217512,,0.046359,0.0665572,0.217512,
linear interp; GPU Sparse Matrix   ,96,2.159,612701,1632.12,8, 0.183198,,0.0288512,0.062856,0.183198,
linear interp; GPU Sparse Matrix   ,100,2.446,673623,1484.51,8, 0.21597,,0.0326674,0.0644579,0.21597,
linear interp; GPU Sparse Matrix   ,104,2.707,732850,1364.54,8, 0.243178,,0.0429984,0.0752392,0.243178,
linear interp; GPU Sparse Matrix   ,108,2.976,805771,1241.05,8, 0.193961,,0.0308183,0.0776043,0.193961,
linear interp; GPU Sparse Matrix   ,112,3.268,872670,1145.91,8, 0.217658,,0.0285761,0.0678754,0.217658,
linear interp; GPU Sparse Matrix   ,116,3.836,958597,1043.19,8, 0.185079,,0.0372631,0.0609599,0.185079,
linear interp; GPU Sparse Matrix   ,120,4.007,1.03113e+06,969.812,8, 0.20911,,0.0246609,0.0591077,0.20911,
linear interp; GPU Sparse Matrix   ,124,4.548,1.12118e+06,891.921,8, 0.189979,,0.0308001,0.0637645,0.189979,
linear interp; GPU Sparse Matrix   ,128,5.027,1.22755e+06,814.629,8, 0.253927,,0.0332093,0.0703468,0.253927,
linear interp; GPU Sparse Matrix   ,132,5.563,1.39454e+06,717.081,8, 0.211328,,0.0261126,0.0436281,0.211328,
linear interp; GPU Sparse Matrix   ,136,6.189,1.71805e+06,582.057,8, 0.19753,,0.0252807,0.0459235,0.19753,
linear interp; GPU Sparse Matrix   ,140,6.21,1.83121e+06,546.087,8, 0.175144,,0.0238793,0.05101,0.175144,
linear interp; GPU Sparse Matrix   ,144,7.066,1.95358e+06,511.88,8, 0.145888,,0.0258215,0.0560015,0.145888,
linear interp; GPU Sparse Matrix   ,148,7.638,2.10353e+06,475.391,8, 0.135229,,0.0197979,0.0544663,0.135229,
linear interp; GPU Sparse Matrix   ,152,8.526,2.23961e+06,446.507,8, 0.101579,,0.024583,0.0403913,0.101579,
linear interp; GPU Sparse Matrix   ,156,8.691,2.31339e+06,432.266,8, 0.139381,,0.025077,0.0349809,0.139381,
linear interp; GPU Sparse Matrix   ,160,9.89,2.37357e+06,421.306,8, 0.155703,,0.0179688,0.0421428,0.155703,
linear interp; GPU Sparse Matrix   ,164,10.213,2.45475e+06,407.373,8, 0.181081,,0.0198757,0.038539,0.181081,
linear interp; GPU Sparse Matrix   ,168,11.011,2.69382e+06,371.22,8, 0.197461,,0.018667,0.0574578,0.197461,
linear interp; GPU Sparse Matrix   ,172,12.264,3.03299e+06,329.708,8, 0.192702,,0.021405,0.0526126,0.192702,
linear interp; GPU Sparse Matrix   ,176,12.567,3.22206e+06,310.361,8, 0.199382,,0.0189847,0.0439773,0.199382,
linear interp; GPU Sparse Matrix   ,180,13.764,3.3521e+06,298.32,8, 0.202105,,0.0235203,0.0405758,0.202105,
linear interp; GPU Sparse Matrix   ,184,14.639,3.60087e+06,277.711,8, 0.204192,,0.0183872,0.0327029,0.204192,
linear interp; GPU Sparse Matrix   ,188,16.678,4.00889e+06,249.446,8, 0.1504,,0.0192246,0.0327741,0.1504,
linear interp; GPU Sparse Matrix   ,192,16.632,4.15801e+06,240.5,8, 0.145441,,0.018472,0.0331008,0.145441,
linear interp; GPU Sparse Matrix   ,196,17.698,4.43821e+06,225.316,8, 0.149721,,0.0193084,0.039363,0.149721,
linear interp; GPU Sparse Matrix   ,200,18.6,4.69535e+06,212.977,8, 0.163339,,0.0187305,0.046495,0.163339,
linear interp; GPU Sparse Matrix   ,204,20.663,4.88068e+06,204.889,8, 0.168403,,0.020393,0.03987,0.168403,
linear interp; GPU Sparse Matrix   ,208,21.963,5.04924e+06,198.05,8, 0.165873,,0.0185928,0.0309741,0.165873,
linear interp; GPU Sparse Matrix   ,212,23.33,5.56398e+06,179.727,8, 0.164818,,0.0189027,0.029732,0.164818,
linear interp; GPU Sparse Matrix   ,216,24.954,5.98703e+06,167.028,8, 0.154695,,0.0186379,0.0303526,0.154695,
linear interp; GPU Sparse Matrix   ,220,25.151,6.44779e+06,155.092,8, 0.149064,,0.0189086,0.0329707,0.149064,
linear interp; GPU Sparse Matrix   ,224,30.522,6.68424e+06,149.606,8, 0.133899,,0.0183234,0.0330827,0.133899,
linear interp; GPU Sparse Matrix   ,228,29.685,7.26728e+06,137.603,8, 0.149867,,0.0181812,0.0385923,0.149867,
linear interp; GPU Sparse Matrix   ,232,29.662,8.56117e+06,116.806,8, 0.161484,,0.0181776,0.0315155,0.161484,
linear interp; GPU Sparse Matrix   ,236,33.184,8.69829e+06,114.965,8, 0.169351,,0.0176314,0.0270015,0.169351,
linear interp; GPU Sparse Matrix   ,240,34.62,9.16603e+06,109.098,8, 0.166576,,0.0177684,0.0258474,0.166576,
linear interp; GPU Sparse Matrix   ,244,34.637,8.16477e+06,122.477,8, 0.157204,,0.0169312,0.0248219,0.157204,
linear interp; GPU Sparse Matrix   ,248,38.063,8.5427e+06,117.059,8, 0.160673,,0.0170406,0.0261176,0.160673,
linear interp; GPU Sparse Matrix   ,252,42.008,9.42329e+06,106.12,8, 0.139317,,0.0163913,0.027343,0.139317,
linear interp; GPU Sparse Matrix   ,256,40.108,9.77018e+06,102.352,8, 0.146008,,0.0170309,0.0357122,0.146008,
bicubic interp; trapezoid rule; CPU,8,0,1.11447e+07,89.7287,8, 0.314675,,0,0.314675,0.302905,
bicubic interp; trapezoid rule; CPU,12,0,2.89884e+07,34.4965,8, 0.215702,,0,0.150222,0.215702,
bicubic interp; trapezoid rule; CPU,16,0,5.49961e+07,18.1831,8, 0.153856,,0,0.14857,0.153856,
bicubic interp; trapezoid rule; CPU,20,0,8.3183e+07,12.0217,8, 0.234612,,0,0.132872,0.234612,
bicubic interp; trapezoid rule; CPU,24,0,1.2303e+08,8.12807,8, 0.202003,,0,0.149164,0.202003,
bicubic interp; trapezoid rule; CPU,28,0,1.42927e+08,6.99659,8, 0.320438,,0,0.207616,0.320438,
bicubic interp; trapezoid rule; CPU,32,0,1.89873e+08,5.26669,8, 0.194776,,0,0.1686,0.194776,
bicubic interp; trapezoid rule; CPU,36,0,2.38944e+08,4.18508,8, 0.158272,,0,0.139975,0.158272,
bicubic interp; trapezoid rule; CPU,40,0,2.92341e+08,3.42067,8, 0.18267,,0,0.109854,0.18267,
bicubic interp; trapezoid rule; CPU,44,0,3.57197e+08,2.79957,8, 0.204408,,0,0.0975043,0.204408,
bicubic interp; trapezoid rule; CPU,48,0,4.4316e+08,2.25652,8, 0.147723,,0,0.0741993,0.147723,
bicubic interp; trapezoid rule; CPU,52,0,5.11307e+08,1.95577,8, 0.214015,,0,0.160238,0.214015,
bicubic interp; trapezoid rule; CPU,56,0,5.9137e+08,1.69099,8, 0.231382,,0,0.0958598,0.231382,
bicubic interp; trapezoid rule; CPU,60,0,6.8488e+08,1.46011,8, 0.210611,,0,0.0864904,0.210611,
bicubic interp; trapezoid rule; CPU,64,0,8.24089e+08,1.21346,8, 0.226006,,0,0.0705203,0.226006,
bicubic interp; trapezoid rule; CPU,68,0,9.12249e+08,1.09619,8, 0.134482,,0,0.0764565,0.134482,
bicubic interp; trapezoid rule; CPU,72,0,1.00462e+09,0.995401,8, 0.169935,,0,0.0816484,0.169935,
bicubic interp; trapezoid rule; CPU,76,0,1.11934e+09,0.893385,8, 0.125175,,0,0.0657907,0.125175,
bicubic interp; trapezoid rule; CPU,80,0,1.31986e+09,0.757657,8, 0.106389,,0,0.0583034,0.106389,
bicubic interp; trapezoid rule; CPU,84,0,1.40488e+09,0.711806,8, 0.118953,,0,0.0518621,0.118953,
bicubic interp; trapezoid rule; CPU,88,0,1.50669e+09,0.663707,8, 0.153819,,0,0.0691484,0.153819,
bicubic interp; trapezoid rule; CPU,92,0,1.7258e+09,0.579441,8, 0.120181,,0,0.0540221,0.120181,
bicubic interp; trapezoid rule; CPU,96,0,1.88254e+09,0.531196,8, 0.105289,,0,0.0500934,0.105289,
bicubic interp; trapezoid rule; CPU,100,0,1.98015e+09,0.505013,8, 0.129232,,0,0.0469306,0.129232,
bicubic interp; trapezoid rule; CPU,104,0,2.23104e+09,0.448221,8, 0.138332,,0,0.041342,0.138332,
bicubic interp; trapezoid rule; CPU,108,0,2.33284e+09,0.428662,8, 0.0769737,,0,0.0366474,0.0769737,
bicubic interp; trapezoid rule; CPU,112,0,2.61581e+09,0.38229,8, 0.0906701,,0,0.0350571,0.0906701,
bicubic interp; trapezoid rule; CPU,116,0,2.84974e+09,0.350909,8, 0.0809522,,0,0.0444389,0.0809522,
bicubic interp; trapezoid rule; CPU,120,0,2.9898e+09,0.33447,8, 0.116058,,0,0.0479381,0.116058,
bicubic interp; trapezoid rule; CPU,124,0,3.18987e+09,0.313493,8, 0.0904967,,0,0.0466218,0.0904967,
bicubic interp; trapezoid rule; CPU,128,0.002,3.43161e+09,0.291408,8, 0.169134,,0,0.0502771,0.169134,
bicubic interp; trapezoid rule; CPU,132,0,3.59145e+09,0.278439,8, 0.12729,,0,0.0234993,0.12729,
bicubic interp; trapezoid rule; CPU,136,0.001,4.02744e+09,0.248297,8, 0.109698,,0,0.0234265,0.109698,
bicubic interp; trapezoid rule; CPU,140,0.003,4.35116e+09,0.229824,8, 0.0940641,,0,0.0228161,0.0940641,
bicubic interp; trapezoid rule; CPU,144,0.004,4.44567e+09,0.224938,8, 0.0739866,,0,0.0279565,0.0739866,
bicubic interp; trapezoid rule; CPU,148,0.004,4.78848e+09,0.208835,8, 0.073606,,0,0.0348605,0.073606,
bicubic interp; trapezoid rule; CPU,152,0.006,4.99264e+09,0.200295,8, 0.0535612,,0,0.0246544,0.0535612,
bicubic interp; trapezoid rule; CPU,156,0.007,5.13381e+09,0.194787,8, 0.0650895,,0,0.0242244,0.0650895,
bicubic interp; trapezoid rule; CPU,160,0.007,5.44966e+09,0.183498,8, 0.0619894,,0,0.0160412,0.0619894,
bicubic interp; trapezoid rule; CPU,164,0.003,5.76933e+09,0.17333,8, 0.0712831,,0,0.0185935,0.0712831,
bicubic interp; trapezoid rule; CPU,168,0.003,5.96502e+09,0.167644,8, 0.10225,,0,0.0227689,0.10225,
bicubic interp; trapezoid rule; CPU,172,0.001,6.46608e+09,0.154653,8, 0.100485,,0,0.0258942,0.100485,
bicubic interp; trapezoid rule; CPU,176,0.001,6.61416e+09,0.151191,8, 0.0943036,,0,0.0238931,0.0943036,
bicubic interp; trapezoid rule; CPU,180,0.003,7.0157e+09,0.142537,8, 0.105234,,0,0.0252218,0.105234,
bicubic interp; trapezoid rule; CPU,184,0.001,7.28059e+09,0.137352,8, 0.107549,,0,0.0213414,0.107549,
bicubic interp; trapezoid rule; CPU,188,0.003,7.66438e+09,0.130474,8, 0.0741457,,0,0.0143976,0.0741457,
bicubic interp; trapezoid rule; CPU,192,0.002,8.05651e+09,0.124123,8, 0.0600799,,0,0.0131335,0.0600799,
bicubic interp; trapezoid rule; CPU,196,0.004,8.41736e+09,0.118802,8, 0.0460809,,0,0.014758,0.0460809,
bicubic interp; trapezoid rule; CPU,200,0.004,8.81401e+09,0.113456,8, 0.0689545,,0,0.0149307,0.0689545,
bicubic interp; trapezoid rule; CPU,204,0.004,9.14305e+09,0.109373,8, 0.0716701,,0,0.0168903,0.0716701,
bicubic interp; trapezoid rule; CPU,208,0.004,9.56036e+09,0.104599,8, 0.065714,,0,0.0189101,0.065714,
bicubic interp; trapezoid rule; CPU,212,0.004,1.01331e+10,0.0986869,8, 0.0653518,,0,0.0140231,0.0653518,
bicubic interp; trapezoid rule; CPU,216,0.005,1.04136e+10,0.0960281,8, 0.0759617,,0,0.0165286,0.0759617,
bicubic interp; trapezoid rule; CPU,220,0.006,1.07727e+10,0.092827,8, 0.0648911,,0,0.0124419,0.0648911,
bicubic interp; trapezoid rule; CPU,224,0.006,1.1254e+10,0.0888573,8, 0.0571165,,0,0.016628,0.0571165,
bicubic interp; trapezoid rule; CPU,228,0.003,1.15248e+10,0.0867694,8, 0.0660574,,0,0.0189421,0.0660574,
bicubic interp; trapezoid rule; CPU,232,0.003,1.21816e+10,0.0820912,8, 0.0591511,,0,0.0157332,0.0591511,
bicubic interp; trapezoid rule; CPU,236,0.003,1.25969e+10,0.0793849,8, 0.0582044,,0,0.0172798,0.0582044,
bicubic interp; trapezoid rule; CPU,240,0.003,1.29054e+10,0.0774868,8, 0.054933,,0,0.0133828,0.054933,
bicubic interp; trapezoid rule; CPU,244,0.003,1.3452e+10,0.0743383,8, 0.0579619,,0,0.010995,0.0579619,
bicubic interp; trapezoid rule; CPU,248,0.003,1.40435e+10,0.0712072,8, 0.0596763,,0,0.00957051,0.0596763,
bicubic interp; trapezoid rule; CPU,252,0.004,1.43183e+10,0.0698409,8, 0.0450957,,0,0.00986011,0.0450957,
bicubic interp; trapezoid rule; CPU,256,0.003,1.50689e+10,0.0663618,8, 0.0473827,,0,0.0120355,0.0473827,
bicubic interp; CPU Sparse Matrix  ,8,0.003,82191,12166.8,8, 0.314675,,1.12544e-11,0.314675,0.302905,
bicubic interp; CPU Sparse Matrix  ,12,0.009,134460,7437.16,8, 0.215702,,2.14474e-11,0.150222,0.215702,
bicubic interp; CPU Sparse Matrix  ,16,0.015,201645,4959.21,8, 0.153856,,9.93864e-11,0.14857,0.153856,
bicubic interp; CPU Sparse Matrix  ,20,0.033,320415,3120.95,8, 0.234612,,1.57643e-10,0.132872,0.234612,
bicubic interp; CPU Sparse Matrix  ,24,0.055,472717,2115.43,8, 0.202003,,6.6461e-10,0.149164,0.202003,
bicubic interp; CPU Sparse Matrix  ,28,0.079,685861,1458.02,8, 0.320438,,6.92348e-09,0.207616,0.320438,
bicubic interp; CPU Sparse Matrix  ,32,0.111,873168,1145.25,8, 0.194776,,8.18303e-09,0.1686,0.194776,
bicubic interp; CPU Sparse Matrix  ,36,0.157,1.23584e+06,809.169,8, 0.158272,,2.0294e-08,0.139975,0.158272,
bicubic interp; CPU Sparse Matrix  ,40,0.2,1.52188e+06,657.082,8, 0.18267,,7.88117e-09,0.109854,0.18267,
bicubic interp; CPU Sparse Matrix  ,44,0.273,1.94199e+06,514.935,8, 0.204408,,4.71353e-08,0.0975043,0.204408,
bicubic interp; CPU Sparse Matrix  ,48,0.37,2.57095e+06,388.961,8, 0.147723,,5.8208e-08,0.0741993,0.147723,
bicubic interp; CPU Sparse Matrix  ,52,0.417,3.17629e+06,314.832,8, 0.214015,,1.47041e-07,0.160238,0.214015,
bicubic interp; CPU Sparse Matrix  ,56,0.498,4.48282e+06,223.074,8, 0.231382,,1.47739e-07,0.0958598,0.231382,
bicubic interp; CPU Sparse Matrix  ,60,0.674,5.54612e+06,180.306,8, 0.21061,,4.32189e-07,0.0864904,0.21061,
bicubic interp; CPU Sparse Matrix  ,64,0.802,6.71935e+06,148.824,8, 0.226007,,6.88808e-07,0.0705203,0.226007,
bicubic interp; CPU Sparse Matrix  ,68,0.907,8.04099e+06,124.363,8, 0.134483,,1.114e-06,0.0764565,0.134483,
bicubic interp; CPU Sparse Matrix  ,72,1.185,9.55894e+06,104.614,8, 0.169933,,1.5979e-06,0.0816484,0.169933,
bicubic interp; CPU Sparse Matrix  ,76,1.442,1.19946e+07,83.3709,8, 0.125171,,2.11659e-06,0.0657911,0.125171,
bicubic interp; CPU Sparse Matrix  ,80,1.663,1.3458e+07,74.3053,8, 0.106388,,2.30497e-06,0.0583033,0.106388,
bicubic interp; CPU Sparse Matrix  ,84,1.792,1.47585e+07,67.7574,8, 0.118961,,3.22862e-06,0.0518622,0.118961,
bicubic interp; CPU Sparse Matrix  ,88,2.084,1.66723e+07,59.9798,8, 0.153816,,8.66745e-06,0.0691482,0.153816,
bicubic interp; CPU Sparse Matrix  ,92,2.583,1.97681e+07,50.5867,8, 0.120197,,7.03079e-06,0.054022,0.120197,
bicubic interp; CPU Sparse Matrix  ,96,2.883,2.08815e+07,47.8892,8, 0.105291,,1.13642e-05,0.0500935,0.105291,
bicubic interp; CPU Sparse Matrix  ,100,3.262,2.40271e+07,41.6197,8, 0.129221,,1.22732e-05,0.0469298,0.129221,
bicubic interp; CPU Sparse Matrix  ,104,3.681,2.7075e+07,36.9344,8, 0.138317,,1.75193e-05,0.0413427,0.138317,
bicubic interp; CPU Sparse Matrix  ,108,4.213,3.15846e+07,31.661,8, 0.0769985,,1.71211e-05,0.0366463,0.0769985,
bicubic interp; CPU Sparse Matrix  ,112,4.551,3.29923e+07,30.3101,8, 0.0906569,,2.0169e-05,0.035057,0.0906569,
bicubic interp; CPU Sparse Matrix  ,116,5.398,3.66915e+07,27.2543,8, 0.0810607,,3.19755e-05,0.0444385,0.0810607,
bicubic interp; CPU Sparse Matrix  ,120,6.049,4.17035e+07,23.9788,8, 0.116022,,4.97899e-05,0.0479379,0.116022,
bicubic interp; CPU Sparse Matrix  ,124,7.303,4.54842e+07,21.9857,8, 0.0905855,,4.63228e-05,0.0466214,0.0905855,
bicubic interp; CPU Sparse Matrix  ,128,7.348,5.09994e+07,19.6081,8, 0.169106,,4.59123e-05,0.0502781,0.169106,
bicubic interp; CPU Sparse Matrix  ,132,8.086,5.55559e+07,17.9999,8, 0.12716,,6.26349e-05,0.0235024,0.12716,
bicubic interp; CPU Sparse Matrix  ,136,8.812,5.97181e+07,16.7453,8, 0.109613,,9.63728e-05,0.0234252,0.109613,
bicubic interp; CPU Sparse Matrix  ,140,9.354,6.51802e+07,15.3421,8, 0.0940602,,8.8528e-05,0.0227902,0.0940602,
bicubic interp; CPU Sparse Matrix  ,144,10.986,6.9711e+07,14.3449,8, 0.0738769,,0.000139446,0.0279561,0.0738769,
bicubic interp; CPU Sparse Matrix  ,148,11.896,7.46783e+07,13.3908,8, 0.0736491,,0.000151387,0.0348597,0.0736491,
bicubic interp; CPU Sparse Matrix  ,152,13.022,7.9175e+07,12.6302,8, 0.0539467,,0.000156483,0.0246534,0.0539467,
bicubic interp; CPU Sparse Matrix  ,156,13.918,8.52323e+07,11.7326,8, 0.0651215,,0.000168947,0.0242192,0.0651215,
bicubic interp; CPU Sparse Matrix  ,160,15.074,9.11663e+07,10.969,8, 0.0622227,,0.000258918,0.0159984,0.0622227,
bicubic interp; CPU Sparse Matrix  ,164,16.313,1.15352e+08,8.66914,8, 0.0710499,,0.000293641,0.0191195,0.0710499,
bicubic interp; CPU Sparse Matrix  ,168,17.587,1.05278e+08,9.49863,8, 0.103074,,0.000542813,0.0228951,0.103074,
bicubic interp; CPU Sparse Matrix  ,172,18.572,1.25202e+08,7.98707,8, 0.100285,,0.000277399,0.0258303,0.100285,
bicubic interp; CPU Sparse Matrix  ,176,19.871,1.20366e+08,8.30798,8, 0.0945716,,0.000428152,0.0239331,0.0945716,
bicubic interp; CPU Sparse Matrix  ,180,22.998,1.41737e+08,7.05531,8, 0.105888,,0.000419841,0.0251665,0.105888,
bicubic interp; CPU Sparse Matrix  ,184,24.074,1.39369e+08,7.17517,8, 0.107507,,0.000570652,0.020899,0.107507,
bicubic interp; CPU Sparse Matrix  ,188,25.531,1.42436e+08,7.02072,8, 0.0741322,,0.000699508,0.0223632,0.0741322,
bicubic interp; CPU Sparse Matrix  ,192,27.586,1.72405e+08,5.8003,8, 0.0606105,,0.000702626,0.0200527,0.0606105,
bicubic interp; CPU Sparse Matrix  ,196,29.32,1.57274e+08,6.35834,8, 0.0466028,,0.000776766,0.0365763,0.0466028,
bicubic interp; CPU Sparse Matrix  ,200,30.028,1.58044e+08,6.32733,8, 0.069323,,0.000811776,0.0276755,0.069323,
bicubic interp; CPU Sparse Matrix  ,204,32.342,1.90779e+08,5.24168,8, 0.072653,,0.00105485,0.0346031,0.072653,
bicubic interp; CPU Sparse Matrix  ,208,34.496,2.02242e+08,4.94458,8, 0.0675025,,0.00120148,0.0445481,0.0675025,
bicubic interp; CPU Sparse Matrix  ,212,35.768,2.05506e+08,4.86604,8, 0.0653839,,0.00126471,0.048196,0.0653839,
bicubic interp; CPU Sparse Matrix  ,216,38.325,2.18461e+08,4.57748,8, 0.0767132,,0.00168856,0.0538588,0.0767132,
bicubic interp; CPU Sparse Matrix  ,220,42.086,2.36202e+08,4.23367,8, 0.0704397,,0.00169834,0.0544852,0.0704397,
bicubic interp; CPU Sparse Matrix  ,224,45.523,2.60257e+08,3.84236,8, 0.0832262,,0.00207846,0.0832262,0.0633401,
bicubic interp; CPU Sparse Matrix  ,228,47.389,2.78766e+08,3.58724,8, 0.0900108,,0.00205756,0.0900108,0.0716266,
bicubic interp; CPU Sparse Matrix  ,232,49.584,2.98662e+08,3.34826,8, 0.0755892,,0.00211818,0.067049,0.0755892,
bicubic interp; CPU Sparse Matrix  ,236,52.283,3.10538e+08,3.22021,8, 0.0789444,,0.00308872,0.0770123,0.0789444,
bicubic interp; CPU Sparse Matrix  ,240,55.176,3.36001e+08,2.97618,8, 0.14401,,0.00324785,0.14401,0.092221,
bicubic interp; CPU Sparse Matrix  ,244,57.503,3.5704e+08,2.80081,8, 0.0919688,,0.00320322,0.0757879,0.0919688,
bicubic interp; CPU Sparse Matrix  ,248,59.859,3.38881e+08,2.95089,8, 0.100755,,0.00368916,0.100755,0.100386,
bicubic interp; CPU Sparse Matrix  ,252,62.499,3.93079e+08,2.54402,8, 0.161894,,0.00478714,0.122013,0.161894,
bicubic interp; CPU Sparse Matrix  ,256,65.684,4.11353e+08,2.431,8, 0.134513,,0.0049572,0.134513,0.130625,
bicubic interp; GPU Sparse Matrix  ,8,0.023,167165,5982.11,8, 0.314675,,1.38842e-11,0.314675,0.302905,
bicubic interp; GPU Sparse Matrix  ,12,0.025,201552,4961.5,8, 0.215702,,3.56033e-11,0.150222,0.215702,
bicubic interp; GPU Sparse Matrix  ,16,0.077,356811,2802.6,8, 0.153856,,1.14328e-10,0.14857,0.153856,
bicubic interp; GPU Sparse Matrix  ,20,0.135,502343,1990.67,8, 0.234612,,1.89855e-10,0.132872,0.234612,
bicubic interp; GPU Sparse Matrix  ,24,0.174,663208,1507.82,8, 0.202003,,8.44515e-10,0.149164,0.202003,
bicubic interp; GPU Sparse Matrix  ,28,0.297,868975,1150.78,8, 0.320438,,6.30503e-09,0.207616,0.320438,
bicubic interp; GPU Sparse Matrix  ,32,0.458,1.05462e+06,948.208,8, 0.194776,,1.1195e-08,0.1686,0.194776,
bicubic interp; GPU Sparse Matrix  ,36,0.611,1.37892e+06,725.204,8, 0.158272,,2.44956e-08,0.139975,0.158272,
bicubic interp; GPU Sparse Matrix  ,40,0.848,1.6294e+06,613.721,8, 0.18267,,9.28586e-09,0.109854,0.18267,
bicubic interp; GPU Sparse Matrix  ,44,1.095,1.91153e+06,523.142,8, 0.204408,,5.92963e-08,0.0975043,0.204408,
bicubic interp; GPU Sparse Matrix  ,48,1.493,2.26061e+06,442.359,8, 0.147723,,7.76077e-08,0.0741993,0.147723,
bicubic interp; GPU Sparse Matrix  ,52,1.829,2.77449e+06,360.426,8, 0.214015,,1.42043e-07,0.160238,0.214015,
bicubic interp; GPU Sparse Matrix  ,56,2.264,3.13151e+06,319.335,8, 0.231382,,1.94143e-07,0.0958598,0.231382,
bicubic interp; GPU Sparse Matrix  ,60,3.444,3.68561e+06,271.325,8, 0.21061,,4.51514e-07,0.0864904,0.21061,
bicubic interp; GPU Sparse Matrix  ,64,3.485,4.0089e+06,249.445,8, 0.226007,,5.29982e-07,0.0705203,0.226007,
bicubic interp; GPU Sparse Matrix  ,68,3.978,4.33771e+06,230.536,8, 0.134482,,1.36768e-06,0.0764565,0.134482,
bicubic interp; GPU Sparse Matrix  ,72,5.139,5.56196e+06,179.793,8, 0.169933,,2.19905e-06,0.0816484,0.169933,
bicubic interp; GPU Sparse Matrix  ,76,5.947,5.60274e+06,178.484,8, 0.125171,,2.38305e-06,0.0657911,0.125171,
bicubic interp; GPU Sparse Matrix  ,80,8.356,6.43636e+06,155.367,8, 0.106386,,2.73657e-06,0.0583033,0.106386,
bicubic interp; GPU Sparse Matrix  ,84,8.04,6.5e+06,153.846,8, 0.118961,,3.85895e-06,0.0518622,0.118961,
bicubic interp; GPU Sparse Matrix  ,88,9.582,7.0762e+06,141.319,8, 0.153816,,1.12619e-05,0.0691482,0.153816,
bicubic interp; GPU Sparse Matrix  ,92,11.135,8.06174e+06,124.043,8, 0.120198,,8.43567e-06,0.054022,0.120198,
bicubic interp; GPU Sparse Matrix  ,96,12.745,8.56481e+06,116.757,8, 0.105291,,1.26952e-05,0.0500935,0.105291,
bicubic interp; GPU Sparse Matrix  ,100,13.944,9.41076e+06,106.261,8, 0.12922,,1.22489e-05,0.0469298,0.12922,
bicubic interp; GPU Sparse Matrix  ,104,16.178,1.44381e+07,69.2612,8, 0.138317,,2.05591e-05,0.0413427,0.138317,
bicubic interp; GPU Sparse Matrix  ,108,18.496,1.13505e+07,88.1018,8, 0.0770013,,1.91454e-05,0.0366463,0.0770013,
bicubic interp; GPU Sparse Matrix  ,112,22.899,1.33501e+07,74.9058,8, 0.0906559,,2.11168e-05,0.0350573,0.0906559,
bicubic interp; GPU Sparse Matrix  ,116,24.854,1.42955e+07,69.9522,8, 0.0810666,,3.40156e-05,0.0444385,0.0810666,
bicubic interp; GPU Sparse Matrix  ,120,25.461,1.44242e+07,69.3279,8, 0.116021,,4.69775e-05,0.0479379,0.116021,
bicubic interp; GPU Sparse Matrix  ,124,29.389,1.55786e+07,64.1907,8, 0.0905851,,5.37386e-05,0.0466214,0.0905851,
bicubic interp; GPU Sparse Matrix  ,128,36.594,1.78254e+07,56.0999,8, 0.169104,,4.34511e-05,0.0502781,0.169104,
bicubic interp; GPU Sparse Matrix  ,132,35.859,1.89586e+07,52.7464,8, 0.127161,,5.78457e-05,0.0235023,0.127161,
bicubic interp; GPU Sparse Matrix  ,136,35.851,1.99623e+07,50.0945,8, 0.109616,,0.000109934,0.0234254,0.109616,
bicubic interp; GPU Sparse Matrix  ,140,40.11,2.6457e+07,37.7972,8, 0.0940581,,9.20561e-05,0.02279,0.0940581,
bicubic interp; GPU Sparse Matrix  ,144,46.763,2.30992e+07,43.2915,8, 0.0738752,,0.000131233,0.0279561,0.0738752,
bicubic interp; GPU Sparse Matrix  ,148,46.253,2.40686e+07,41.5479,8, 0.0736432,,0.000143469,0.0348597,0.0736432,
bicubic interp; GPU Sparse Matrix  ,152,54.218,2.61872e+07,38.1865,8, 0.0539635,,0.000175997,0.0246532,0.0539635,
bicubic interp; GPU Sparse Matrix  ,156,56.906,2.75751e+07,36.2646,8, 0.0651162,,0.000197609,0.0242187,0.0651162,
bicubic interp; GPU Sparse Matrix  ,160,68.737,3.48445e+07,28.6989,8, 0.0621863,,0.000282466,0.0159977,0.0621863,
bicubic interp; GPU Sparse Matrix  ,164,67.702,3.20222e+07,31.2284,8, 0.0710483,,0.000293076,0.0191216,0.0710483,
bicubic interp; GPU Sparse Matrix  ,168,75.307,3.38606e+07,29.5328,8, 0.103095,,0.000559106,0.0228797,0.103095,
bicubic interp; GPU Sparse Matrix  ,172,79.125,3.5479e+07,28.1857,8, 0.100138,,0.000313187,0.0258307,0.100138,
bicubic interp; GPU Sparse Matrix  ,176,85.448,3.75206e+07,26.652,8, 0.0945425,,0.000542474,0.0239293,0.0945425,
bicubic interp; GPU Sparse Matrix  ,180,93.113,4.1063e+07,24.3528,8, 0.105744,,0.000464496,0.0251663,0.105744,
bicubic interp; GPU Sparse Matrix  ,184,99.751,4.6056e+07,21.7127,8, 0.107655,,0.000560191,0.020869,0.107655,
bicubic interp; GPU Sparse Matrix  ,188,123.824,4.49669e+07,22.2386,8, 0.0740018,,0.000701621,0.0223646,0.0740018,
bicubic interp; GPU Sparse Matrix  ,192,149.451,4.90304e+07,20.3955,8, 0.0605567,,0.000637721,0.0200422,0.0605567,
bicubic interp; GPU Sparse Matrix  ,196,144.702,5.46864e+07,18.2861,8, 0.0465673,,0.000637398,0.0365879,0.0465673,
bicubic interp; GPU Sparse Matrix  ,200,145.49,5.30882e+07,18.8366,8, 0.0693753,,0.000731513,0.02768,0.0693753,
bicubic interp; GPU Sparse Matrix  ,204,143.91,5.54611e+07,18.0306,8, 0.0725903,,0.00119675,0.034587,0.0725903,
bicubic interp; GPU Sparse Matrix  ,208,178.26,5.88031e+07,17.0059,8, 0.0674704,,0.0017721,0.044559,0.0674704,
bicubic interp; GPU Sparse Matrix  ,212,183.336,6.15768e+07,16.2399,8, 0.0653704,,0.00122886,0.048164,0.0653704,
bicubic interp; GPU Sparse Matrix  ,216,171.436,6.52075e+07,15.3357,8, 0.0766153,,0.00183107,0.0538688,0.0766153,
bicubic interp; GPU Sparse Matrix  ,220,179.378,6.84611e+07,14.6068,8, 0.0704414,,0.00212723,0.0544859,0.0704414,
Finished a list.
DCT+Bessel+IDCT                    ,8,0.001,5322,187899,8, 0.708889,,1.30373e-16,0.350585,0.708889,
DCT+Bessel+IDCT                    ,12,0.003,23149,43198.4,8, 0.840769,,1.81088e-16,0.152803,0.840769,
DCT+Bessel+IDCT                    ,16,0.003,36609,27315.7,8, 1.03887,,2.77086e-16,0.268408,1.03887,
DCT+Bessel+IDCT                    ,20,0.013,47170,21199.9,8, 0.988471,,2.89695e-16,0.298787,0.988471,
DCT+Bessel+IDCT                    ,24,0.015,89797,11136.2,8, 1.1207,,2.41618e-16,0.282428,1.1207,
DCT+Bessel+IDCT                    ,28,0.011,114562,8728.9,8, 1.05162,,2.9986e-16,0.422903,1.05162,
DCT+Bessel+IDCT                    ,32,0.007,72742,13747.2,8, 1.10184,,2.77387e-16,0.320396,1.10184,
DCT+Bessel+IDCT                    ,36,0.015,107321,9317.84,8, 1.16847,,4.17157e-16,0.306118,1.16847,
DCT+Bessel+IDCT                    ,40,0.019,134102,7457.01,8, 1.06367,,2.9519e-16,0.281339,1.06367,
DCT+Bessel+IDCT                    ,44,0.016,210971,4739.99,8, 1.17458,,3.03162e-16,0.336096,1.17458,
DCT+Bessel+IDCT                    ,48,0.024,203141,4922.69,8, 1.14681,,3.83552e-16,0.337663,1.14681,
DCT+Bessel+IDCT                    ,52,0.015,252533,3959.88,8, 1.07898,,5.10056e-16,0.297403,1.07898,
DCT+Bessel+IDCT                    ,56,0.021,270486,3697.05,8, 1.11381,,2.66332e-16,0.346809,1.11381,
DCT+Bessel+IDCT                    ,60,0.035,286386,3491.79,8, 1.13947,,4.25314e-16,0.316771,1.13947,
DCT+Bessel+IDCT                    ,64,0.021,267390,3739.86,8, 1.14972,,2.5966e-16,0.314118,1.14972,
DCT+Bessel+IDCT                    ,68,0.043,625171,1599.56,8, 1.16624,,4.23154e-16,0.312721,1.16624,
DCT+Bessel+IDCT                    ,72,0.038,403198,2480.17,8, 1.20812,,4.05801e-16,0.299932,1.20812,
DCT+Bessel+IDCT                    ,76,0.048,832537,1201.15,8, 1.16791,,4.97914e-16,0.318872,1.16791,
DCT+Bessel+IDCT                    ,80,0.043,505279,1979.1,8, 1.20845,,4.01848e-16,0.31499,1.20845,
DCT+Bessel+IDCT                    ,84,0.039,590036,1694.81,8, 1.17837,,3.88639e-16,0.325177,1.17837,
DCT+Bessel+IDCT                    ,88,0.035,749416,1334.37,8, 1.18908,,4.06901e-16,0.308829,1.18908,
DCT+Bessel+IDCT                    ,92,0.052,1.20491e+06,829.935,8, 1.22712,,4.81121e-16,0.32531,1.22712,
DCT+Bessel+IDCT                    ,96,0.051,806039,1240.63,8, 1.20491,,4.13727e-16,0.329473,1.20491,
DCT+Bessel+IDCT                    ,100,0.058,883128,1132.34,8, 1.20245,,5.32356e-16,0.336605,1.20245,
DCT+Bessel+IDCT                    ,104,0.049,1.09905e+06,909.878,8, 1.20327,,3.77029e-16,0.29654,1.20327,
DCT+Bessel+IDCT                    ,108,0.055,982367,1017.95,8, 1.20438,,5.14587e-16,0.324267,1.20438,
DCT+Bessel+IDCT                    ,112,0.058,1.11214e+06,899.17,8, 1.21003,,3.95874e-16,0.305918,1.21003,
DCT+Bessel+IDCT                    ,116,0.071,2.05674e+06,486.206,8, 1.20378,,5.06463e-16,0.305991,1.20378,
DCT+Bessel+IDCT                    ,120,0.078,1.07113e+06,933.594,8, 1.17504,,3.99391e-16,0.30643,1.17504,
DCT+Bessel+IDCT                    ,124,0.074,2.53619e+06,394.292,8, 1.16521,,5.02346e-16,0.308415,1.16521,
DCT+Bessel+IDCT                    ,128,0.079,1.51295e+06,660.96,8, 1.14771,,4.38887e-16,0.296394,1.14771,
DCT+Bessel+IDCT                    ,132,0.069,1.72488e+06,579.751,8, 1.15485,,3.80078e-16,0.301766,1.15485,
DCT+Bessel+IDCT                    ,136,0.108,2.31376e+06,432.196,8, 1.17098,,4.28388e-16,0.30399,1.17098,
DCT+Bessel+IDCT                    ,140,0.081,1.75248e+06,570.622,8, 1.23928,,3.82153e-16,0.307823,1.23928,
DCT+Bessel+IDCT                    ,144,0.084,1.71838e+06,581.943,8, 1.23977,,3.9545e-16,0.312305,1.23977,
DCT+Bessel+IDCT                    ,148,0.102,3.86988e+06,258.406,8, 1.25883,,5.84234e-16,0.311725,1.25883,
DCT+Bessel+IDCT                    ,152,0.111,2.92263e+06,342.157,8, 1.23895,,5.40996e-16,0.306918,1.23895,
DCT+Bessel+IDCT                    ,156,0.081,2.0538e+06,486.902,8, 1.24795,,3.93253e-16,0.321967,1.24795,
DCT+Bessel+IDCT                    ,160,0.104,2.01008e+06,497.493,8, 1.2562,,3.85106e-16,0.313302,1.2562,
DCT+Bessel+IDCT                    ,164,0.127,4.83092e+06,207,8, 1.21801,,5.30867e-16,0.30854,1.21801,
DCT+Bessel+IDCT                    ,168,0.096,2.38918e+06,418.554,8, 1.20743,,3.87256e-16,0.302198,1.20743,
DCT+Bessel+IDCT                    ,172,0.137,5.72136e+06,174.783,8, 1.19856,,6.48768e-16,0.302401,1.19856,
DCT+Bessel+IDCT                    ,176,0.113,2.79646e+06,357.595,8, 1.19482,,3.79011e-16,0.303088,1.19482,
DCT+Bessel+IDCT                    ,180,0.123,2.61786e+06,381.992,8, 1.18851,,5.51998e-16,0.300218,1.18851,
DCT+Bessel+IDCT                    ,184,0.136,4.56128e+06,219.237,8, 1.22193,,5.05647e-16,0.301286,1.22193,
DCT+Bessel+IDCT                    ,188,0.141,7.277e+06,137.419,8, 1.2407,,7.8597e-16,0.303775,1.2407,
DCT+Bessel+IDCT                    ,192,0.112,3.0441e+06,328.504,8, 1.22757,,3.75281e-16,0.303749,1.22757,
DCT+Bessel+IDCT                    ,196,0.109,3.59215e+06,278.385,8, 1.22056,,3.90872e-16,0.302175,1.22056,
DCT+Bessel+IDCT                    ,200,0.125,3.11348e+06,321.184,8, 1.20093,,3.78731e-16,0.304581,1.20093,
DCT+Bessel+IDCT                    ,204,0.175,4.99315e+06,200.274,8, 1.20698,,5.45124e-16,0.302549,1.20698,
DCT+Bessel+IDCT                    ,208,0.115,3.86654e+06,258.629,8, 1.20584,,5.0335e-16,0.307907,1.20584,
DCT+Bessel+IDCT                    ,212,0.166,1.06372e+07,94.0101,8, 1.21147,,6.42865e-16,0.306252,1.21147,
DCT+Bessel+IDCT                    ,216,0.139,3.88956e+06,257.098,8, 1.22837,,6.38108e-16,0.30416,1.22837,
DCT+Bessel+IDCT                    ,220,0.141,4.53051e+06,220.726,8, 1.25891,,3.91633e-16,0.300564,1.25891,
DCT+Bessel+IDCT                    ,224,0.128,4.47824e+06,223.302,8, 1.25621,,5.10909e-16,0.300823,1.25621,
DCT+Bessel+IDCT                    ,228,0.194,6.64316e+06,150.531,8, 1.23704,,5.12491e-16,0.302964,1.23704,
DCT+Bessel+IDCT                    ,232,0.172,8.14849e+06,122.722,8, 1.22512,,5.18577e-16,0.300338,1.22512,
DCT+Bessel+IDCT                    ,236,0.201,1.35717e+07,73.6825,8, 1.21846,,5.73278e-16,0.300179,1.21846,
DCT+Bessel+IDCT                    ,240,0.151,4.80247e+06,208.226,8, 1.22421,,3.90548e-16,0.302275,1.22421,
DCT+Bessel+IDCT                    ,244,0.213,1.46805e+07,68.1175,8, 1.22375,,6.92369e-16,0.302823,1.22375,
DCT+Bessel+IDCT                    ,248,0.199,1.01212e+07,98.8021,8, 1.23678,,5.78986e-16,0.302656,1.23678,
DCT+Bessel+IDCT                    ,252,0.161,6.15128e+06,162.568,8, 1.25339,,5.03027e-16,0.303926,1.25339,
DCT+Bessel+IDCT                    ,256,0.158,5.56492e+06,179.697,8, 1.27387,,3.98526e-16,0.30683,1.27387,
DCT+Bessel+IDCT; on padded grid    ,8,0,85861,11646.7,8, 0.379921,,2.60747e-16,0.345157,0.379921,
DCT+Bessel+IDCT; on padded grid    ,12,0.001,123507,8096.71,8, 0.248808,,3.62176e-16,0.154882,0.248808,
DCT+Bessel+IDCT; on padded grid    ,16,0.002,205961,4855.29,8, 0.200248,,2.77086e-16,0.161622,0.200248,
DCT+Bessel+IDCT; on padded grid    ,20,0.005,360627,2772.95,8, 0.248848,,4.34543e-16,0.149978,0.248848,
DCT+Bessel+IDCT; on padded grid    ,24,0.008,389413,2567.97,8, 0.224024,,3.22157e-16,0.15593,0.224024,
DCT+Bessel+IDCT; on padded grid    ,28,0.009,616449,1622.19,8, 0.34619,,2.70297e-16,0.218171,0.34619,
DCT+Bessel+IDCT; on padded grid    ,32,0.015,737339,1356.23,8, 0.197399,,2.77387e-16,0.17613,0.197399,
DCT+Bessel+IDCT; on padded grid    ,36,0.018,1.06046e+06,942.984,8, 0.163149,,4.17157e-16,0.135663,0.163149,
DCT+Bessel+IDCT; on padded grid    ,40,0.019,1.14988e+06,869.654,8, 0.185766,,2.9519e-16,0.110693,0.185766,
DCT+Bessel+IDCT; on padded grid    ,44,0.027,1.91776e+06,521.441,8, 0.226893,,3.03162e-16,0.11786,0.226893,
DCT+Bessel+IDCT; on padded grid    ,48,0.035,1.58057e+06,632.684,8, 0.157956,,2.55701e-16,0.0812298,0.157956,
DCT+Bessel+IDCT; on padded grid    ,52,0.038,2.20529e+06,453.455,8, 0.229316,,3.40038e-16,0.181639,0.229316,
DCT+Bessel+IDCT; on padded grid    ,56,0.051,2.51163e+06,398.148,8, 0.229332,,2.66332e-16,0.0834469,0.229332,
DCT+Bessel+IDCT; on padded grid    ,60,0.04,2.5873e+06,386.503,8, 0.212339,,2.83543e-16,0.0839545,0.212339,
DCT+Bessel+IDCT; on padded grid    ,64,0.062,3.29221e+06,303.748,8, 0.234444,,2.5966e-16,0.0743036,0.234444,
DCT+Bessel+IDCT; on padded grid    ,68,0.067,5.76393e+06,173.493,8, 0.140474,,2.82103e-16,0.0870025,0.140474,
DCT+Bessel+IDCT; on padded grid    ,72,0.066,4.30534e+06,232.27,8, 0.191175,,5.41068e-16,0.0757968,0.191175,
DCT+Bessel+IDCT; on padded grid    ,76,0.071,7.04121e+06,142.021,8, 0.136767,,3.18665e-16,0.0692902,0.136767,
DCT+Bessel+IDCT; on padded grid    ,80,0.078,4.95074e+06,201.99,8, 0.0843785,,4.01848e-16,0.0601989,0.0843785,
DCT+Bessel+IDCT; on padded grid    ,84,0.085,6.62637e+06,150.912,8, 0.110107,,3.88639e-16,0.0557618,0.110107,
DCT+Bessel+IDCT; on padded grid    ,88,0.165,6.97022e+06,143.468,8, 0.139695,,4.06901e-16,0.0717628,0.139695,
DCT+Bessel+IDCT; on padded grid    ,92,0.221,1.08942e+07,91.792,8, 0.103209,,4.12389e-16,0.0641246,0.103209,
DCT+Bessel+IDCT; on padded grid    ,96,0.172,7.63737e+06,130.935,8, 0.0943966,,5.51636e-16,0.0574508,0.0943966,
DCT+Bessel+IDCT; on padded grid    ,100,0.192,8.00132e+06,124.979,8, 0.116396,,3.99267e-16,0.0518509,0.116396,
DCT+Bessel+IDCT; on padded grid    ,104,0.129,9.44863e+06,105.835,8, 0.124255,,4.52435e-16,0.0450082,0.124255,
DCT+Bessel+IDCT; on padded grid    ,108,0.129,1.12428e+07,88.9456,8, 0.0662712,,3.8594e-16,0.0380743,0.0662712,
DCT+Bessel+IDCT; on padded grid    ,112,0.236,1.13162e+07,88.3686,8, 0.0728926,,3.95874e-16,0.0352903,0.0728926,
DCT+Bessel+IDCT; on padded grid    ,116,0.288,1.95433e+07,51.1684,8, 0.0699577,,2.53232e-16,0.0450672,0.0699577,
DCT+Bessel+IDCT; on padded grid    ,120,0.234,1.27132e+07,78.6584,8, 0.108816,,2.66261e-16,0.0432442,0.108816,
DCT+Bessel+IDCT; on padded grid    ,124,0.309,2.43328e+07,41.0969,8, 0.0982506,,3.7676e-16,0.0505519,0.0982506,
DCT+Bessel+IDCT; on padded grid    ,128,0.239,1.37728e+07,72.6067,8, 0.166322,,2.92591e-16,0.0510088,0.166322,
DCT+Bessel+IDCT; on padded grid    ,132,0.28,1.75329e+07,57.0358,8, 0.131969,,3.80078e-16,0.0266701,0.131969,
DCT+Bessel+IDCT; on padded grid    ,136,0.385,2.36314e+07,42.3166,8, 0.115323,,3.2717e-16,0.0255305,0.115323,
DCT+Bessel+IDCT; on padded grid    ,140,0.302,1.89566e+07,52.752,8, 0.103591,,3.82153e-16,0.0266176,0.103591,
DCT+Bessel+IDCT; on padded grid    ,144,0.282,1.91134e+07,52.3194,8, 0.0863124,,5.27266e-16,0.029449,0.0863124,
DCT+Bessel+IDCT; on padded grid    ,148,0.408,3.86186e+07,25.8942,8, 0.0791395,,3.8949e-16,0.0326374,0.0791395,
DCT+Bessel+IDCT; on padded grid    ,152,0.448,3.26055e+07,30.6697,8, 0.0568412,,4.05747e-16,0.0295443,0.0568412,
DCT+Bessel+IDCT; on padded grid    ,156,0.333,2.57313e+07,38.8632,8, 0.0813362,,3.93253e-16,0.0249806,0.0813362,
DCT+Bessel+IDCT; on padded grid    ,160,0.331,2.40569e+07,41.5681,8, 0.0673834,,3.85106e-16,0.0178323,0.0673834,
DCT+Bessel+IDCT; on padded grid    ,164,0.476,5.04548e+07,19.8197,8, 0.0629516,,5.30867e-16,0.0207651,0.0629516,
DCT+Bessel+IDCT; on padded grid    ,168,0.372,2.89584e+07,34.5323,8, 0.080348,,3.87256e-16,0.0217031,0.080348,
DCT+Bessel+IDCT; on padded grid    ,172,0.539,5.923e+07,16.8833,8, 0.0819782,,3.89261e-16,0.0230679,0.0819782,
DCT+Bessel+IDCT; on padded grid    ,176,0.433,3.30818e+07,30.2281,8, 0.0801454,,3.79011e-16,0.0235839,0.0801454,
DCT+Bessel+IDCT; on padded grid    ,180,0.341,3.23458e+07,30.9159,8, 0.0897569,,4.13999e-16,0.0242125,0.0897569,
DCT+Bessel+IDCT; on padded grid    ,184,0.594,5.22763e+07,19.1291,8, 0.0963032,,5.05647e-16,0.0215945,0.0963032,
DCT+Bessel+IDCT; on padded grid    ,188,0.646,7.12772e+07,14.0297,8, 0.0603941,,3.92985e-16,0.0145956,0.0603941,
DCT+Bessel+IDCT; on padded grid    ,192,0.443,3.64666e+07,27.4224,8, 0.0570859,,5.00375e-16,0.0131099,0.0570859,
DCT+Bessel+IDCT; on padded grid    ,196,0.434,4.14961e+07,24.0986,8, 0.038716,,3.90872e-16,0.0158425,0.038716,
DCT+Bessel+IDCT; on padded grid    ,200,0.46,4.04855e+07,24.7002,8, 0.056857,,3.78731e-16,0.0169403,0.056857,
DCT+Bessel+IDCT; on padded grid    ,204,0.599,5.966e+07,16.7616,8, 0.0589637,,4.08843e-16,0.0158447,0.0589637,
DCT+Bessel+IDCT; on padded grid    ,208,0.558,4.66364e+07,21.4425,8, 0.0581779,,3.77513e-16,0.0140567,0.0581779,
DCT+Bessel+IDCT; on padded grid    ,212,0.714,9.75463e+07,10.2515,8, 0.0596879,,5.14292e-16,0.013321,0.0596879,
DCT+Bessel+IDCT; on padded grid    ,216,0.531,4.82181e+07,20.7391,8, 0.0684686,,5.10486e-16,0.0161662,0.0684686,
DCT+Bessel+IDCT; on padded grid    ,220,0.645,5.47958e+07,18.2496,8, 0.0649497,,3.91633e-16,0.0147047,0.0649497,
DCT+Bessel+IDCT; on padded grid    ,224,0.649,5.11925e+07,19.5341,8, 0.0497364,,3.83182e-16,0.0152791,0.0497364,
DCT+Bessel+IDCT; on padded grid    ,228,0.838,7.67547e+07,13.0285,8, 0.0558602,,5.12491e-16,0.0200941,0.0558602,
DCT+Bessel+IDCT; on padded grid    ,232,0.833,8.75894e+07,11.4169,8, 0.046751,,3.88933e-16,0.0164603,0.046751,
DCT+Bessel+IDCT; on padded grid    ,236,0.979,1.35323e+08,7.38975,8, 0.043041,,6.36976e-16,0.0148509,0.043041,
DCT+Bessel+IDCT; on padded grid    ,240,0.616,5.79317e+07,17.2617,8, 0.041204,,5.20731e-16,0.0125533,0.041204,
DCT+Bessel+IDCT; on padded grid    ,244,1.054,1.48516e+08,6.73329,8, 0.0448437,,5.03541e-16,0.012083,0.0448437,
DCT+Bessel+IDCT; on padded grid    ,248,0.892,1.06288e+08,9.40844,8, 0.0493616,,5.14654e-16,0.0101721,0.0493616,
DCT+Bessel+IDCT; on padded grid    ,252,0.823,7.1186e+07,14.0477,8, 0.0331927,,5.03027e-16,0.00993437,0.0331927,
DCT+Bessel+IDCT; on padded grid    ,256,0.784,7.10616e+07,14.0723,8, 0.0399532,,5.31368e-16,0.0112098,0.0399532,
Build Status = -2 ( Err = -9999 )
Log: 

Sources: #pragma OPENCL EXTENSION cl_khr_fp64 : enable

__kernel void am_cpu( 
  __global double * A, 
  unsigned int A_start1, unsigned int A_start2, 
  unsigned int A_inc1,   unsigned int A_inc2, 
  unsigned int A_size1,  unsigned int A_size2, 
  unsigned int A_internal_size1,  unsigned int A_internal_size2, 
  double fac2, 
  unsigned int options2, 
  __global const double * B, 
  unsigned int B_start1, unsigned int B_start2, 
  unsigned int B_inc1,   unsigned int B_inc2, 
  unsigned int B_internal_size1,  unsigned int B_internal_size2) { 
  double alpha = fac2; 
  if (options2 & (1 << 0)) 
    alpha = -alpha; 
 
  if (options2 & (1 << 1)) { 
  unsigned int row_gid = get_global_id(0) / get_local_size(0);
  unsigned int col_gid = get_global_id(0) % get_local_size(0);
  for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
    for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
      A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] = B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)] / alpha ; 
  } else { 
  unsigned int row_gid = get_global_id(0) / get_local_size(0);
  unsigned int col_gid = get_global_id(0) % get_local_size(0);
  for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
    for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
      A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] = B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)] * alpha ; 
  } 
} 
__kernel void am_gpu( 
  __global double * A, 
  unsigned int A_start1, unsigned int A_start2, 
  unsigned int A_inc1,   unsigned int A_inc2, 
  unsigned int A_size1,  unsigned int A_size2, 
  unsigned int A_internal_size1,  unsigned int A_internal_size2, 
  __global double * fac2, 
  unsigned int options2, 
  __global const double * B, 
  unsigned int B_start1, unsigned int B_start2, 
  unsigned int B_inc1,   unsigned int B_inc2, 
  unsigned int B_internal_size1,  unsigned int B_internal_size2) { 
  double alpha = fac2[0]; 
  if (options2 & (1 << 0)) 
    alpha = -alpha; 
 
  if (options2 & (1 << 1)) { 
  unsigned int row_gid = get_global_id(0) / get_local_size(0);
  unsigned int col_gid = get_global_id(0) % get_local_size(0);
  for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
    for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
      A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] = B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)] / alpha ; 
  } else { 
  unsigned int row_gid = get_global_id(0) / get_local_size(0);
  unsigned int col_gid = get_global_id(0) % get_local_size(0);
  for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
    for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
      A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] = B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)] * alpha ; 
  } 
} 
__kernel void ambm_cpu_cpu( 
  __global double * A, 
  unsigned int A_start1, unsigned int A_start2, 
  unsigned int A_inc1,   unsigned int A_inc2, 
  unsigned int A_size1,  unsigned int A_size2, 
  unsigned int A_internal_size1,  unsigned int A_internal_size2, 
  double fac2, 
  unsigned int options2, 
  __global const double * B, 
  unsigned int B_start1, unsigned int B_start2, 
  unsigned int B_inc1,   unsigned int B_inc2, 
  unsigned int B_internal_size1,  unsigned int B_internal_size2, 

  double fac3, 
  unsigned int options3, 
  __global const double * C, 
  unsigned int C_start1, unsigned int C_start2, 
  unsigned int C_inc1,   unsigned int C_inc2, 
  unsigned int C_internal_size1,  unsigned int C_internal_size2 
) { 
  double alpha = fac2; 
  if (options2 & (1 << 0)) 
    alpha = -alpha; 
 
  double beta = fac3; 
  if (options3 & (1 << 0)) 
    beta = -beta; 
 
  if (options2 & (1 << 1)) { 
    if (options3 & (1 << 1)) {
  unsigned int row_gid = get_global_id(0) / get_local_size(0);
  unsigned int col_gid = get_global_id(0) % get_local_size(0);
  for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
    for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
      A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] = B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)] / alpha + C[(row * C_inc1 + C_start1) * C_internal_size2 + (col * C_inc2 + C_start2)] / beta; 
    } else {
  unsigned int row_gid = get_global_id(0) / get_local_size(0);
  unsigned int col_gid = get_global_id(0) % get_local_size(0);
  for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
    for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
      A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] = B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)] / alpha + C[(row * C_inc1 + C_start1) * C_internal_size2 + (col * C_inc2 + C_start2)] * beta; 
    } 
  } else { 
    if (options3 & (1 << 1)) {
  unsigned int row_gid = get_global_id(0) / get_local_size(0);
  unsigned int col_gid = get_global_id(0) % get_local_size(0);
  for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
    for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
      A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] = B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)] * alpha + C[(row * C_inc1 + C_start1) * C_internal_size2 + (col * C_inc2 + C_start2)] / beta; 
    } else {
  unsigned int row_gid = get_global_id(0) / get_local_size(0);
  unsigned int col_gid = get_global_id(0) % get_local_size(0);
  for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
    for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
      A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] = B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)] * alpha + C[(row * C_inc1 + C_start1) * C_internal_size2 + (col * C_inc2 + C_start2)] * beta; 
    } 
  } 
} 
__kernel void ambm_cpu_gpu( 
  __global double * A, 
  unsigned int A_start1, unsigned int A_start2, 
  unsigned int A_inc1,   unsigned int A_inc2, 
  unsigned int A_size1,  unsigned int A_size2, 
  unsigned int A_internal_size1,  unsigned int A_internal_size2, 
  double fac2, 
  unsigned int options2, 
  __global const double * B, 
  unsigned int B_start1, unsigned int B_start2, 
  unsigned int B_inc1,   unsigned int B_inc2, 
  unsigned int B_internal_size1,  unsigned int B_internal_size2, 

  __global double * fac3, 
  unsigned int options3, 
  __global const double * C, 
  unsigned int C_start1, unsigned int C_start2, 
  unsigned int C_inc1,   unsigned int C_inc2, 
  unsigned int C_internal_size1,  unsigned int C_internal_size2 
) { 
  double alpha = fac2; 
  if (options2 & (1 << 0)) 
    alpha = -alpha; 
 
  double beta = fac3[0]; 
  if (options3 & (1 << 0)) 
    beta = -beta; 
 
  if (options2 & (1 << 1)) { 
    if (options3 & (1 << 1)) {
  unsigned int row_gid = get_global_id(0) / get_local_size(0);
  unsigned int col_gid = get_global_id(0) % get_local_size(0);
  for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
    for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
      A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] = B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)] / alpha + C[(row * C_inc1 + C_start1) * C_internal_size2 + (col * C_inc2 + C_start2)] / beta; 
    } else {
  unsigned int row_gid = get_global_id(0) / get_local_size(0);
  unsigned int col_gid = get_global_id(0) % get_local_size(0);
  for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
    for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
      A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] = B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)] / alpha + C[(row * C_inc1 + C_start1) * C_internal_size2 + (col * C_inc2 + C_start2)] * beta; 
    } 
  } else { 
    if (options3 & (1 << 1)) {
  unsigned int row_gid = get_global_id(0) / get_local_size(0);
  unsigned int col_gid = get_global_id(0) % get_local_size(0);
  for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
    for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
      A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] = B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)] * alpha + C[(row * C_inc1 + C_start1) * C_internal_size2 + (col * C_inc2 + C_start2)] / beta; 
    } else {
  unsigned int row_gid = get_global_id(0) / get_local_size(0);
  unsigned int col_gid = get_global_id(0) % get_local_size(0);
  for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
    for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
      A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] = B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)] * alpha + C[(row * C_inc1 + C_start1) * C_internal_size2 + (col * C_inc2 + C_start2)] * beta; 
    } 
  } 
} 
__kernel void ambm_gpu_cpu( 
  __global double * A, 
  unsigned int A_start1, unsigned int A_start2, 
  unsigned int A_inc1,   unsigned int A_inc2, 
  unsigned int A_size1,  unsigned int A_size2, 
  unsigned int A_internal_size1,  unsigned int A_internal_size2, 
  __global double * fac2, 
  unsigned int options2, 
  __global const double * B, 
  unsigned int B_start1, unsigned int B_start2, 
  unsigned int B_inc1,   unsigned int B_inc2, 
  unsigned int B_internal_size1,  unsigned int B_internal_size2, 

  double fac3, 
  unsigned int options3, 
  __global const double * C, 
  unsigned int C_start1, unsigned int C_start2, 
  unsigned int C_inc1,   unsigned int C_inc2, 
  unsigned int C_internal_size1,  unsigned int C_internal_size2 
) { 
  double alpha = fac2[0]; 
  if (options2 & (1 << 0)) 
    alpha = -alpha; 
 
  double beta = fac3; 
  if (options3 & (1 << 0)) 
    beta = -beta; 
 
  if (options2 & (1 << 1)) { 
    if (options3 & (1 << 1)) {
  unsigned int row_gid = get_global_id(0) / get_local_size(0);
  unsigned int col_gid = get_global_id(0) % get_local_size(0);
  for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
    for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
      A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] = B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)] / alpha + C[(row * C_inc1 + C_start1) * C_internal_size2 + (col * C_inc2 + C_start2)] / beta; 
    } else {
  unsigned int row_gid = get_global_id(0) / get_local_size(0);
  unsigned int col_gid = get_global_id(0) % get_local_size(0);
  for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
    for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
      A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] = B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)] / alpha + C[(row * C_inc1 + C_start1) * C_internal_size2 + (col * C_inc2 + C_start2)] * beta; 
    } 
  } else { 
    if (options3 & (1 << 1)) {
  unsigned int row_gid = get_global_id(0) / get_local_size(0);
  unsigned int col_gid = get_global_id(0) % get_local_size(0);
  for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
    for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
      A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] = B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)] * alpha + C[(row * C_inc1 + C_start1) * C_internal_size2 + (col * C_inc2 + C_start2)] / beta; 
    } else {
  unsigned int row_gid = get_global_id(0) / get_local_size(0);
  unsigned int col_gid = get_global_id(0) % get_local_size(0);
  for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
    for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
      A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] = B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)] * alpha + C[(row * C_inc1 + C_start1) * C_internal_size2 + (col * C_inc2 + C_start2)] * beta; 
    } 
  } 
} 
__kernel void ambm_gpu_gpu( 
  __global double * A, 
  unsigned int A_start1, unsigned int A_start2, 
  unsigned int A_inc1,   unsigned int A_inc2, 
  unsigned int A_size1,  unsigned int A_size2, 
  unsigned int A_internal_size1,  unsigned int A_internal_size2, 
  __global double * fac2, 
  unsigned int options2, 
  __global const double * B, 
  unsigned int B_start1, unsigned int B_start2, 
  unsigned int B_inc1,   unsigned int B_inc2, 
  unsigned int B_internal_size1,  unsigned int B_internal_size2, 

  __global double * fac3, 
  unsigned int options3, 
  __global const double * C, 
  unsigned int C_start1, unsigned int C_start2, 
  unsigned int C_inc1,   unsigned int C_inc2, 
  unsigned int C_internal_size1,  unsigned int C_internal_size2 
) { 
  double alpha = fac2[0]; 
  if (options2 & (1 << 0)) 
    alpha = -alpha; 
 
  double beta = fac3[0]; 
  if (options3 & (1 << 0)) 
    beta = -beta; 
 
  if (options2 & (1 << 1)) { 
    if (options3 & (1 << 1)) {
  unsigned int row_gid = get_global_id(0) / get_local_size(0);
  unsigned int col_gid = get_global_id(0) % get_local_size(0);
  for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
    for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
      A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] = B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)] / alpha + C[(row * C_inc1 + C_start1) * C_internal_size2 + (col * C_inc2 + C_start2)] / beta; 
    } else {
  unsigned int row_gid = get_global_id(0) / get_local_size(0);
  unsigned int col_gid = get_global_id(0) % get_local_size(0);
  for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
    for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
      A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] = B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)] / alpha + C[(row * C_inc1 + C_start1) * C_internal_size2 + (col * C_inc2 + C_start2)] * beta; 
    } 
  } else { 
    if (options3 & (1 << 1)) {
  unsigned int row_gid = get_global_id(0) / get_local_size(0);
  unsigned int col_gid = get_global_id(0) % get_local_size(0);
  for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
    for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
      A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] = B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)] * alpha + C[(row * C_inc1 + C_start1) * C_internal_size2 + (col * C_inc2 + C_start2)] / beta; 
    } else {
  unsigned int row_gid = get_global_id(0) / get_local_size(0);
  unsigned int col_gid = get_global_id(0) % get_local_size(0);
  for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
    for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
      A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] = B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)] * alpha + C[(row * C_inc1 + C_start1) * C_internal_size2 + (col * C_inc2 + C_start2)] * beta; 
    } 
  } 
} 
__kernel void ambm_m_cpu_cpu( 
  __global double * A, 
  unsigned int A_start1, unsigned int A_start2, 
  unsigned int A_inc1,   unsigned int A_inc2, 
  unsigned int A_size1,  unsigned int A_size2, 
  unsigned int A_internal_size1,  unsigned int A_internal_size2, 
  double fac2, 
  unsigned int options2, 
  __global const double * B, 
  unsigned int B_start1, unsigned int B_start2, 
  unsigned int B_inc1,   unsigned int B_inc2, 
  unsigned int B_internal_size1,  unsigned int B_internal_size2, 

  double fac3, 
  unsigned int options3, 
  __global const double * C, 
  unsigned int C_start1, unsigned int C_start2, 
  unsigned int C_inc1,   unsigned int C_inc2, 
  unsigned int C_internal_size1,  unsigned int C_internal_size2 
) { 
  double alpha = fac2; 
  if (options2 & (1 << 0)) 
    alpha = -alpha; 
 
  double beta = fac3; 
  if (options3 & (1 << 0)) 
    beta = -beta; 
 
  if (options2 & (1 << 1)) { 
    if (options3 & (1 << 1)) {
  unsigned int row_gid = get_global_id(0) / get_local_size(0);
  unsigned int col_gid = get_global_id(0) % get_local_size(0);
  for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
    for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
      A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] += B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)] / alpha + C[(row * C_inc1 + C_start1) * C_internal_size2 + (col * C_inc2 + C_start2)] / beta; 
    } else {
  unsigned int row_gid = get_global_id(0) / get_local_size(0);
  unsigned int col_gid = get_global_id(0) % get_local_size(0);
  for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
    for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
      A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] += B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)] / alpha + C[(row * C_inc1 + C_start1) * C_internal_size2 + (col * C_inc2 + C_start2)] * beta; 
    } 
  } else { 
    if (options3 & (1 << 1)) {
  unsigned int row_gid = get_global_id(0) / get_local_size(0);
  unsigned int col_gid = get_global_id(0) % get_local_size(0);
  for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
    for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
      A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] += B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)] * alpha + C[(row * C_inc1 + C_start1) * C_internal_size2 + (col * C_inc2 + C_start2)] / beta; 
    } else {
  unsigned int row_gid = get_global_id(0) / get_local_size(0);
  unsigned int col_gid = get_global_id(0) % get_local_size(0);
  for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
    for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
      A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] += B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)] * alpha + C[(row * C_inc1 + C_start1) * C_internal_size2 + (col * C_inc2 + C_start2)] * beta; 
    } 
  } 
} 
__kernel void ambm_m_cpu_gpu( 
  __global double * A, 
  unsigned int A_start1, unsigned int A_start2, 
  unsigned int A_inc1,   unsigned int A_inc2, 
  unsigned int A_size1,  unsigned int A_size2, 
  unsigned int A_internal_size1,  unsigned int A_internal_size2, 
  double fac2, 
  unsigned int options2, 
  __global const double * B, 
  unsigned int B_start1, unsigned int B_start2, 
  unsigned int B_inc1,   unsigned int B_inc2, 
  unsigned int B_internal_size1,  unsigned int B_internal_size2, 

  __global double * fac3, 
  unsigned int options3, 
  __global const double * C, 
  unsigned int C_start1, unsigned int C_start2, 
  unsigned int C_inc1,   unsigned int C_inc2, 
  unsigned int C_internal_size1,  unsigned int C_internal_size2 
) { 
  double alpha = fac2; 
  if (options2 & (1 << 0)) 
    alpha = -alpha; 
 
  double beta = fac3[0]; 
  if (options3 & (1 << 0)) 
    beta = -beta; 
 
  if (options2 & (1 << 1)) { 
    if (options3 & (1 << 1)) {
  unsigned int row_gid = get_global_id(0) / get_local_size(0);
  unsigned int col_gid = get_global_id(0) % get_local_size(0);
  for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
    for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
      A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] += B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)] / alpha + C[(row * C_inc1 + C_start1) * C_internal_size2 + (col * C_inc2 + C_start2)] / beta; 
    } else {
  unsigned int row_gid = get_global_id(0) / get_local_size(0);
  unsigned int col_gid = get_global_id(0) % get_local_size(0);
  for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
    for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
      A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] += B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)] / alpha + C[(row * C_inc1 + C_start1) * C_internal_size2 + (col * C_inc2 + C_start2)] * beta; 
    } 
  } else { 
    if (options3 & (1 << 1)) {
  unsigned int row_gid = get_global_id(0) / get_local_size(0);
  unsigned int col_gid = get_global_id(0) % get_local_size(0);
  for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
    for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
      A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] += B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)] * alpha + C[(row * C_inc1 + C_start1) * C_internal_size2 + (col * C_inc2 + C_start2)] / beta; 
    } else {
  unsigned int row_gid = get_global_id(0) / get_local_size(0);
  unsigned int col_gid = get_global_id(0) % get_local_size(0);
  for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
    for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
      A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] += B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)] * alpha + C[(row * C_inc1 + C_start1) * C_internal_size2 + (col * C_inc2 + C_start2)] * beta; 
    } 
  } 
} 
__kernel void ambm_m_gpu_cpu( 
  __global double * A, 
  unsigned int A_start1, unsigned int A_start2, 
  unsigned int A_inc1,   unsigned int A_inc2, 
  unsigned int A_size1,  unsigned int A_size2, 
  unsigned int A_internal_size1,  unsigned int A_internal_size2, 
  __global double * fac2, 
  unsigned int options2, 
  __global const double * B, 
  unsigned int B_start1, unsigned int B_start2, 
  unsigned int B_inc1,   unsigned int B_inc2, 
  unsigned int B_internal_size1,  unsigned int B_internal_size2, 

  double fac3, 
  unsigned int options3, 
  __global const double * C, 
  unsigned int C_start1, unsigned int C_start2, 
  unsigned int C_inc1,   unsigned int C_inc2, 
  unsigned int C_internal_size1,  unsigned int C_internal_size2 
) { 
  double alpha = fac2[0]; 
  if (options2 & (1 << 0)) 
    alpha = -alpha; 
 
  double beta = fac3; 
  if (options3 & (1 << 0)) 
    beta = -beta; 
 
  if (options2 & (1 << 1)) { 
    if (options3 & (1 << 1)) {
  unsigned int row_gid = get_global_id(0) / get_local_size(0);
  unsigned int col_gid = get_global_id(0) % get_local_size(0);
  for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
    for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
      A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] += B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)] / alpha + C[(row * C_inc1 + C_start1) * C_internal_size2 + (col * C_inc2 + C_start2)] / beta; 
    } else {
  unsigned int row_gid = get_global_id(0) / get_local_size(0);
  unsigned int col_gid = get_global_id(0) % get_local_size(0);
  for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
    for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
      A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] += B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)] / alpha + C[(row * C_inc1 + C_start1) * C_internal_size2 + (col * C_inc2 + C_start2)] * beta; 
    } 
  } else { 
    if (options3 & (1 << 1)) {
  unsigned int row_gid = get_global_id(0) / get_local_size(0);
  unsigned int col_gid = get_global_id(0) % get_local_size(0);
  for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
    for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
      A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] += B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)] * alpha + C[(row * C_inc1 + C_start1) * C_internal_size2 + (col * C_inc2 + C_start2)] / beta; 
    } else {
  unsigned int row_gid = get_global_id(0) / get_local_size(0);
  unsigned int col_gid = get_global_id(0) % get_local_size(0);
  for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
    for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
      A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] += B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)] * alpha + C[(row * C_inc1 + C_start1) * C_internal_size2 + (col * C_inc2 + C_start2)] * beta; 
    } 
  } 
} 
__kernel void ambm_m_gpu_gpu( 
  __global double * A, 
  unsigned int A_start1, unsigned int A_start2, 
  unsigned int A_inc1,   unsigned int A_inc2, 
  unsigned int A_size1,  unsigned int A_size2, 
  unsigned int A_internal_size1,  unsigned int A_internal_size2, 
  __global double * fac2, 
  unsigned int options2, 
  __global const double * B, 
  unsigned int B_start1, unsigned int B_start2, 
  unsigned int B_inc1,   unsigned int B_inc2, 
  unsigned int B_internal_size1,  unsigned int B_internal_size2, 

  __global double * fac3, 
  unsigned int options3, 
  __global const double * C, 
  unsigned int C_start1, unsigned int C_start2, 
  unsigned int C_inc1,   unsigned int C_inc2, 
  unsigned int C_internal_size1,  unsigned int C_internal_size2 
) { 
  double alpha = fac2[0]; 
  if (options2 & (1 << 0)) 
    alpha = -alpha; 
 
  double beta = fac3[0]; 
  if (options3 & (1 << 0)) 
    beta = -beta; 
 
  if (options2 & (1 << 1)) { 
    if (options3 & (1 << 1)) {
  unsigned int row_gid = get_global_id(0) / get_local_size(0);
  unsigned int col_gid = get_global_id(0) % get_local_size(0);
  for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
    for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
      A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] += B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)] / alpha + C[(row * C_inc1 + C_start1) * C_internal_size2 + (col * C_inc2 + C_start2)] / beta; 
    } else {
  unsigned int row_gid = get_global_id(0) / get_local_size(0);
  unsigned int col_gid = get_global_id(0) % get_local_size(0);
  for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
    for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
      A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] += B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)] / alpha + C[(row * C_inc1 + C_start1) * C_internal_size2 + (col * C_inc2 + C_start2)] * beta; 
    } 
  } else { 
    if (options3 & (1 << 1)) {
  unsigned int row_gid = get_global_id(0) / get_local_size(0);
  unsigned int col_gid = get_global_id(0) % get_local_size(0);
  for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
    for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
      A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] += B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)] * alpha + C[(row * C_inc1 + C_start1) * C_internal_size2 + (col * C_inc2 + C_start2)] / beta; 
    } else {
  unsigned int row_gid = get_global_id(0) / get_local_size(0);
  unsigned int col_gid = get_global_id(0) % get_local_size(0);
  for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
    for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
      A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] += B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)] * alpha + C[(row * C_inc1 + C_start1) * C_internal_size2 + (col * C_inc2 + C_start2)] * beta; 
    } 
  } 
} 
__kernel void assign_cpu( 
  __global double * A, 
  unsigned int A_start1, unsigned int A_start2, 
  unsigned int A_inc1,   unsigned int A_inc2, 
  unsigned int A_size1,  unsigned int A_size2, 
  unsigned int A_internal_size1,  unsigned int A_internal_size2, 
  double alpha) 
{ 
  unsigned int row_gid = get_global_id(0) / get_local_size(0);
  unsigned int col_gid = get_global_id(0) % get_local_size(0);
  for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
    for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
      A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] = alpha; 
} 
__kernel void diagonal_assign_cpu( 
  __global double * A, 
  unsigned int A_start1, unsigned int A_start2, 
  unsigned int A_inc1,   unsigned int A_inc2, 
  unsigned int A_size1,  unsigned int A_size2, 
  unsigned int A_internal_size1,  unsigned int A_internal_size2, 
  double alpha) 
{ 
  for (unsigned int idx = get_global_id(0); idx < min(A_size1, A_size2); idx += get_global_size(0))
    A[(idx * A_inc1 + A_start1) * A_internal_size2 + (idx * A_inc2 + A_start2)] = alpha; 
} 
__kernel void element_op( 
  __global double * A, 
  unsigned int A_start1, unsigned int A_start2, 
  unsigned int A_inc1,   unsigned int A_inc2, 
  unsigned int A_size1,  unsigned int A_size2, 
  unsigned int A_internal_size1,  unsigned int A_internal_size2, 
  __global double * B, 
  unsigned int B_start1, unsigned int B_start2, 
  unsigned int B_inc1,   unsigned int B_inc2, 
  unsigned int B_internal_size1,  unsigned int B_internal_size2, 
  __global double * C, 
  unsigned int C_start1, unsigned int C_start2, 
  unsigned int C_inc1,   unsigned int C_inc2, 
  unsigned int C_internal_size1,  unsigned int C_internal_size2, 
  unsigned int op_type) 
{ 
  unsigned int row_gid = get_global_id(0) / get_local_size(0);
  unsigned int col_gid = get_global_id(0) % get_local_size(0);
  if (op_type == 2) {    for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
      for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
        A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] = 
        pow(B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)], 
            C[(row * C_inc1 + C_start1) * C_internal_size2 + (col * C_inc2 + C_start2)]); 
  } else if (op_type == 1) {    for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
      for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
        A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] = 
        B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)] / 
        C[(row * C_inc1 + C_start1) * C_internal_size2 + (col * C_inc2 + C_start2)]; 
  } else if (op_type == 0) {    for (unsigned int row = row_gid; row < A_size1; row += get_num_groups(0))
      for (unsigned int col = col_gid; col < A_size2; col += get_local_size(0))
        A[(row * A_inc1 + A_start1) * A_internal_size2 + (col * A_inc2 + A_start2)] = 
        B[(row * B_inc1 + B_start1) * B_internal_size2 + (col * B_inc2 + B_start2)] * 
        C[(row * C_inc1 + C_start1) * C_internal_size2 + (col * C_inc2 + C_start2)]; 
  }} 
__kernel void trans_vec_mul( 
          __global const double * A, 
          unsigned int A_row_start, unsigned int A_col_start, 
          unsigned int A_row_inc, unsigned int A_col_inc, 
          unsigned int A_row_size, unsigned int A_col_size, 
          unsigned int A_internal_rows, unsigned int A_internal_cols, 
          __global const double * v, 
          unsigned int v_start, unsigned int v_inc, unsigned int v_size, 
          __global double * result, 
          unsigned int result_start, unsigned int result_inc, unsigned int result_size, 
          __local double * work) 
{ 
  for (unsigned int row = get_global_id(0); row < A_col_size; row += get_global_size(0)) 
  { 
    double dot_prod = 0; 
    for (unsigned int col = 0; col < A_row_size; ++col) 
      dot_prod += A[(row * A_col_inc + A_col_start) + (col * A_row_inc + A_row_start) * A_internal_cols] * v[v_start + v_inc * col]; 
    result[row * result_inc + result_start] = dot_prod; 
  } 
} 
__kernel void vec_mul( 
          __global const double * A, 
          unsigned int A_row_start, unsigned int A_col_start, 
          unsigned int A_row_inc, unsigned int A_col_inc, 
          unsigned int A_row_size, unsigned int A_col_size, 
          unsigned int A_internal_rows, unsigned int A_internal_cols, 
          __global const double * v, 
          unsigned int v_start, unsigned int v_inc, unsigned int v_size, 
          __global double * result, 
          unsigned int result_start, unsigned int result_inc, unsigned int result_size, 
          __local double * work) 
{ 
  unsigned int row_gid = get_global_id(0) / get_local_size(0); 
  unsigned int col_gid = get_global_id(0) % get_local_size(0); 
  unsigned int lid = get_local_id(0); 
  for (unsigned int row = row_gid; row < A_row_size; row += get_num_groups(0)) 
  { 
    double dot_prod = 0; 
    for (unsigned int col = col_gid; col < A_col_size; col+=get_local_size(0)) 
      dot_prod += A[(row * A_row_inc + A_row_start) * A_internal_cols + col * A_col_inc + A_col_start] * v[v_start + v_inc * col]; 
    work[lid] = dot_prod; 
    for(unsigned int stride=get_local_size(0)/2 ; stride>0 ; stride>>=1){ 
      barrier(CLK_LOCAL_MEM_FENCE); 
      if(lid < stride) 
        work[lid] += work[lid+stride]; 
    } 
    if(lid == 0) 
      result[row * result_inc + result_start] = work[0]; 
  } 
} 

Finished a list.
Calculator,N,Init time (s), Calc.time(s), Calc.Freq(hz), Bytes, MaxError, FirstBlank, Err1, Err2, Err3, Blank
chebyshev interp; GPU Dense Matrix ,8,0.246,143188,6983.83,8, 0.5711,,0.5711,0.157257,0.22173,
chebyshev interp; GPU Dense Matrix ,12,0.026,133392,7496.7,8, 0.547051,,0.547051,0.323767,0.338702,
chebyshev interp; GPU Dense Matrix ,16,0.025,189787,5269.06,8, 0.507634,,0.507634,0.225303,0.238133,
chebyshev interp; GPU Dense Matrix ,20,0.052,208934,4786.2,8, 0.460946,,0.460946,0.354742,0.341655,
chebyshev interp; GPU Dense Matrix ,24,0.08,265007,3773.49,8, 0.635353,,0.635353,0.164325,0.255237,
chebyshev interp; GPU Dense Matrix ,28,0.095,284262,3517.88,8, 0.79706,,0.79706,0.241027,0.292618,
chebyshev interp; GPU Dense Matrix ,32,0.137,434622,2300.85,8, 0.676725,,0.676725,0.302232,0.174057,
chebyshev interp; GPU Dense Matrix ,36,0.26,434953,2299.1,8, 0.686354,,0.686354,0.309801,0.508983,
chebyshev interp; GPU Dense Matrix ,40,0.28,552625,1809.55,8, 0.648147,,0.648147,0.234568,0.284838,
chebyshev interp; GPU Dense Matrix ,44,0.394,947068,1055.89,8, 0.663242,,0.663242,0.180472,0.189854,
chebyshev interp; GPU Dense Matrix ,48,0.584,1.21424e+06,823.562,8, 0.536475,,0.536475,0.142275,0.215403,
chebyshev interp; GPU Dense Matrix ,52,0.642,1.29494e+06,772.235,8, 0.674787,,0.674787,0.179257,0.200859,
chebyshev interp; GPU Dense Matrix ,56,0.962,1.53209e+06,652.703,8, 0.547033,,0.547033,0.134625,0.309475,
chebyshev interp; GPU Dense Matrix ,60,1.108,2.46913e+06,405.001,8, 0.583723,,0.583723,0.142926,0.259668,
chebyshev interp; GPU Dense Matrix ,64,3.504,2.38254e+06,419.721,8, 0.542891,,0.542891,0.164444,0.215326,
chebyshev interp; GPU Dense Matrix ,68,2.024,3.7657e+06,265.555,8, 0.588392,,0.588392,0.165819,0.228539,
chebyshev interp; GPU Dense Matrix ,72,2.373,4.61312e+06,216.773,8, 0.609879,,0.609879,0.116357,0.160642,
chebyshev interp; GPU Dense Matrix ,76,3.086,4.36253e+06,229.225,8, 0.644361,,0.644361,0.103203,0.134233,
chebyshev interp; GPU Dense Matrix ,80,5.485,6.64078e+06,150.585,8, 0.499337,,0.499337,0.135422,0.177072,
chebyshev interp; GPU Dense Matrix ,84,4.436,8.00301e+06,124.953,8, 0.486386,,0.486386,0.0801207,0.155349,
chebyshev interp; GPU Dense Matrix ,88,6.095,7.8963e+06,126.642,8, 0.393216,,0.393216,0.0785166,0.114776,
chebyshev interp; GPU Dense Matrix ,92,7.584,8.93171e+06,111.961,8, 0.418028,,0.418028,0.0823771,0.108522,
chebyshev interp; GPU Dense Matrix ,96,18.93,1.07643e+07,92.8995,8, 0.430906,,0.430906,0.0660745,0.102805,
chebyshev interp; GPU Dense Matrix ,100,9.777,1.21147e+07,82.5441,8, 0.361219,,0.361219,0.0746429,0.134665,
chebyshev interp; GPU Dense Matrix ,104,12.161,1.70732e+07,58.5715,8, 0.498381,,0.498381,0.0556757,0.0855071,
chebyshev interp; GPU Dense Matrix ,108,13.884,1.97429e+07,50.6512,8, 0.466157,,0.466157,0.0973402,0.12843,
chebyshev interp; GPU Dense Matrix ,112,24.703,1.94423e+07,51.4342,8, 0.391278,,0.391278,0.0667131,0.0853838,
chebyshev interp; GPU Dense Matrix ,116,21.444,2.17936e+07,45.8851,8, 0.335553,,0.335553,0.0755791,0.116501,
chebyshev interp; GPU Dense Matrix ,120,23.205,2.45506e+07,40.7322,8, 0.480072,,0.480072,0.0877382,0.116398,
chebyshev interp; GPU Dense Matrix ,124,30.567,2.87829e+07,34.7429,8, 0.340208,,0.340208,0.0575587,0.100992,
chebyshev interp; GPU Dense Matrix ,128,66.741,3.71598e+07,26.9108,8, 0.42066,,0.42066,0.066581,0.16434,
chebyshev interp; GPU Dense Matrix ,132,36.717,4.15503e+07,24.0672,8, 0.324421,,0.324421,0.0643348,0.108362,
chebyshev interp; GPU Dense Matrix ,136,45.287,3.8999e+07,25.6417,8, 0.347339,,0.347339,0.064225,0.125453,
chebyshev interp; GPU Dense Matrix ,140,45.61,5.21169e+07,19.1876,8, 0.375689,,0.375689,0.0515468,0.136163,
ViennaCL: FATAL ERROR: Kernel start failed for 'assign_cpu'.
ViennaCL: Smaller work sizes could not solve the problem. 
Finished a list.
Calculator,N,Init time (s), Calc.time(s), Calc.Freq(hz), Bytes, MaxError, FirstBlank, Err1, Err2, Err3, Blank
chebyshev interp; CPU Dense Matrix ,8,0.012,9978,100220,8, 0.5711,,0.5711,0.157257,0.22173,
chebyshev interp; CPU Dense Matrix ,12,0.032,41164,24293.1,8, 0.547051,,0.547051,0.323767,0.338702,
chebyshev interp; CPU Dense Matrix ,16,0.031,100567,9943.62,8, 0.507634,,0.507634,0.225303,0.238133,
chebyshev interp; CPU Dense Matrix ,20,0.06,210962,4740.19,8, 0.460946,,0.460946,0.354742,0.341655,
chebyshev interp; CPU Dense Matrix ,24,0.07,388538,2573.75,8, 0.635353,,0.635353,0.164325,0.255237,
chebyshev interp; CPU Dense Matrix ,28,0.083,681675,1466.97,8, 0.79706,,0.79706,0.241027,0.292618,
chebyshev interp; CPU Dense Matrix ,32,0.099,1.73577e+06,576.112,8, 0.676725,,0.676725,0.302232,0.174057,
chebyshev interp; CPU Dense Matrix ,36,0.191,2.84692e+06,351.257,8, 0.686354,,0.686354,0.309801,0.508983,
chebyshev interp; CPU Dense Matrix ,40,0.244,4.96232e+06,201.519,8, 0.648147,,0.648147,0.234568,0.284838,
chebyshev interp; CPU Dense Matrix ,44,0.283,7.26358e+06,137.673,8, 0.663242,,0.663242,0.180472,0.189854,
chebyshev interp; CPU Dense Matrix ,48,0.384,1.0443e+07,95.7582,8, 0.536475,,0.536475,0.142275,0.215403,
chebyshev interp; CPU Dense Matrix ,52,0.575,1.38228e+07,72.3443,8, 0.674787,,0.674787,0.179257,0.200859,
chebyshev interp; CPU Dense Matrix ,56,0.666,1.82118e+07,54.9096,8, 0.547033,,0.547033,0.134625,0.309475,
chebyshev interp; CPU Dense Matrix ,60,0.905,2.55192e+07,39.1862,8, 0.583723,,0.583723,0.142926,0.259668,
chebyshev interp; CPU Dense Matrix ,64,1.032,3.61903e+07,27.6317,8, 0.542891,,0.542891,0.164444,0.215326,
chebyshev interp; CPU Dense Matrix ,68,1.53,4.20061e+07,23.8061,8, 0.588392,,0.588392,0.165819,0.228539,
chebyshev interp; CPU Dense Matrix ,72,1.653,5.35439e+07,18.6763,8, 0.609879,,0.609879,0.116357,0.160642,
chebyshev interp; CPU Dense Matrix ,76,2.524,6.06893e+07,16.4774,8, 0.644361,,0.644361,0.103203,0.134233,
chebyshev interp; CPU Dense Matrix ,80,2.915,7.97103e+07,12.5454,8, 0.499337,,0.499337,0.135422,0.177072,
chebyshev interp; CPU Dense Matrix ,84,3.398,9.48925e+07,10.5382,8, 0.486386,,0.486386,0.0801207,0.155349,
chebyshev interp; CPU Dense Matrix ,88,4.305,1.17119e+08,8.53831,8, 0.393216,,0.393216,0.0785166,0.114776,
chebyshev interp; CPU Dense Matrix ,92,5.981,1.32027e+08,7.5742,8, 0.418028,,0.418028,0.0823771,0.108522,
chebyshev interp; CPU Dense Matrix ,96,6.426,1.99432e+08,5.01425,8, 0.430906,,0.430906,0.0660745,0.102805,
chebyshev interp; CPU Dense Matrix ,100,7.431,2.69841e+08,3.70589,8, 0.361219,,0.361219,0.0746429,0.134665,
chebyshev interp; CPU Dense Matrix ,104,8.884,2.71845e+08,3.67857,8, 0.498381,,0.498381,0.0556757,0.0855071,
chebyshev interp; CPU Dense Matrix ,108,10.135,2.74061e+08,3.64882,8, 0.466157,,0.466157,0.0973402,0.12843,
chebyshev interp; CPU Dense Matrix ,112,12.256,3.01226e+08,3.31977,8, 0.391278,,0.391278,0.0667131,0.0853838,
chebyshev interp; CPU Dense Matrix ,116,16.82,3.39674e+08,2.944,8, 0.335553,,0.335553,0.0755791,0.116501,
chebyshev interp; CPU Dense Matrix ,120,17.067,3.832e+08,2.6096,8, 0.480072,,0.480072,0.0877382,0.116398,
chebyshev interp; CPU Dense Matrix ,124,23.507,4.50269e+08,2.22089,8, 0.340208,,0.340208,0.0575587,0.100992,
chebyshev interp; CPU Dense Matrix ,128,24.781,6.72828e+08,1.48626,8, 0.42066,,0.42066,0.066581,0.16434,
chebyshev interp; CPU Dense Matrix ,132,28.192,6.26087e+08,1.59722,8, 0.324421,,0.324421,0.0643348,0.108362,
chebyshev interp; CPU Dense Matrix ,136,34.658,6.59969e+08,1.51522,8, 0.347339,,0.347339,0.064225,0.125453,
chebyshev interp; CPU Dense Matrix ,140,34.732,7.83849e+08,1.27576,8, 0.375689,,0.375689,0.0515468,0.136163,
chebyshev interp; CPU Dense Matrix ,144,39.259,8.20851e+08,1.21825,8, 0.344734,,0.344734,0.0582125,0.0984801,
chebyshev interp; CPU Dense Matrix ,148,52.234,8.90469e+08,1.123,8, 0.345959,,0.345959,0.053625,0.0929909,
chebyshev interp; CPU Dense Matrix ,152,56.063,1.00401e+09,0.996004,8, 0.370142,,0.370142,0.0574828,0.104421,
chebyshev interp; CPU Dense Matrix ,156,61.524,1.1081e+09,0.902443,8, 0.43121,,0.43121,0.0532241,0.0769289,
chebyshev interp; CPU Dense Matrix ,160,70.472,1.55169e+09,0.644457,8, 0.322272,,0.322272,0.053018,0.0752097,
chebyshev interp; CPU Dense Matrix ,164,90.119,1.51255e+09,0.661135,8, 0.323604,,0.323604,0.0395898,0.0887347,
chebyshev interp; CPU Dense Matrix ,168,86.896,1.67211e+09,0.598046,8, 0.309379,,0.309379,0.0401826,0.0682608,
chebyshev interp; CPU Dense Matrix ,172,110.476,1.92124e+09,0.520498,8, 0.317632,,0.317632,0.037338,0.0915503,
chebyshev interp; CPU Dense Matrix ,176,104.627,2.24491e+09,0.445453,8, 0.360769,,0.360769,0.0394065,0.0958706,
chebyshev interp; CPU Dense Matrix ,180,112.571,2.37927e+09,0.420297,8, 0.340794,,0.340794,0.0423411,0.0820042,
chebyshev interp; CPU Dense Matrix ,184,139.973,2.72181e+09,0.367403,8, 0.31384,,0.31384,0.0359746,0.0707967,
chebyshev interp; CPU Dense Matrix ,188,172.141,3.01335e+09,0.331856,8, 0.436223,,0.436223,0.0406317,0.0924141,
chebyshev interp; CPU Dense Matrix ,192,169.965,3.56604e+09,0.280423,8, 0.296188,,0.296188,0.0368988,0.0504877,
chebyshev interp; CPU Dense Matrix ,196,186.714,3.58081e+09,0.279266,8, 0.369016,,0.369016,0.0451101,0.0515316,
chebyshev interp; CPU Dense Matrix ,200,200.635,3.77965e+09,0.264575,8, 0.35849,,0.35849,0.0366214,0.083992,
chebyshev interp; CPU Dense Matrix ,204,229.166,4.07557e+09,0.245364,8, 0.359119,,0.359119,0.0359239,0.0538288,
chebyshev interp; CPU Dense Matrix ,208,235.175,4.44721e+09,0.22486,8, 0.368921,,0.368921,0.0297672,0.0543195,
chebyshev interp; CPU Dense Matrix ,212,302.026,4.75681e+09,0.210225,8, 0.328353,,0.328353,0.0270609,0.0860263,
chebyshev interp; CPU Dense Matrix ,216,279.086,6.64149e+09,0.150569,8, 0.421217,,0.421217,0.0251355,0.0557365,
chebyshev interp; CPU Dense Matrix ,220,319.39,5.47425e+09,0.182673,8, 0.319258,,0.319258,0.0222075,0.0733983,
chebyshev interp; CPU Dense Matrix ,224,362.614,6.57134e+09,0.152176,8, 0.310798,,0.310798,0.028884,0.0573101,
chebyshev interp; CPU Dense Matrix ,228,410.399,6.52782e+09,0.15319,8, 0.30966,,0.30966,0.0324078,0.0730058,
chebyshev interp; CPU Dense Matrix ,232,453.64,6.92699e+09,0.144363,8, 0.329003,,0.329003,0.0269996,0.0768959,
chebyshev interp; CPU Dense Matrix ,236,531.507,7.40837e+09,0.134982,8, 0.333083,,0.333083,0.0289476,0.0738084,
chebyshev interp; CPU Dense Matrix ,240,490.138,8.02074e+09,0.124677,8, 0.324868,,0.324868,0.0211245,0.0445478,
chebyshev interp; CPU Dense Matrix ,244,610.984,8.84734e+09,0.113028,8, 0.324167,,0.324167,0.0220977,0.0546924,
chebyshev interp; CPU Dense Matrix ,248,606.632,9.79205e+09,0.102124,8, 0.316706,,0.316706,0.0184395,0.0433417,
chebyshev interp; CPU Dense Matrix ,252,632.016,2.44267e+10,0.0409388,8, 0.308309,,0.308309,0.0189849,0.0391804,
chebyshev interp; CPU Dense Matrix ,256,707.639,1.61114e+10,0.0620679,8, 0.323628,,0.323628,0.0179685,0.0387457,
